Directory structure:
└── expense-tracker/
    ├── README.md
    ├── LICENSE
    ├── todo.md
    ├── backend/
    │   ├── package.json
    │   ├── public/
    │   │   └── temp/
    │   │       └── .gitkeep
    │   └── src/
    │       ├── app.js
    │       ├── constants.js
    │       ├── index.js
    │       ├── controllers/
    │       │   ├── demo.controller.js
    │       │   ├── feedback.controller.js
    │       │   ├── goal.controller.js
    │       │   ├── payment.controller.js
    │       │   ├── stats.controller.js
    │       │   ├── transaction.controller.js
    │       │   └── user.controller.js
    │       ├── db/
    │       │   └── db.js
    │       ├── middlewares/
    │       │   ├── auth.middleware.js
    │       │   └── multer.middleware.js
    │       ├── models/
    │       │   ├── feedback.model.js
    │       │   ├── goal.model.js
    │       │   ├── transaction.model.js
    │       │   └── user.model.js
    │       ├── routes/
    │       │   ├── demo.routes.js
    │       │   ├── feedback.routes.js
    │       │   ├── goal.routes.js
    │       │   ├── payment.routes.js
    │       │   ├── stats.routes.js
    │       │   ├── transaction.routes.js
    │       │   └── user.routes.js
    │       └── utils/
    │           ├── apiError.js
    │           ├── apiResponse.js
    │           ├── asyncHandler.js
    │           └── cloudinary.js
    └── frontend/
        ├── components.json
        ├── index.html
        ├── package.json
        ├── pnpm-lock.yaml
        ├── postcss.config.js
        ├── tailwind.config.js
        ├── tsconfig.json
        ├── tsconfig.node.json
        ├── vercel.json
        ├── vite.config.ts
        ├── .eslintrc.cjs
        └── src/
            ├── App.tsx
            ├── index.css
            ├── main.tsx
            ├── Routing.tsx
            ├── vite-env.d.ts
            ├── components/
            │   ├── AccountBalance.tsx
            │   ├── AddIncomeAndExpense.tsx
            │   ├── AddMoneyToGoal.tsx
            │   ├── AddNewGoal.tsx
            │   ├── CheckoutButton.tsx
            │   ├── Command.tsx
            │   ├── DatePicker.tsx
            │   ├── DemoLoginButton.tsx
            │   ├── ExpenseTransactionCard.tsx
            │   ├── Feedback.tsx
            │   ├── FirstGoal.tsx
            │   ├── GoalsDisplay.tsx
            │   ├── GoalsSkeleton.tsx
            │   ├── HamburgerMenu.tsx
            │   ├── icons.tsx
            │   ├── IncomeAndExpense.tsx
            │   ├── IncomeTransactionCard.tsx
            │   ├── InitialDeposit.tsx
            │   ├── LogoutButton.tsx
            │   ├── mode-toggle.tsx
            │   ├── MoreAccountOptions.tsx
            │   ├── Navbar.tsx
            │   ├── NotFound.tsx
            │   ├── RecentTransactions.tsx
            │   ├── SidebarPreferences.tsx
            │   ├── SingleTransaction.tsx
            │   ├── SingleTransactionSkeleton.tsx
            │   ├── SingularGoalView.tsx
            │   ├── theme-provider.tsx
            │   ├── TransactionDisplay.tsx
            │   ├── TransactionSkeleton.tsx
            │   ├── UpdateAccountBalance.tsx
            │   ├── UpdateCurrency.tsx
            │   ├── UpdateGoal.tsx
            │   ├── UpdateIncomeAndExpense.tsx
            │   ├── UpdatePassword.tsx
            │   ├── payment/
            │   │   └── PaymentSuccess.tsx
            │   ├── stats/
            │   │   ├── FixedIncomeExpenseGraph.tsx
            │   │   ├── HiddenStats.tsx
            │   │   └── TimeRangeIncomeAndExpense.tsx
            │   └── ui/
            │       ├── alert-dialog.tsx
            │       ├── avatar.tsx
            │       ├── badge.tsx
            │       ├── button.tsx
            │       ├── calendar.tsx
            │       ├── card.tsx
            │       ├── checkbox.tsx
            │       ├── command.tsx
            │       ├── dialog.tsx
            │       ├── drawer.tsx
            │       ├── dropdown-menu.tsx
            │       ├── hover-card.tsx
            │       ├── input.tsx
            │       ├── label.tsx
            │       ├── popover.tsx
            │       ├── progress.tsx
            │       ├── scroll-area.tsx
            │       ├── select.tsx
            │       ├── sheet.tsx
            │       ├── skeleton.tsx
            │       ├── table.tsx
            │       ├── tabs.tsx
            │       ├── textarea.tsx
            │       ├── toast.tsx
            │       ├── toaster.tsx
            │       └── use-toast.ts
            ├── hooks/
            │   └── useTitle.tsx
            ├── lib/
            │   └── utils.ts
            ├── pages/
            │   ├── Account.tsx
            │   ├── Dashboard.tsx
            │   ├── Goals.tsx
            │   ├── Landing.tsx
            │   ├── Login.tsx
            │   ├── NewTransaction.tsx
            │   ├── Overview.tsx
            │   ├── Register.tsx
            │   ├── ResetDemo.tsx
            │   ├── Settings.tsx
            │   ├── Statistics.tsx
            │   └── Transactions.tsx
            └── utils/
                └── formatter.ts

================================================
FILE: README.md
================================================
[![SpendSync](https://github.com/Devansh-Baghel/SpendSync/assets/77718741/f8f5f3a3-ff72-4192-901d-c613419ee1c5)](https://spendsync.baghel.dev/)

# SpendSync 💸✨

[Live Demo](https://spendsync.baghel.dev/)

SpendSync is an all in one financial planning and money tracking tool with a sleek and intuitive user interface.

## Tech Stack

### Frontend

- Laguage - [Typescript](https://www.typescriptlang.org/)
- Framework - [React](https://react.dev/)
- Component Library - [shadcn](https://ui.shadcn.com/)
- Charts - [Chart.js](https://www.chartjs.org/)
- UI Theme - [ui.jln.dev](https://ui.jln.dev/)
- Styling - [tailwindcss](https://tailwindcss.com/)
- Data fetching - [Tanstack Query](https://tanstack.com/query/latest)
- Toast notifications - [react-hot-toast](https://react-hot-toast.com/)
- Icons - [react-icons](https://react-icons.github.io/react-icons/)
- State management - Context Api

### Backend

- Laguage - Javascript
- Runtime - [Nodejs](https://nodejs.org/en)
- Framework - [Express](https://expressjs.com/)
- Database - [MongoDB](https://www.mongodb.com/)
- Authentication - [jsonwebtoken](https://jwt.io/) + [bcrypt](https://www.npmjs.com/package/bcrypt)
- File upload - [multer](https://github.com/expressjs/multer) + [cloudinary](https://cloudinary.com/)

## Screenshots

![Screenshot from 2024-05-06 00-48-56](https://github.com/Devansh-Baghel/SpendSync/assets/77718741/f6c09f0d-b947-470b-b0b4-26f1eeed3e34)
![Screenshot from 2024-05-06 00-49-12](https://github.com/Devansh-Baghel/SpendSync/assets/77718741/45a24d8b-45d1-425d-b527-9f6d5a9e4f55)
![Screenshot from 2024-05-06 00-49-54](https://github.com/Devansh-Baghel/SpendSync/assets/77718741/1074b62f-a3e0-464e-a82c-3d5969cbac1c)
![Screenshot from 2024-05-06 00-50-17](https://github.com/Devansh-Baghel/SpendSync/assets/77718741/5734b842-6458-419f-91b5-ad89b98a6a1d)


![Screenshot from 2024-03-10 15-35-56](https://github.com/Devansh-Baghel/SpendSync/assets/77718741/328fab2a-95f5-43af-8296-c1336a59c44e)

![Screenshot from 2024-03-10 15-36-07](https://github.com/Devansh-Baghel/SpendSync/assets/77718741/e70e1264-7476-4f9e-af7d-0e0d5c828729)

![Screenshot from 2024-03-10 15-36-25](https://github.com/Devansh-Baghel/SpendSync/assets/77718741/1eb45bac-4cf2-4498-b81f-c3b86bb3e100)

![Screenshot from 2024-03-10 15-36-39](https://github.com/Devansh-Baghel/SpendSync/assets/77718741/0d5efc97-6fe3-4f75-b686-06a606c10a60)

![Screenshot from 2024-03-10 15-37-40](https://github.com/Devansh-Baghel/SpendSync/assets/77718741/4052a464-c735-48f4-8680-e3e7154ac310)

![Screenshot from 2024-03-10 15-37-56](https://github.com/Devansh-Baghel/SpendSync/assets/77718741/74cc2b7a-1e95-4433-acda-a60ef59301a3)

![Screenshot from 2024-03-10 15-38-08](https://github.com/Devansh-Baghel/SpendSync/assets/77718741/04355411-3b03-4209-a026-4a1673ffa438)

## License

SpendSync is licensed under the MIT License. Feel free to use, modify, and distribute this software according to the terms of the license.



================================================
FILE: LICENSE
================================================
MIT License

Copyright (c) 2024 Devansh Baghel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
FILE: todo.md
================================================
- [x] logout controller
- [x] logout frontend
- [x] add initial deposit frontend
- [x] add monthly recurring income
- [x] add hasSetIncome in user.model
- [x] add hasSetExpenses in user.model
- [x] add monthlyIncome in user.model
- [x] add monthlyExpenses in user.model
- [x] get Transactions controller + route
- [x] create Transaction controller + route
- [x] Merge income and expenses in a single route w/ controller as you can't have expense more than income
<!-- - [ ] Add attachment feature in sidebar -->
- [ ] filter Transactions feature
- [x] Demo user in register/login
- [x] Pro version of the thing with stripe integration
<!-- - [ ] Oauth? -->
- [x] DashBoard

  - [x] SideBar
    - [x] Logout at the bottom of the sidebar
  - [x] Overview
  - [x] Transactions
  - [x] Settings / Account

- [x] Goals

  - [x] Goals not found frontend
  - [x] Goals model, finalAmount, currentAmount, title, desc
  - [x] Each goal seperate page
  <!-- - [ ] markdown mode in goal desc -->
  - [x] when do you wan't this goal to finish? shadcn datetime in the frontend
  <!-- - [ ] shadcn command box on frontend -->
  - [ ] paginate goals display
  - [x] GoalsDisplay doesn't immideatly refresh to add the new goal after creating a new goal

- [x] update goal controller w/ endpoint
- [x] show successfull toast messages whenever a req user makes is 200ok, for AddMoneyToGoal
- [x] user avatar
- [ ] Setings page: theme switch

- [x] change password
- [x] add date of birth
- [x] update income and expense
- [x] export all transaction data as a csv
- [x] export all goals data as a csv
- [x] in overview add option to control + k andd add "Tip: try ctrl + k"
- [x] update account balance
- [x] overview: you can update this in /account ; incomeAndExpense / accountBalance
- [x] give feedback controller
- [x] update date-of-birth controller
- [x] delete goal option w/ alert dialog shadcn
- [x] delete goal controller
- [x] register component immideatly logges user in
- [x] stripe integration w/ upgrade to pro
  <!-- - [ ] max 5 goals for free user, unlimited goals for paid user -->
  <!-- - [ ] add more categories for goals, user model: categories-default [1, 2, 3, 4, 5 ] -->
- [x] submit feedback button will open a shadcn drawer
- [ ] created-date in each goalDisplay + singularGoalView
- [x] deleting a goal add money back to the user's balance
- [ ] danger zone in settings made with shadcn accordian:

  - [ ] delete all goals; this doesn't work for demo account
  - [ ] delete all transactions; this doesn't work for demo account
  - [ ] delete account permanantly; this doesn't work for demo account

- [x] add react-hot-toast
- [x] remove password from all findByIdAndUpdateQueries
- [ ] Demo user - as a paid user
- [x] insights page: only for paid users, has the ui blurred, says "Upgrade to premium or login as a paid user"
- [ ] goals tabluar view : check mantine ui table
- [ ] a little "i" in the Wallet label in add expense that tells user that selecting cash would deduct this ammount from their account balance
- [x] Issue: Stripe Integration
- [ ] Issue: Doesn't work in brave browser
- [x] Issue: repo link in project
- [x] Issue: Logout toast notifications
- [x] Issue: loading icons in GoalsDisplay & transactionDisplay
- [x] filetype check in frontend when uploading avatar
- [x] Issue: refreshing causes app to crash - vercel.json
- [ ] change html title and metadata to spendsync!
<!-- - [ ] add a password to protect the reset demo user thing -->
- [x] get current user controller in backend
- [x] get the latest user data in the App component
- [x] single transaction loading skeleton
- [ ] searching in transactions
- [ ] sorting in transactions
- [x] fix issue w/ going to transaction page when there are no transactions, screen flickering
- [x] fix feedback styling


- [ ] Make the sidebar of current page a different background that merges with page on right


#### Statistics

- [x] Fixed income and expense
- [x] Income this week
- [x] Income this month
- [x] Income this year
- [x] Expense this week
- [x] Expense this month
- [x] Expense this year

- [ ] Build a way to import test data for new user accounts, or anyone else




================================================
FILE: backend/package.json
================================================
{
  "name": "backend",
  "version": "1.0.0",
  "description": "",
  "type": "module",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "dev": "nodemon -r dotenv/config src/index",
    "start": "node -r dotenv/config src/index"
  },
  "author": "",
  "license": "MIT",
  "dependencies": {
    "bcrypt": "^5.1.1",
    "cloudinary": "^2.1.0",
    "cookie-parser": "^1.4.6",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.3.1",
    "multer": "2.0.2",
    "stripe": "^14.25.0"
  },
  "devDependencies": {
    "nodemon": "^3.1.0"
  }
}



================================================
FILE: backend/public/temp/.gitkeep
================================================
keep



================================================
FILE: backend/src/app.js
================================================
import express from "express";
import cors from "cors";
import cookieParser from "cookie-parser";

const app = express();

app.use(
  cors({
    origin: [
      process.env.CORS_ORIGIN,
      "http://localhost:5173",
      "https://spendsync.baghel.dev",
      "tauri://localhost",
    ],
    credentials: true,
  })
);

app.use(express.json({ limit: "16kb" }));
app.use(express.urlencoded({ extended: true, limit: "16kb" }));
app.use(express.static("public"));
app.use(cookieParser());

// Routes
import userRouter from "./routes/user.routes.js";
import goalRouter from "./routes/goal.routes.js";
import feedbackRouter from "./routes/feedback.routes.js";
import transactionRouter from "./routes/transaction.routes.js";
import demoRouter from "./routes/demo.routes.js";
import payRouter from "./routes/payment.routes.js";
import statsRouter from "./routes/stats.routes.js";

app.use("/api/v1/users", userRouter);
app.use("/api/v1/goals", goalRouter);
app.use("/api/v1/feedback", feedbackRouter);
app.use("/api/v1/transaction", transactionRouter);
app.use("/api/v1/demo", demoRouter);
app.use("/api/v1/pay", payRouter);
app.use("/api/v1/stats", statsRouter);

export default app;



================================================
FILE: backend/src/constants.js
================================================
export const DB_NAME = "expense-tracker";
export const PORT = process.env.PORT || 3000;



================================================
FILE: backend/src/index.js
================================================
import dotenv from "dotenv";
import connectDB from "./db/db.js";
import app from "./app.js";
import { PORT } from "./constants.js";

dotenv.config({
  path: "../.env",
});

connectDB()
  .then(() => {
    app.listen(PORT, () => {
      console.log(`Server Running on Port: ${PORT}`);
    });
  })
  .catch((err) => {
    console.error("MongoDB Connection failed !!!", err);
  });



================================================
FILE: backend/src/controllers/demo.controller.js
================================================
import { asyncHandler } from "../utils/asyncHandler.js";
import { ApiError } from "../utils/apiError.js";
import { ApiResponse } from "../utils/apiResponse.js";
import { Goal } from "../models/goal.model.js";
// import { User } from "../models/user.model.js";
// import { Transaction } from "../models/transaction.model.js";

export const resetDemoUser = asyncHandler(async (req, res) => {
  let user = req.user;

  if (user.email !== "demo@demo.demo")
    throw new ApiError("You aren't the demo user");

  user.avatar =
    "https://res.cloudinary.com/dmg2vyybm/image/upload/v1710250663/ttvr7uqkb46z3eciwjjp.jpg";
  const { deletedCount } = await Goal.deleteMany({ madeBy: user._id });
  console.log(`${deletedCount} goals made by demo user deleted`);
  const goals = await Goal.create([
    {
      madeBy: user._id,
      title: "Europe Vacation",
      finalAmount: 8000,
      currentAmount: 6200,
      category: "Travel",
      description: "The best vacation ever",
    },
    {
      madeBy: user._id,
      title: "Save For a New Car",
      finalAmount: 35000,
      currentAmount: 5600,
      category: "Savings",
      description: "Long way to go!",
    },
  ]);
  user.goals = [goals[0]._id, goals[1]._id];
  user.transactionHistory = [
    "65eb1b1e1c84f48b0bb5fcf9",
    "65eb1b991c84f48b0bb5fd05",
    "65eb1bb71c84f48b0bb5fd09",
    "65eb1be31c84f48b0bb5fd0d",
    "65eb1db91c84f48b0bb5fd45",
  ];
  user.fullName = "Demo User";
  user.bio = "Hello, i am the demo user!";
  user.income = 7800;
  user.expense = 2200;
  user.currentBalance = 65000;

  user.save();

  return res
    .status(200)
    .json(new ApiResponse(200, {}, "Demo user has been reset"));
});



================================================
FILE: backend/src/controllers/feedback.controller.js
================================================
import { asyncHandler } from "../utils/asyncHandler.js";
import { ApiError } from "../utils/apiError.js";
import { ApiResponse } from "../utils/apiResponse.js";
import { Feedback } from "../models/feedback.model.js";

export const createFeedback = asyncHandler(async (req, res) => {
  const user = req.user;
  const { rating, description } = req.body;

  if (!rating) throw new ApiError(400, "Rating is required");

  if (description) {
    if (typeof description !== "string")
      throw new ApiError(400, "Description must be a string!");
  }

  const ratingOptions = ["1-star", "2-star", "3-star", "4-star", "5-star"];

  if (!ratingOptions.includes(rating))
    throw new ApiError(
      400,
      "Rating must be in the <ratingNumber>-<star> format"
    );

  await Feedback.create({
    madeBy: user._id,
    rating,
    description: !description ? "" : description,
  });

  return res
    .status(201)
    .json(new ApiResponse(201, {}, "Feedback created successfully"));
});



================================================
FILE: backend/src/controllers/goal.controller.js
================================================
import { Goal } from "../models/goal.model.js";
import { User } from "../models/user.model.js";
import { ApiError } from "../utils/apiError.js";
import { ApiResponse } from "../utils/apiResponse.js";
import { asyncHandler } from "../utils/asyncHandler.js";
import mongoose from "mongoose";

export const createGoal = asyncHandler(async (req, res) => {
  const { title, finalAmount, category, description } = req.body;
  const userId = req.user._id;
  const user = req.user;

  if (!title) throw new ApiError(400, "Goal title is required");
  if (!finalAmount) throw new ApiError(400, "Final amount is required");

  const goal = await Goal.create({
    madeBy: userId,
    title,
    finalAmount,
    category: category ? category : "Savings",
    description: description ? description : "",
  });

  user.goals.push(goal._id);
  await user.save();

  return res
    .status(201)
    .json(
      new ApiResponse(201, { user, goal }, "New goal successfully created")
    );
});

export const getGoals = asyncHandler(async (req, res) => {
  const userGoals = req.user.goals;

  if (!userGoals || userGoals.length === 0)
    throw new ApiError(404, "User doesn't have any goals");

  const goals = await Goal.find({ _id: { $in: userGoals } });

  return res
    .status(200)
    .json(new ApiResponse(200, { goals }, "Goals sent successfully"));
});

export const updateGoal = asyncHandler(async (req, res) => {
  const { goalId, title, finalAmount, description, category } = req.body;
  const user = req.user;

  if (!goalId) throw new ApiError(400, "Goal id is required to update goal");

  const updateFields = {};
  if (category) updateFields.category = category;
  if (description) updateFields.description = description;
  if (finalAmount) updateFields.finalAmount = finalAmount;
  if (title) updateFields.title = title;

  const updatedGoal = await Goal.findByIdAndUpdate(goalId, updateFields, {
    new: true,
  });

  if (!updatedGoal) throw new ApiError(404, "Goal doesn't exist");

  return res
    .status(200)
    .json(
      new ApiResponse(
        200,
        { user, goal: updatedGoal },
        "Goal updated successfully"
      )
    );
});

export const addMoneyToGoal = asyncHandler(async (req, res) => {
  const session = await mongoose.startSession();
  session.startTransaction();

  const user = req.user;
  const { goalId, currentAmount } = req.body;

  if (!goalId)
    throw new ApiError(400, "Goal id is required to add money to goal");
  if (!currentAmount)
    throw new ApiError(400, "Current ammount is required to add money to goal");

  if (currentAmount > user.currentBalance)
    throw new ApiError(
      403,
      "Goal current amount can't be greater than user's balance"
    );

  if (!user.goals.includes(goalId))
    throw new ApiError(400, "This goal isn't created by this user");

  const updatedGoal = await Goal.findByIdAndUpdate(
    goalId,
    {
      $inc: { currentAmount: currentAmount }, // Increment the amount by currentAmount
    },
    {
      new: true,
      session,
    }
  );

  if (!updatedGoal) {
    await session.abortTransaction();
    session.endSession();
    throw new ApiError(404, "Goal doesn't exist");
  }

  if (updatedGoal.currentAmount > updatedGoal.finalAmount) {
    await session.abortTransaction();
    session.endSession();
    throw new ApiError(
      400,
      "The amount that you are trying to add can't be greater than the final amount of this goal"
    );
  }

  const updatedUser = await User.findByIdAndUpdate(
    user._id,
    {
      $inc: { currentBalance: -currentAmount }, // Decrement the current balance by currentAmount
    },
    {
      new: true,
      session,
    }
  ).select("-password -refreshToken");

  if (!updatedUser) throw new ApiError(404, "User doesn't exist");

  await session.commitTransaction();
  session.endSession();

  return res
    .status(200)
    .json(
      new ApiResponse(
        200,
        { user: updatedUser, goal: updatedGoal },
        "Added money to goal"
      )
    );
});

export const deleteGoal = asyncHandler(async (req, res) => {
  const { goalId, goalCurrentAmount } = req.body;
  const user = req.user;

  if (user.goals.length === 0 || !user.goals)
    throw new ApiError(401, "User doesn't have any goals");

  if (!goalId) throw new ApiError(400, "Goal id is required to delete goal");
  if (goalCurrentAmount === undefined)
    throw new ApiError(400, "Current goal amount is required");

  if (!user.goals.includes(goalId))
    throw new ApiError(400, "This goal isn't created by this user");

  user.goals = user.goals.filter((item) => item.toString() !== goalId);
  user.currentBalance += +goalCurrentAmount;

  await user.save();
  await Goal.deleteOne({ _id: goalId });

  return res
    .status(200)
    .json(new ApiResponse(200, { user }, "Goal deleted successfully"));
});



================================================
FILE: backend/src/controllers/payment.controller.js
================================================
import { ApiError } from "../utils/apiError.js";
import { ApiResponse } from "../utils/apiResponse.js";
import { asyncHandler } from "../utils/asyncHandler.js";
import Stripe from "stripe";

const stripe = new Stripe(process.env.STRIPE_PRIVATE_KEY);

export const createCheckout = asyncHandler(async (req, res) => {
  const user = req.user;

  if (user.isPaidUser) throw new ApiError(400, "Already paid user");

  const session = await stripe.checkout.sessions.create({
    payment_method_types: ["card"],
    mode: "payment",
    line_items: [
      {
        price_data: {
          currency: "usd",
          product_data: {
            name: "Lifetime SpendSync Pro Membership",
          },
          unit_amount: 3000,
        },
        quantity: 1,
      },
    ],
    success_url: `${process.env.CLIENT_URL}/payment-success`,
    cancel_url: process.env.CLIENT_URL,
  });

  user.stripeSessionId = session.id;
  await user.save();

  return res
    .status(200)
    .json(
      new ApiResponse(
        200,
        { user, url: session.url },
        "Checkout session created"
      )
    );
});

export const confirmPayment = asyncHandler(async (req, res) => {
  const user = req.user;

  if (!user.stripeSessionId) throw new ApiError(400, "Session id is required");

  const session = await stripe.checkout.sessions.retrieve(user.stripeSessionId);

  if (!session) throw new ApiError(404, "Session doesn't exist");

  if (session.payment_status !== "paid") {
    throw new ApiError(400, "User hasn't paid yet");
  }

  user.isPaidUser = true;
  await user.save();

  return res
    .status(200)
    .json(new ApiResponse(200, { user }, "Updated user payment status"));
});



================================================
FILE: backend/src/controllers/stats.controller.js
================================================
import { ApiError } from "../utils/apiError.js";
import { ApiResponse } from "../utils/apiResponse.js";
import { asyncHandler } from "../utils/asyncHandler.js";
import { Transaction } from "../models/transaction.model.js";

function getDateRange(type) {
  const today = new Date();
  const startDate = new Date();
  const endDate = new Date();

  switch (type) {
    case "week":
      startDate.setDate(today.getDate() - today.getDay());
      endDate.setDate(startDate.getDate() + 6);
      break;
    case "month":
      startDate.setDate(1);
      endDate.setMonth(today.getMonth() + 1, 0);
      break;
    case "year":
      startDate.setMonth(0, 1);
      endDate.setFullYear(today.getFullYear(), 11, 31);
      break;
    default:
      break;
  }

  return { startDate, endDate };
}

function calculateSumForDateRange(startDate, endDate, transactions) {
  let incomeSum = 0;
  let expenseSum = 0;

  transactions.forEach((transaction) => {
    const transactionDate = new Date(transaction.createdAt);
    if (transactionDate >= startDate && transactionDate <= endDate) {
      if (transaction.type === "Income") {
        incomeSum += transaction.amount;
      } else if (transaction.type === "Expense") {
        expenseSum += transaction.amount;
      }
    }
  });

  return { incomeSum, expenseSum };
}

export const getIncomeAndExpenseByTimeRange = asyncHandler(async (req, res) => {
  const user = req.user;

  if (!user.transactionHistory) {
    throw new ApiError(400, "This user hasn't made any transactions yet");
  }

  const transactions = await Transaction.find({
    _id: { $in: user.transactionHistory },
  });

  const { startDate: weekStart, endDate: weekEnd } = getDateRange("week");
  const { incomeSum: weekIncomeSum, expenseSum: weekExpenseSum } =
    calculateSumForDateRange(weekStart, weekEnd, transactions);

  const { startDate: monthStart, endDate: monthEnd } = getDateRange("month");
  const { incomeSum: monthIncomeSum, expenseSum: monthExpenseSum } =
    calculateSumForDateRange(monthStart, monthEnd, transactions);

  const { startDate: yearStart, endDate: yearEnd } = getDateRange("year");
  const { incomeSum: yearIncomeSum, expenseSum: yearExpenseSum } =
    calculateSumForDateRange(yearStart, yearEnd, transactions);

  return res.status(200).json(
    new ApiResponse(
      200,
      {
        week: {
          income: weekIncomeSum,
          expense: weekExpenseSum,
        },
        month: {
          income: monthIncomeSum,
          expense: monthExpenseSum,
        },
        year: {
          income: yearIncomeSum,
          expense: yearExpenseSum,
        },
      },
      "hgotasdf "
    )
  );
});



================================================
FILE: backend/src/controllers/transaction.controller.js
================================================
import { Transaction } from "../models/transaction.model.js";
import { User } from "../models/user.model.js";
import { ApiError } from "../utils/apiError.js";
import { ApiResponse } from "../utils/apiResponse.js";
import { asyncHandler } from "../utils/asyncHandler.js";
import { uploadOnCloudinary } from "../utils/cloudinary.js";

export const createExpense = asyncHandler(async (req, res) => {
  const { title, amount, wallet, category, date } = req.body;
  const user = req.user;

  if (!title) throw new ApiError(400, "Title is required");
  if (!amount) throw new ApiError(400, "Amount is required");
  if (!wallet) throw new ApiError(400, "Wallet is required");

  if (amount > user.currentBalance && wallet === "Cash") {
    throw new ApiError(
      400,
      "You don't have enough balance to make this transaction"
    );
  }

  const receiptLocalPath = req?.file?.path;

  const receipt = await uploadOnCloudinary(receiptLocalPath);

  const transaction = await Transaction.create({
    madeBy: user._id,
    type: "Expense",
    title,
    receipt: receipt?.url || "",
    amount,
    wallet,
    category: category || "",
    date: date || "",
  });

  const transactionHistory = user.transactionHistory || [];

  let updateQuery = {
    transactionHistory: [...transactionHistory, transaction._id],
  };

  // Check if the wallet is set to "Cash"
  if (wallet === "Cash") {
    updateQuery.$inc = { currentBalance: -amount }; // Decrement the current balance
  }

  const updatedUser = await User.findByIdAndUpdate(user._id, updateQuery, {
    new: true,
  }).select("-password -refreshToken");

  if (!updatedUser)
    throw new ApiError(
      500,
      "Something went wrong while creating the transaction"
    );

  return res
    .status(201)
    .json(
      new ApiResponse(
        200,
        { user: updatedUser },
        "Created transaction successfully"
      )
    );
});

export const getTransactions = asyncHandler(async (req, res) => {
  const userTransactions = req.user.transactionHistory;

  if (!userTransactions || userTransactions.length === 0)
    throw new ApiError(404, "User doesn't have any transactions");

  const transactions = await Transaction.find({
    _id: { $in: userTransactions },
  });

  return res
    .status(200)
    .json(
      new ApiResponse(200, { transactions }, "Transactions sent successfully")
    );
});

export const createIncome = asyncHandler(async (req, res) => {
  const { title, amount, category, date } = req.body;
  const user = req.user;

  if (!title) throw new ApiError(400, "Title is required");
  if (!amount) throw new ApiError(400, "Amount is required");
  if (amount < 1) throw new ApiError(400, "Amount can't be less than 1");

  const receiptLocalPath = req?.file?.path;

  const receipt = await uploadOnCloudinary(receiptLocalPath);

  const transaction = await Transaction.create({
    madeBy: user._id,
    type: "Income",
    title,
    receipt: receipt?.url || "",
    amount,
    wallet: "Cash",
    category: category || "",
    date: date || "",
  });

  const transactionHistory = user.transactionHistory || [];

  const updatedUser = await User.findByIdAndUpdate(
    user._id,
    {
      transactionHistory: [...transactionHistory, transaction._id],
      $inc: { currentBalance: +amount }, // Increment the current balance
    },
    {
      new: true,
    }
  ).select("-password -refreshToken");

  if (!updatedUser)
    throw new ApiError(
      500,
      "Something went wrong while creating the transaction"
    );

  return res
    .status(201)
    .json(
      new ApiResponse(
        200,
        { user: updatedUser },
        "Created transaction successfully"
      )
    );
});

export const getTransaction = asyncHandler(async (req, res) => {
  const { transactionId } = req.body;

  if (!transactionId) throw new ApiError(400, "Transaction id is required");

  const transaction = await Transaction.findById(transactionId);

  if (!transaction) throw new ApiError(404, "Transaction doesn't exist");

  return res
    .status(200)
    .json(new ApiResponse(200, { transaction }, "Here is your transaction"));
});

export const deleteTransaction = asyncHandler(async (req, res) => {
  const { transactionId } = req.body;
  const user = req.user;

  if (!transactionId) throw new ApiError(400, "Transaction id is required");
  if (!user.transactionHistory.includes(transactionId))
    throw new ApiError(400, "This transaction isn't created by this user");

  user.transactionHistory = user.transactionHistory.filter(
    (item) => item.toString() !== transactionId
  );

  const transaction = await Transaction.deleteOne({ _id: transactionId });
  if (!transaction) throw new ApiError(404, "This transaction doesn't exist");

  await user.save();

  return res
    .status(200)
    .json(new ApiResponse(200, { user }, "Transaction deleted successfully"));
});

export const recentTransactions = asyncHandler(async (req, res) => {
  const userTransactions = req.user.transactionHistory;

  if (!userTransactions || userTransactions.length === 0)
    throw new ApiError(404, "User doesn't have any transactions");

  const transactions = await Transaction.find({
    _id: { $in: userTransactions },
  });

  const recentTransaction = transactions.reverse().slice(0, 5);

  return res
    .status(200)
    .json(
      new ApiResponse(
        200,
        { transactions: recentTransaction },
        "Transactions sent successfully"
      )
    );
});



================================================
FILE: backend/src/controllers/user.controller.js
================================================
import { asyncHandler } from "../utils/asyncHandler.js";
import { ApiError } from "../utils/apiError.js";
import { ApiResponse } from "../utils/apiResponse.js";
import { User } from "../models/user.model.js";
import jwt from "jsonwebtoken";
import { uploadOnCloudinary } from "../utils/cloudinary.js";

const generateAccessAndRefreshTokens = async (userId) => {
  try {
    const user = await User.findById(userId);
    const accessToken = user.generateAccessToken();
    const refreshToken = user.generateRefreshToken();

    user.refreshToken = refreshToken;
    await user.save({ validateBeforeSave: false });

    return { accessToken, refreshToken };
  } catch (error) {
    throw new ApiError(
      500,
      "Something went wrong while generating access and refresh tokens"
    );
  }
};

export const registerUser = asyncHandler(async (req, res) => {
  const { fullName, email, password } = req.body;

  if (!fullName) throw new ApiError(400, "Fullname is required");
  if (!password) throw new ApiError(400, "Password is required");
  if (!email) throw new ApiError(400, "Email is required");

  const emailExists = await User.findOne({ email });
  if (emailExists) throw new ApiError(409, "Email has already been used");

  const user = await User.create({
    fullName,
    email,
    password,
  });

  const createdUser = await User.findById(user._id).select(
    "-password -refreshToken"
  );

  if (!createdUser)
    throw new ApiError(500, "Something went wrong while registering the user");

  return res
    .status(201)
    .json(new ApiResponse(200, createdUser, "User registered sucessfully"));
});

export const loginUser = asyncHandler(async (req, res) => {
  const { email, password } = req.body;

  if (!email) throw new ApiError(400, "Email required");
  if (!password) throw new ApiError(400, "Password required");

  const user = await User.findOne({ email });

  if (!user) throw new ApiError(404, "User not found");

  const isPasswordValid = await user.isPasswordCorrect(password);

  if (!isPasswordValid) throw new ApiError(401, "Invalid Password");

  const { accessToken, refreshToken } = await generateAccessAndRefreshTokens(
    user._id
  );

  const loggedInUser = await User.findById(user._id).select(
    "-password -refreshToken"
  );

  const options = {
    httpOnly: true,
    secure: true,
    sameSite: "none",
  };

  return res
    .status(200)
    .cookie("accessToken", accessToken, options)
    .cookie("refreshToken", refreshToken, options)
    .json(
      new ApiResponse(
        200,
        {
          user: loggedInUser,
          accessToken,
          refreshToken,
        },
        "User logged in successfully"
      )
    );
});

export const logoutUser = asyncHandler(async (req, res) => {
  await User.findByIdAndUpdate(
    req.user._id,
    {
      $set: {
        refreshToken: undefined,
      },
    },
    {
      new: true,
    }
  );

  const options = {
    httpOnly: true,
    secure: true,
  };

  return res
    .status(200)
    .clearCookie("accessToken", options)
    .clearCookie("refreshToken", options)
    .json(new ApiResponse(200, {}, "User logged out"));
});

export const addIncomeAndExpense = asyncHandler(async (req, res) => {
  const { income, expense } = req.body;
  const user = req.user;

  if (income === undefined)
    throw new ApiError(400, "Income is required to add income and expense");
  if (expense === undefined)
    throw new ApiError(400, "Expense is required to add income and expense");

  if (isNaN(income) || isNaN(expense))
    throw new ApiError(400, "Income and Expense must be a number");

  if (income < 0 || expense < 0)
    throw new ApiError(400, "Income and Expense can't be less than zero");

  if (expense > income)
    throw new ApiError(400, "Expense can't be greater than income");

  const updatedUser = await User.findByIdAndUpdate(
    user._id,
    {
      hasSetIncomeAndExpense: true,
      income,
      expense,
    },
    { new: true }
  ).select("-password -refreshToken");

  if (!updatedUser) throw new ApiError(404, "User not found");

  return res.status(200).json(
    new ApiResponse(
      200,
      {
        user: updatedUser,
      },
      "Income and expense added successfully"
    )
  );
});

export const refreshAccessToken = asyncHandler(async (req, res) => {
  const incomingRefreshToken =
    req.cookies.refreshToken || req.body.refreshToken;
  if (!incomingRefreshToken) throw new ApiError(401, "Unauthorized request");

  const decodedToken = jwt.verify(
    incomingRefreshToken,
    process.env.REFRESH_TOKEN_SECRET
  );

  const user = await User.findById(decodedToken?._id);

  if (!user) throw new ApiError(401, "Invalid refresh token");

  if (incomingRefreshToken !== user?.refreshToken)
    throw new ApiError(401, "Refresh token is expired or used");

  const options = {
    httpOnly: true,
    secure: true,
  };

  const { accessToken, refreshToken } = await generateAccessAndRefreshTokens(
    user._id
  );

  return res
    .status(200)
    .cookie("accessToken", accessToken, options)
    .cookie("refreshToken", refreshToken, options)
    .json(
      new ApiResponse(
        200,
        {
          accessToken,
          refreshToken,
        },
        "Access token refreshed"
      )
    );
});

export const initialDeposit = asyncHandler(async (req, res) => {
  const user = req.user;
  const { depositAmount } = req.body;

  if (!depositAmount) throw new ApiError(400, "Deposit amount is required");
  if (isNaN(depositAmount))
    throw new ApiError(400, "Deposit amount must be a number");
  if (depositAmount < 1)
    throw new ApiError(400, "Deposit amount must be at least 1");
  if (user.currentBalance !== 0)
    throw new ApiError(400, "User already has money in their account");

  const updatedUser = await User.findByIdAndUpdate(
    user._id,
    {
      currentBalance: depositAmount,
    },
    {
      new: true,
    }
  ).select("-password -refreshToken");

  return res
    .status(200)
    .json(new ApiResponse(200, { user: updatedUser }, "Initial deposit added"));
});

export const updateAccountBalance = asyncHandler(async (req, res) => {
  const user = req.user;
  const { newAmount } = req.body;

  if (!newAmount) throw new ApiError(400, "New amount is required");
  if (isNaN(newAmount)) throw new ApiError(400, "New amount must be a number");
  if (newAmount < 1) throw new ApiError(400, "New amount must be at least 1");

  const updatedUser = await User.findByIdAndUpdate(
    user._id,
    {
      currentBalance: newAmount,
    },
    {
      new: true,
    }
  ).select("-password -refreshToken");

  return res
    .status(200)
    .json(
      new ApiResponse(200, { user: updatedUser }, "Updated account balance")
    );
});

export const updateDate = asyncHandler(async (req, res) => {
  const { date } = req.body;
  const user = req.user;

  if (!date) throw new ApiError(400, "Date is required");

  const updatedUser = await User.findByIdAndUpdate(
    user._id,
    { dateOfBirth: date },
    { new: true }
  ).select("-password -refreshToken");
  if (!updatedUser) throw new ApiError(404, "User not found");

  return res
    .status(200)
    .json(new ApiResponse(200, { user: updatedUser }, "Date of birth added"));
});

export const updateUserDetails = asyncHandler(async (req, res) => {
  const user = req.user;
  const { name, bio } = req.body;

  const updateFields = {};
  if (name) updateFields.fullName = name;
  if (bio) updateFields.bio = bio;

  const updatedUser = await User.findByIdAndUpdate(user._id, updateFields, {
    new: true,
  }).select("-password -refreshToken");

  if (!updatedUser) throw new ApiError(404, "User doesn't exist");

  return res
    .status(200)
    .json(
      new ApiResponse(
        200,
        { user: updatedUser },
        "Updated user fields successfully"
      )
    );
});

export const uploadAvatar = asyncHandler(async (req, res) => {
  const avatarLocalPath = req.file.path;
  const user = req.user;

  if (!avatarLocalPath) throw new ApiError(400, "Avatar file is required");

  const avatar = await uploadOnCloudinary(avatarLocalPath);

  if (!avatar) throw new ApiError(400, "Avatar file is required");

  const updatedUser = await User.findByIdAndUpdate(
    user._id,
    { avatar: avatar.url },
    { new: true }
  ).select("-password -refreshToken");

  if (!updatedUser)
    throw new ApiError(500, "Something went wrong uploading avatar");

  return res
    .status(200)
    .json(
      new ApiResponse(200, { user: updatedUser }, "Avatar uploaded sucessfully")
    );
});

export const changeCurrentPassword = asyncHandler(async (req, res) => {
  const { oldPassword, newPassword } = req.body;

  if (!oldPassword || !newPassword)
    throw new ApiError(400, "Both old and new passwords are required");

  const user = await User.findById(req.user?._id);
  const isPasswordCorrect = await user.isPasswordCorrect(oldPassword);

  if (!isPasswordCorrect) {
    throw new ApiError(401, "Invalid old password");
  }

  user.password = newPassword;
  await user.save({ validateBeforeSave: false });

  return res
    .status(200)
    .json(new ApiResponse(200, {}, "Password changed successfully"));
});

export const updateCurrency = asyncHandler(async (req, res) => {
  const user = req.user;
  const { newCurrency } = req.body;

  if (!newCurrency) throw new ApiError(400, "New currency is required");

  if (!["$", "€", "¥", "₹", "A$", "C$"].includes(newCurrency))
    throw new ApiError(400, "Currency is not supported");

  user.currency = newCurrency;
  await user.save();

  return res
    .status(200)
    .json(new ApiResponse(200, { user }, "Currency updated successfully"));
});

export const getCurrentUser = asyncHandler(async (req, res) => {
  return res
    .status(200)
    .json(
      new ApiResponse(200, { user: req.user }, "User fetched successfully")
    );
});



================================================
FILE: backend/src/db/db.js
================================================
import mongoose from "mongoose";
import { DB_NAME } from "../constants.js";

async function connectDB() {
  try {
    const connectionInstance = await mongoose.connect(
      `${process.env.MONGO_URL}/${DB_NAME}`,
      {
        writeConcern: { w: "majority" },
      },
    );
    console.log(
      `\nMongoDB connected !! DB HOST: ${connectionInstance.connection.host}`,
    );
  } catch (error) {
    console.error("MONGODB connection error: ", error);
    throw error;
  }
}

export default connectDB;



================================================
FILE: backend/src/middlewares/auth.middleware.js
================================================
import { ApiError } from "../utils/apiError.js";
import { asyncHandler } from "../utils/asyncHandler.js";
import jwt from "jsonwebtoken";
import { User } from "../models/user.model.js";

export const verifyJWT = asyncHandler(async (req, res, next) => {
  try {
    const token =
      req.cookies?.accessToken ||
      req.header("Authorization")?.replace("Bearer ", "");

    if (!token) throw new ApiError(401, "Unauthorized request");

    const decodedToken = jwt.verify(token, process.env.ACCESS_TOKEN_SECRET);

    const user = await User.findById(decodedToken?._id).select(
      "-password -refreshToken",
    );

    if (!user) throw new ApiError(401, "Invalid Access Token");

    req.user = user;
    next();
  } catch (error) {
    throw new ApiError(401, error?.message || "Invalid access token");
  }
});



================================================
FILE: backend/src/middlewares/multer.middleware.js
================================================
import multer from "multer";

const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, "./public/temp");
  },
  filename: function (req, file, cb) {
    cb(null, file.originalname);
  },
});

export const upload = multer({ storage });



================================================
FILE: backend/src/models/feedback.model.js
================================================
import { Schema } from "mongoose";
import mongoose from "mongoose";

const feedbackSchema = mongoose.Schema(
  {
    madeBy: {
      type: Schema.Types.ObjectId,
      ref: "User",
      required: true,
    },
    rating: {
      type: String,
      required: true,
      enum: ["1-star", "2-star", "3-star", "4-star", "5-star"],
    },
    description: {
      type: String,
    },
  },
  { timestamps: true }
);

export const Feedback = mongoose.model("Feedback", feedbackSchema);



================================================
FILE: backend/src/models/goal.model.js
================================================
import { Schema } from "mongoose";
import mongoose from "mongoose";

const goalSchema = mongoose.Schema(
  {
    finalAmount: {
      type: Number,
      required: true,
      min: 0,
    },
    currentAmount: {
      type: Number,
      default: 0,
      min: 0,
    },
    madeBy: {
      type: Schema.Types.ObjectId,
      ref: "User",
      required: true,
    },
    category: {
      type: String,
      default: "Savings",
    },
    title: {
      type: String,
      required: true,
      trim: true,
    },
    description: {
      type: String,
      trim: true,
    },
  },
  { timestamps: true },
);

export const Goal = mongoose.model("Goal", goalSchema);



================================================
FILE: backend/src/models/transaction.model.js
================================================
import mongoose, { Schema } from "mongoose";

const transactionSchema = mongoose.Schema(
  {
    madeBy: {
      type: Schema.Types.ObjectId,
      ref: "User",
      required: true,
    },
    amount: {
      type: Number,
      required: true,
    },
    category: {
      type: String,
      default: "Other",
    },
    type: {
      type: String,
      emun: ["Income", "Expense"],
      required: true,
    },
    title: {
      type: String,
      required: true,
      trim: true,
    },
    description: {
      type: String,
      trim: true,
    },
    receipt: { type: String },
    date: { type: Date, default: new Date() },
    wallet: {
      type: String,
      enum: ["Cash", "Credit card", "Debit card", "Bank"],
      required: true,
    },
  },
  { timestamps: true }
);

export const Transaction = mongoose.model("Transaction", transactionSchema);



================================================
FILE: backend/src/models/user.model.js
================================================
import mongoose, { Schema } from "mongoose";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";

const userSchema = mongoose.Schema(
  {
    email: {
      type: String,
      required: true,
      unique: true,
      lowercase: true,
      trim: true,
    },
    fullName: {
      type: String,
      required: true,
      trim: true,
      index: true,
    },
    transactionHistory: [
      {
        type: Schema.Types.ObjectId,
        ref: "Transaction",
      },
    ],
    goals: [
      {
        type: Schema.Types.ObjectId,
        ref: "Goal",
      },
    ],
    isPaidUser: {
      type: Boolean,
      default: false,
    },
    stripeSessionId: { type: String },
    password: {
      type: String,
      required: [true, "Password is required"],
    },
    currentBalance: {
      type: Number,
      default: 0,
    },
    refershToken: {
      type: String,
    },
    hasSetIncomeAndExpense: {
      type: Boolean,
      default: false,
    },
    income: {
      type: Number,
      min: 0,
    },
    expense: {
      type: Number,
      min: 0,
    },
    avatar: {
      type: String,
    },
    bio: {
      type: String,
    },
    dateOfBirth: {
      type: Date,
    },
    currency: {
      type: String,
      default: "$",
      enum: ["$", "€", "¥", "₹", "A$", "C$"],
    },
  },
  { timestamps: true }
);

userSchema.pre("save", async function (next) {
  if (!this.isModified("password")) return next();
  this.password = await bcrypt.hash(this.password, 10);
  next();
});

userSchema.methods.isPasswordCorrect = async function (password) {
  return await bcrypt.compare(password, this.password);
};

userSchema.methods.generateAccessToken = function () {
  return jwt.sign(
    {
      _id: this._id,
      email: this.email,
      fullName: this.fullName,
    },
    process.env.ACCESS_TOKEN_SECRET,
    {
      expiresIn: process.env.ACCESS_TOKEN_EXPIRY,
    }
  );
};

userSchema.methods.generateRefreshToken = function () {
  return jwt.sign(
    {
      _id: this._id,
    },
    process.env.REFRESH_TOKEN_SECRET,
    {
      expiresIn: process.env.REFRESH_TOKEN_EXPIRY,
    }
  );
};

export const User = mongoose.model("User", userSchema);



================================================
FILE: backend/src/routes/demo.routes.js
================================================
import { Router } from "express";
import { verifyJWT } from "../middlewares/auth.middleware.js";
import { resetDemoUser } from "../controllers/demo.controller.js";

const router = Router();

// secure routes
router.route("/reset-demo-user").post(verifyJWT, resetDemoUser);

export default router



================================================
FILE: backend/src/routes/feedback.routes.js
================================================
import { Router } from "express";
import { verifyJWT } from "../middlewares/auth.middleware.js";
import { createFeedback } from "../controllers/feedback.controller.js";

const router = Router();

// secure routes
router.route("/create-feedback").post(verifyJWT, createFeedback);

export default router;



================================================
FILE: backend/src/routes/goal.routes.js
================================================
import { Router } from "express";
import { verifyJWT } from "../middlewares/auth.middleware.js";
import {
  createGoal,
  getGoals,
  updateGoal,
  addMoneyToGoal,
  deleteGoal,
} from "../controllers/goal.controller.js";

const router = Router();

// secure routes
router.route("/create-goal").post(verifyJWT, createGoal);
router.route("/get-goals").get(verifyJWT, getGoals);
router.route("/update-goal").post(verifyJWT, updateGoal);
router.route("/add-money-to-goal").post(verifyJWT, addMoneyToGoal);
router.route("/delete-goal").post(verifyJWT, deleteGoal);

export default router;



================================================
FILE: backend/src/routes/payment.routes.js
================================================
import { Router } from "express";
import { verifyJWT } from "../middlewares/auth.middleware.js";
import {
  confirmPayment,
  createCheckout,
} from "../controllers/payment.controller.js";

const router = Router();

// secure routes
router.route("/create-checkout").post(verifyJWT, createCheckout);
router.route("/confirm-payment").post(verifyJWT, confirmPayment);

export default router;



================================================
FILE: backend/src/routes/stats.routes.js
================================================
import { Router } from "express";
import { verifyJWT } from "../middlewares/auth.middleware.js";
import { getIncomeAndExpenseByTimeRange } from "../controllers/stats.controller.js";

const router = Router();

// secure routes
router
  .route("/get-income-expense-by-time-range")
  .get(verifyJWT, getIncomeAndExpenseByTimeRange);

export default router;



================================================
FILE: backend/src/routes/transaction.routes.js
================================================
import { Router } from "express";
import { verifyJWT } from "../middlewares/auth.middleware.js";
import {
  createExpense,
  createIncome,
  getTransactions,
  getTransaction,
  deleteTransaction,
  recentTransactions,
} from "../controllers/transaction.controller.js";
import { upload } from "../middlewares/multer.middleware.js";

const router = Router();

// secure routes
router
  .route("/create-expense")
  .post(verifyJWT, upload.single("receipt"), createExpense);

router
  .route("/create-income")
  .post(verifyJWT, upload.single("receipt"), createIncome);

router.route("/get-transactions").get(verifyJWT, getTransactions);
router.route("/get-transaction").post(verifyJWT, getTransaction);
router.route("/delete-transaction").post(verifyJWT, deleteTransaction);
router.route("/recent-transactions").get(verifyJWT, recentTransactions);

export default router;



================================================
FILE: backend/src/routes/user.routes.js
================================================
import { Router } from "express";
import {
  registerUser,
  loginUser,
  logoutUser,
  addIncomeAndExpense,
  refreshAccessToken,
  initialDeposit,
  updateAccountBalance,
  updateDate,
  updateUserDetails,
  uploadAvatar,
  changeCurrentPassword,
  updateCurrency,
  getCurrentUser,
} from "../controllers/user.controller.js";
import { verifyJWT } from "../middlewares/auth.middleware.js";
import { upload } from "../middlewares/multer.middleware.js";

const router = Router();

router.route("/register").post(registerUser);

router.route("/login").post(loginUser);

// secured routes
router.route("/logout").post(verifyJWT, logoutUser);
router.route("/add-income-and-expense").post(verifyJWT, addIncomeAndExpense);
router.route("/refresh-access-token").post(verifyJWT, refreshAccessToken);
router.route("/initial-deposit").post(verifyJWT, initialDeposit);
router.route("/update-account-balance").post(verifyJWT, updateAccountBalance);
router.route("/update-date").post(verifyJWT, updateDate);
router.route("/update-details").post(verifyJWT, updateUserDetails);
router
  .route("/upload-avatar")
  .post(verifyJWT, upload.single("avatar"), uploadAvatar);
router.route("/update-password").post(verifyJWT, changeCurrentPassword);
router.route("/update-currency").post(verifyJWT, updateCurrency);
router.route("/get-current-user").get(verifyJWT, getCurrentUser);

export default router;



================================================
FILE: backend/src/utils/apiError.js
================================================
class ApiError extends Error {
  constructor(
    statusCode,
    message = "Something went wrong",
    errors = [],
    stack = "",
  ) {
    super(message);
    this.statusCode = statusCode;
    this.data = null;
    this.message = message;
    this.success = false;
    this.errors = errors;

    if (stack) {
      this.stack = stack;
    } else {
      Error.captureStackTrace(this, this.constructor);
    }
  }
}

export { ApiError };



================================================
FILE: backend/src/utils/apiResponse.js
================================================
class ApiResponse {
  constructor(statusCode, data, message = "success") {
    this.statusCode = statusCode;
    this.data = data;
    this.message = message;
    this.success = statusCode < 400;
  }
}

export { ApiResponse };



================================================
FILE: backend/src/utils/asyncHandler.js
================================================
const asyncHandler = (requestHandler) => {
  return (req, res, next) => {
    Promise.resolve(requestHandler(req, res, next)).catch((err) => next(err));
  };
};

export { asyncHandler };



================================================
FILE: backend/src/utils/cloudinary.js
================================================
import { v2 as cloudinary } from "cloudinary";
import fs from "fs";

cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});

const uploadOnCloudinary = async (localFilePath) => {
  try {
    if (!localFilePath) return null;
    const response = await cloudinary.uploader.upload(localFilePath, {
      resource_type: "auto",
    });

    // console.log(
    //   "File has been successfully uploaded on cloudinary",
    //   response.url
    // );

    fs.unlinkSync(localFilePath);
    return response;
  } catch (error) {
    fs.unlinkSync(localFilePath); // remove temp file as upload operation failed
    return null;
  }
};

export { uploadOnCloudinary };



================================================
FILE: frontend/components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}



================================================
FILE: frontend/index.html
================================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link
      rel="icon"
      type="image/x-icon"
      href="https://em-content.zobj.net/source/google/387/money-with-wings_1f4b8.png"
    />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>SpendSync</title>
  </head>
  <body>
    <div id="root"></div>

    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>



================================================
FILE: frontend/package.json
================================================
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "@radix-ui/react-alert-dialog": "^1.0.5",
    "@radix-ui/react-avatar": "^1.0.4",
    "@radix-ui/react-checkbox": "^1.0.4",
    "@radix-ui/react-dialog": "^1.0.5",
    "@radix-ui/react-dropdown-menu": "^2.0.6",
    "@radix-ui/react-hover-card": "^1.0.7",
    "@radix-ui/react-icons": "^1.3.0",
    "@radix-ui/react-label": "^2.0.2",
    "@radix-ui/react-popover": "^1.0.7",
    "@radix-ui/react-progress": "^1.0.3",
    "@radix-ui/react-scroll-area": "^1.0.5",
    "@radix-ui/react-select": "^2.0.0",
    "@radix-ui/react-slot": "^1.0.2",
    "@radix-ui/react-tabs": "^1.0.4",
    "@radix-ui/react-toast": "^1.1.5",
    "@tanstack/react-query": "^5.29.2",
    "axios": "^1.7.4",
    "chart.js": "^4.4.2",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.0",
    "cmdk": "^1.0.0",
    "date-fns": "^3.6.0",
    "json-2-csv": "^5.5.1",
    "lucide-react": "^0.331.0",
    "react": "^18.2.0",
    "react-chartjs-2": "^5.2.0",
    "react-day-picker": "^8.10.0",
    "react-dom": "^18.2.0",
    "react-hot-toast": "^2.4.1",
    "react-icons": "^5.0.1",
    "react-router-dom": "^6.22.3",
    "tailwind-merge": "^2.2.2",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.0"
  },
  "devDependencies": {
    "@tanstack/eslint-plugin-query": "^5.28.11",
    "@tanstack/react-query-devtools": "^5.29.2",
    "@types/node": "^20.12.7",
    "@types/react": "^18.2.78",
    "@types/react-dom": "^18.2.25",
    "@types/react-router-dom": "^5.3.3",
    "@typescript-eslint/eslint-plugin": "^6.21.0",
    "@typescript-eslint/parser": "^6.21.0",
    "@vitejs/plugin-react-swc": "^3.6.0",
    "autoprefixer": "^10.4.19",
    "eslint": "^8.57.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.6",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.3",
    "typescript": "^5.4.5",
    "vite": "^5.2.14"
  }
}



================================================
FILE: frontend/pnpm-lock.yaml
================================================
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@radix-ui/react-alert-dialog':
        specifier: ^1.0.5
        version: 1.0.5(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-avatar':
        specifier: ^1.0.4
        version: 1.0.4(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-checkbox':
        specifier: ^1.0.4
        version: 1.0.4(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-dialog':
        specifier: ^1.0.5
        version: 1.0.5(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-dropdown-menu':
        specifier: ^2.0.6
        version: 2.0.6(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-hover-card':
        specifier: ^1.0.7
        version: 1.0.7(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-icons':
        specifier: ^1.3.0
        version: 1.3.0(react@18.2.0)
      '@radix-ui/react-label':
        specifier: ^2.0.2
        version: 2.0.2(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-popover':
        specifier: ^1.0.7
        version: 1.0.7(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-progress':
        specifier: ^1.0.3
        version: 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-scroll-area':
        specifier: ^1.0.5
        version: 1.0.5(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-select':
        specifier: ^2.0.0
        version: 2.0.0(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-slot':
        specifier: ^1.0.2
        version: 1.0.2(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-tabs':
        specifier: ^1.0.4
        version: 1.0.4(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-toast':
        specifier: ^1.1.5
        version: 1.1.5(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@tanstack/react-query':
        specifier: ^5.29.2
        version: 5.29.2(react@18.2.0)
      axios:
        specifier: ^1.7.4
        version: 1.7.4
      chart.js:
        specifier: ^4.4.2
        version: 4.4.2
      class-variance-authority:
        specifier: ^0.7.0
        version: 0.7.0
      clsx:
        specifier: ^2.1.0
        version: 2.1.0
      cmdk:
        specifier: ^1.0.0
        version: 1.0.0(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      date-fns:
        specifier: ^3.6.0
        version: 3.6.0
      json-2-csv:
        specifier: ^5.5.1
        version: 5.5.1
      lucide-react:
        specifier: ^0.331.0
        version: 0.331.0(react@18.2.0)
      react:
        specifier: ^18.2.0
        version: 18.2.0
      react-chartjs-2:
        specifier: ^5.2.0
        version: 5.2.0(chart.js@4.4.2)(react@18.2.0)
      react-day-picker:
        specifier: ^8.10.0
        version: 8.10.0(date-fns@3.6.0)(react@18.2.0)
      react-dom:
        specifier: ^18.2.0
        version: 18.2.0(react@18.2.0)
      react-hot-toast:
        specifier: ^2.4.1
        version: 2.4.1(csstype@3.1.3)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      react-icons:
        specifier: ^5.0.1
        version: 5.0.1(react@18.2.0)
      react-router-dom:
        specifier: ^6.22.3
        version: 6.22.3(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      tailwind-merge:
        specifier: ^2.2.2
        version: 2.2.2
      tailwindcss-animate:
        specifier: ^1.0.7
        version: 1.0.7(tailwindcss@3.4.3)
      vaul:
        specifier: ^0.9.0
        version: 0.9.0(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
    devDependencies:
      '@tanstack/eslint-plugin-query':
        specifier: ^5.28.11
        version: 5.28.11(eslint@8.57.0)(typescript@5.4.5)
      '@tanstack/react-query-devtools':
        specifier: ^5.29.2
        version: 5.29.2(@tanstack/react-query@5.29.2(react@18.2.0))(react@18.2.0)
      '@types/node':
        specifier: ^20.12.7
        version: 20.12.7
      '@types/react':
        specifier: ^18.2.78
        version: 18.2.78
      '@types/react-dom':
        specifier: ^18.2.25
        version: 18.2.25
      '@types/react-router-dom':
        specifier: ^5.3.3
        version: 5.3.3
      '@typescript-eslint/eslint-plugin':
        specifier: ^6.21.0
        version: 6.21.0(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.4.5))(eslint@8.57.0)(typescript@5.4.5)
      '@typescript-eslint/parser':
        specifier: ^6.21.0
        version: 6.21.0(eslint@8.57.0)(typescript@5.4.5)
      '@vitejs/plugin-react-swc':
        specifier: ^3.6.0
        version: 3.6.0(vite@5.2.14(@types/node@20.12.7))
      autoprefixer:
        specifier: ^10.4.19
        version: 10.4.19(postcss@8.4.38)
      eslint:
        specifier: ^8.57.0
        version: 8.57.0
      eslint-plugin-react-hooks:
        specifier: ^4.6.0
        version: 4.6.0(eslint@8.57.0)
      eslint-plugin-react-refresh:
        specifier: ^0.4.6
        version: 0.4.6(eslint@8.57.0)
      postcss:
        specifier: ^8.4.38
        version: 8.4.38
      tailwindcss:
        specifier: ^3.4.3
        version: 3.4.3
      typescript:
        specifier: ^5.4.5
        version: 5.4.5
      vite:
        specifier: ^5.2.14
        version: 5.2.14(@types/node@20.12.7)

packages:

  '@aashutoshrathi/word-wrap@1.2.6':
    resolution: {integrity: sha512-1Yjs2SvM8TflER/OD3cOjhWWOZb58A2t7wpE2S9XfBYTiIl+XFhQG2bjy4Pu1I+EAlCNUzRDYDdFwFYUKvXcIA==}
    engines: {node: '>=0.10.0'}

  '@alloc/quick-lru@5.2.0':
    resolution: {integrity: sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==}
    engines: {node: '>=10'}

  '@babel/runtime@7.24.4':
    resolution: {integrity: sha512-dkxf7+hn8mFBwKjs9bvBlArzLVxVbS8usaPUDd5p2a9JCL9tB8OaOVN1isD4+Xyk4ns89/xeOmbQvgdK7IIVdA==}
    engines: {node: '>=6.9.0'}

  '@esbuild/aix-ppc64@0.20.2':
    resolution: {integrity: sha512-D+EBOJHXdNZcLJRBkhENNG8Wji2kgc9AZ9KiPr1JuZjsNtyHzrsfLRrY0tk2H2aoFu6RANO1y1iPPUCDYWkb5g==}
    engines: {node: '>=12'}
    cpu: [ppc64]
    os: [aix]

  '@esbuild/android-arm64@0.20.2':
    resolution: {integrity: sha512-mRzjLacRtl/tWU0SvD8lUEwb61yP9cqQo6noDZP/O8VkwafSYwZ4yWy24kan8jE/IMERpYncRt2dw438LP3Xmg==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [android]

  '@esbuild/android-arm@0.20.2':
    resolution: {integrity: sha512-t98Ra6pw2VaDhqNWO2Oph2LXbz/EJcnLmKLGBJwEwXX/JAN83Fym1rU8l0JUWK6HkIbWONCSSatf4sf2NBRx/w==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [android]

  '@esbuild/android-x64@0.20.2':
    resolution: {integrity: sha512-btzExgV+/lMGDDa194CcUQm53ncxzeBrWJcncOBxuC6ndBkKxnHdFJn86mCIgTELsooUmwUm9FkhSp5HYu00Rg==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [android]

  '@esbuild/darwin-arm64@0.20.2':
    resolution: {integrity: sha512-4J6IRT+10J3aJH3l1yzEg9y3wkTDgDk7TSDFX+wKFiWjqWp/iCfLIYzGyasx9l0SAFPT1HwSCR+0w/h1ES/MjA==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [darwin]

  '@esbuild/darwin-x64@0.20.2':
    resolution: {integrity: sha512-tBcXp9KNphnNH0dfhv8KYkZhjc+H3XBkF5DKtswJblV7KlT9EI2+jeA8DgBjp908WEuYll6pF+UStUCfEpdysA==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [darwin]

  '@esbuild/freebsd-arm64@0.20.2':
    resolution: {integrity: sha512-d3qI41G4SuLiCGCFGUrKsSeTXyWG6yem1KcGZVS+3FYlYhtNoNgYrWcvkOoaqMhwXSMrZRl69ArHsGJ9mYdbbw==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [freebsd]

  '@esbuild/freebsd-x64@0.20.2':
    resolution: {integrity: sha512-d+DipyvHRuqEeM5zDivKV1KuXn9WeRX6vqSqIDgwIfPQtwMP4jaDsQsDncjTDDsExT4lR/91OLjRo8bmC1e+Cw==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [freebsd]

  '@esbuild/linux-arm64@0.20.2':
    resolution: {integrity: sha512-9pb6rBjGvTFNira2FLIWqDk/uaf42sSyLE8j1rnUpuzsODBq7FvpwHYZxQ/It/8b+QOS1RYfqgGFNLRI+qlq2A==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [linux]

  '@esbuild/linux-arm@0.20.2':
    resolution: {integrity: sha512-VhLPeR8HTMPccbuWWcEUD1Az68TqaTYyj6nfE4QByZIQEQVWBB8vup8PpR7y1QHL3CpcF6xd5WVBU/+SBEvGTg==}
    engines: {node: '>=12'}
    cpu: [arm]
    os: [linux]

  '@esbuild/linux-ia32@0.20.2':
    resolution: {integrity: sha512-o10utieEkNPFDZFQm9CoP7Tvb33UutoJqg3qKf1PWVeeJhJw0Q347PxMvBgVVFgouYLGIhFYG0UGdBumROyiig==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [linux]

  '@esbuild/linux-loong64@0.20.2':
    resolution: {integrity: sha512-PR7sp6R/UC4CFVomVINKJ80pMFlfDfMQMYynX7t1tNTeivQ6XdX5r2XovMmha/VjR1YN/HgHWsVcTRIMkymrgQ==}
    engines: {node: '>=12'}
    cpu: [loong64]
    os: [linux]

  '@esbuild/linux-mips64el@0.20.2':
    resolution: {integrity: sha512-4BlTqeutE/KnOiTG5Y6Sb/Hw6hsBOZapOVF6njAESHInhlQAghVVZL1ZpIctBOoTFbQyGW+LsVYZ8lSSB3wkjA==}
    engines: {node: '>=12'}
    cpu: [mips64el]
    os: [linux]

  '@esbuild/linux-ppc64@0.20.2':
    resolution: {integrity: sha512-rD3KsaDprDcfajSKdn25ooz5J5/fWBylaaXkuotBDGnMnDP1Uv5DLAN/45qfnf3JDYyJv/ytGHQaziHUdyzaAg==}
    engines: {node: '>=12'}
    cpu: [ppc64]
    os: [linux]

  '@esbuild/linux-riscv64@0.20.2':
    resolution: {integrity: sha512-snwmBKacKmwTMmhLlz/3aH1Q9T8v45bKYGE3j26TsaOVtjIag4wLfWSiZykXzXuE1kbCE+zJRmwp+ZbIHinnVg==}
    engines: {node: '>=12'}
    cpu: [riscv64]
    os: [linux]

  '@esbuild/linux-s390x@0.20.2':
    resolution: {integrity: sha512-wcWISOobRWNm3cezm5HOZcYz1sKoHLd8VL1dl309DiixxVFoFe/o8HnwuIwn6sXre88Nwj+VwZUvJf4AFxkyrQ==}
    engines: {node: '>=12'}
    cpu: [s390x]
    os: [linux]

  '@esbuild/linux-x64@0.20.2':
    resolution: {integrity: sha512-1MdwI6OOTsfQfek8sLwgyjOXAu+wKhLEoaOLTjbijk6E2WONYpH9ZU2mNtR+lZ2B4uwr+usqGuVfFT9tMtGvGw==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [linux]

  '@esbuild/netbsd-x64@0.20.2':
    resolution: {integrity: sha512-K8/DhBxcVQkzYc43yJXDSyjlFeHQJBiowJ0uVL6Tor3jGQfSGHNNJcWxNbOI8v5k82prYqzPuwkzHt3J1T1iZQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [netbsd]

  '@esbuild/openbsd-x64@0.20.2':
    resolution: {integrity: sha512-eMpKlV0SThJmmJgiVyN9jTPJ2VBPquf6Kt/nAoo6DgHAoN57K15ZghiHaMvqjCye/uU4X5u3YSMgVBI1h3vKrQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [openbsd]

  '@esbuild/sunos-x64@0.20.2':
    resolution: {integrity: sha512-2UyFtRC6cXLyejf/YEld4Hajo7UHILetzE1vsRcGL3earZEW77JxrFjH4Ez2qaTiEfMgAXxfAZCm1fvM/G/o8w==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [sunos]

  '@esbuild/win32-arm64@0.20.2':
    resolution: {integrity: sha512-GRibxoawM9ZCnDxnP3usoUDO9vUkpAxIIZ6GQI+IlVmr5kP3zUq+l17xELTHMWTWzjxa2guPNyrpq1GWmPvcGQ==}
    engines: {node: '>=12'}
    cpu: [arm64]
    os: [win32]

  '@esbuild/win32-ia32@0.20.2':
    resolution: {integrity: sha512-HfLOfn9YWmkSKRQqovpnITazdtquEW8/SoHW7pWpuEeguaZI4QnCRW6b+oZTztdBnZOS2hqJ6im/D5cPzBTTlQ==}
    engines: {node: '>=12'}
    cpu: [ia32]
    os: [win32]

  '@esbuild/win32-x64@0.20.2':
    resolution: {integrity: sha512-N49X4lJX27+l9jbLKSqZ6bKNjzQvHaT8IIFUy+YIqmXQdjYCToGWwOItDrfby14c78aDd5NHQl29xingXfCdLQ==}
    engines: {node: '>=12'}
    cpu: [x64]
    os: [win32]

  '@eslint-community/eslint-utils@4.4.0':
    resolution: {integrity: sha512-1/sA4dwrzBAyeUoQ6oxahHKmrZvsnLCg4RfxW3ZFGGmQkSNQPFNLV9CUEFQP1x9EYXHTo5p6xdhZM1Ne9p/AfA==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}
    peerDependencies:
      eslint: ^6.0.0 || ^7.0.0 || >=8.0.0

  '@eslint-community/regexpp@4.10.0':
    resolution: {integrity: sha512-Cu96Sd2By9mCNTx2iyKOmq10v22jUVQv0lQnlGNy16oE9589yE+QADPbrMGCkA51cKZSg3Pu/aTJVTGfL/qjUA==}
    engines: {node: ^12.0.0 || ^14.0.0 || >=16.0.0}

  '@eslint/eslintrc@2.1.4':
    resolution: {integrity: sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  '@eslint/js@8.57.0':
    resolution: {integrity: sha512-Ys+3g2TaW7gADOJzPt83SJtCDhMjndcDMFVQ/Tj9iA1BfJzFKD9mAUXT3OenpuPHbI6P/myECxRJrofUsDx/5g==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  '@floating-ui/core@1.6.0':
    resolution: {integrity: sha512-PcF++MykgmTj3CIyOQbKA/hDzOAiqI3mhuoN44WRCopIs1sgoDoU4oty4Jtqaj/y3oDU6fnVSm4QG0a3t5i0+g==}

  '@floating-ui/dom@1.6.3':
    resolution: {integrity: sha512-RnDthu3mzPlQ31Ss/BTwQ1zjzIhr3lk1gZB1OC56h/1vEtaXkESrOqL5fQVMfXpwGtRwX+YsZBdyHtJMQnkArw==}

  '@floating-ui/react-dom@2.0.8':
    resolution: {integrity: sha512-HOdqOt3R3OGeTKidaLvJKcgg75S6tibQ3Tif4eyd91QnIJWr0NLvoXFpJA/j8HqkFSL68GDca9AuyWEHlhyClw==}
    peerDependencies:
      react: '>=16.8.0'
      react-dom: '>=16.8.0'

  '@floating-ui/utils@0.2.1':
    resolution: {integrity: sha512-9TANp6GPoMtYzQdt54kfAyMmz1+osLlXdg2ENroU7zzrtflTLrrC/lgrIfaSe+Wu0b89GKccT7vxXA0MoAIO+Q==}

  '@humanwhocodes/config-array@0.11.14':
    resolution: {integrity: sha512-3T8LkOmg45BV5FICb15QQMsyUSWrQ8AygVfC7ZG32zOalnqrilm018ZVCw0eapXux8FtA33q8PSRSstjee3jSg==}
    engines: {node: '>=10.10.0'}
    deprecated: Use @eslint/config-array instead

  '@humanwhocodes/module-importer@1.0.1':
    resolution: {integrity: sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==}
    engines: {node: '>=12.22'}

  '@humanwhocodes/object-schema@2.0.3':
    resolution: {integrity: sha512-93zYdMES/c1D69yZiKDBj0V24vqNzB/koF26KPaagAfd3P/4gUlh3Dys5ogAK+Exi9QyzlD8x/08Zt7wIKcDcA==}
    deprecated: Use @eslint/object-schema instead

  '@isaacs/cliui@8.0.2':
    resolution: {integrity: sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==}
    engines: {node: '>=12'}

  '@jridgewell/gen-mapping@0.3.5':
    resolution: {integrity: sha512-IzL8ZoEDIBRWEzlCcRhOaCupYyN5gdIK+Q6fbFdPDg6HqX6jpkItn7DFIpW9LQzXG6Df9sA7+OKnq0qlz/GaQg==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/resolve-uri@3.1.2':
    resolution: {integrity: sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/set-array@1.2.1':
    resolution: {integrity: sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/sourcemap-codec@1.4.15':
    resolution: {integrity: sha512-eF2rxCRulEKXHTRiDrDy6erMYWqNw4LPdQ8UQA4huuxaQsVeRPFl2oM8oDGxMFhJUWZf9McpLtJasDDZb/Bpeg==}

  '@jridgewell/trace-mapping@0.3.25':
    resolution: {integrity: sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==}

  '@kurkle/color@0.3.2':
    resolution: {integrity: sha512-fuscdXJ9G1qb7W8VdHi+IwRqij3lBkosAm4ydQtEmbY58OzHXqQhvlxqEkoz0yssNVn38bcpRWgA9PP+OGoisw==}

  '@nodelib/fs.scandir@2.1.5':
    resolution: {integrity: sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==}
    engines: {node: '>= 8'}

  '@nodelib/fs.stat@2.0.5':
    resolution: {integrity: sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==}
    engines: {node: '>= 8'}

  '@nodelib/fs.walk@1.2.8':
    resolution: {integrity: sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==}
    engines: {node: '>= 8'}

  '@pkgjs/parseargs@0.11.0':
    resolution: {integrity: sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==}
    engines: {node: '>=14'}

  '@radix-ui/number@1.0.1':
    resolution: {integrity: sha512-T5gIdVO2mmPW3NNhjNgEP3cqMXjXL9UbO0BzWcXfvdBs+BohbQxvd/K5hSVKmn9/lbTdsQVKbUcP5WLCwvUbBg==}

  '@radix-ui/primitive@1.0.1':
    resolution: {integrity: sha512-yQ8oGX2GVsEYMWGxcovu1uGWPCxV5BFfeeYxqPmuAzUyLT9qmaMXSAhXpb0WrspIeqYzdJpkh2vHModJPgRIaw==}

  '@radix-ui/react-alert-dialog@1.0.5':
    resolution: {integrity: sha512-OrVIOcZL0tl6xibeuGt5/+UxoT2N27KCFOPjFyfXMnchxSHZ/OW7cCX2nGlIYJrbHK/fczPcFzAwvNBB6XBNMA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0
      react-dom: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-arrow@1.0.3':
    resolution: {integrity: sha512-wSP+pHsB/jQRaL6voubsQ/ZlrGBHHrOjmBnr19hxYgtS0WvAFwZhK2WP/YY5yF9uKECCEEDGxuLxq1NBK51wFA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0
      react-dom: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-avatar@1.0.4':
    resolution: {integrity: sha512-kVK2K7ZD3wwj3qhle0ElXhOjbezIgyl2hVvgwfIdexL3rN6zJmy5AqqIf+D31lxVppdzV8CjAfZ6PklkmInZLw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0
      react-dom: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-checkbox@1.0.4':
    resolution: {integrity: sha512-CBuGQa52aAYnADZVt/KBQzXrwx6TqnlwtcIPGtVt5JkkzQwMOLJjPukimhfKEr4GQNd43C+djUh5Ikopj8pSLg==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0
      react-dom: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-collection@1.0.3':
    resolution: {integrity: sha512-3SzW+0PW7yBBoQlT8wNcGtaxaD0XSu0uLUFgrtHY08Acx05TaHaOmVLR73c0j/cqpDy53KBMO7s0dx2wmOIDIA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0
      react-dom: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-compose-refs@1.0.1':
    resolution: {integrity: sha512-fDSBgd44FKHa1FRMU59qBMPFcl2PZE+2nmqunj+BWFyYYjnhIDWL2ItDs3rrbJDQOtzt5nIebLCQc4QRfz6LJw==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-context@1.0.1':
    resolution: {integrity: sha512-ebbrdFoYTcuZ0v4wG5tedGnp9tzcV8awzsxYph7gXUyvnNLuTIcCk1q17JEbnVhXAKG9oX3KtchwiMIAYp9NLg==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-dialog@1.0.5':
    resolution: {integrity: sha512-GjWJX/AUpB703eEBanuBnIWdIXg6NvJFCXcNlSZk4xdszCdhrJgBoUd1cGk67vFO+WdA2pfI/plOpqz/5GUP6Q==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0
      react-dom: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-direction@1.0.1':
    resolution: {integrity: sha512-RXcvnXgyvYvBEOhCBuddKecVkoMiI10Jcm5cTI7abJRAHYfFxeu+FBQs/DvdxSYucxR5mna0dNsL6QFlds5TMA==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-dismissable-layer@1.0.5':
    resolution: {integrity: sha512-aJeDjQhywg9LBu2t/At58hCvr7pEm0o2Ke1x33B+MhjNmmZ17sy4KImo0KPLgsnc/zN7GPdce8Cnn0SWvwZO7g==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0
      react-dom: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-dropdown-menu@2.0.6':
    resolution: {integrity: sha512-i6TuFOoWmLWq+M/eCLGd/bQ2HfAX1RJgvrBQ6AQLmzfvsLdefxbWu8G9zczcPFfcSPehz9GcpF6K9QYreFV8hA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0
      react-dom: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-focus-guards@1.0.1':
    resolution: {integrity: sha512-Rect2dWbQ8waGzhMavsIbmSVCgYxkXLxxR3ZvCX79JOglzdEy4JXMb98lq4hPxUbLr77nP0UOGf4rcMU+s1pUA==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-focus-scope@1.0.4':
    resolution: {integrity: sha512-sL04Mgvf+FmyvZeYfNu1EPAaaxD+aw7cYeIB9L9Fvq8+urhltTRaEo5ysKOpHuKPclsZcSUMKlN05x4u+CINpA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0
      react-dom: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-hover-card@1.0.7':
    resolution: {integrity: sha512-OcUN2FU0YpmajD/qkph3XzMcK/NmSk9hGWnjV68p6QiZMgILugusgQwnLSDs3oFSJYGKf3Y49zgFedhGh04k9A==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0
      react-dom: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-icons@1.3.0':
    resolution: {integrity: sha512-jQxj/0LKgp+j9BiTXz3O3sgs26RNet2iLWmsPyRz2SIcR4q/4SbazXfnYwbAr+vLYKSfc7qxzyGQA1HLlYiuNw==}
    peerDependencies:
      react: ^16.x || ^17.x || ^18.x

  '@radix-ui/react-id@1.0.1':
    resolution: {integrity: sha512-tI7sT/kqYp8p96yGWY1OAnLHrqDgzHefRBKQ2YAkBS5ja7QLcZ9Z/uY7bEjPUatf8RomoXM8/1sMj1IJaE5UzQ==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-label@2.0.2':
    resolution: {integrity: sha512-N5ehvlM7qoTLx7nWPodsPYPgMzA5WM8zZChQg8nyFJKnDO5WHdba1vv5/H6IO5LtJMfD2Q3wh1qHFGNtK0w3bQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0
      react-dom: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-menu@2.0.6':
    resolution: {integrity: sha512-BVkFLS+bUC8HcImkRKPSiVumA1VPOOEC5WBMiT+QAVsPzW1FJzI9KnqgGxVDPBcql5xXrHkD3JOVoXWEXD8SYA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0
      react-dom: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-popover@1.0.7':
    resolution: {integrity: sha512-shtvVnlsxT6faMnK/a7n0wptwBD23xc1Z5mdrtKLwVEfsEMXodS0r5s0/g5P0hX//EKYZS2sxUjqfzlg52ZSnQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0
      react-dom: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-popper@1.1.3':
    resolution: {integrity: sha512-cKpopj/5RHZWjrbF2846jBNacjQVwkP068DfmgrNJXpvVWrOvlAmE9xSiy5OqeE+Gi8D9fP+oDhUnPqNMY8/5w==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0
      react-dom: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-portal@1.0.4':
    resolution: {integrity: sha512-Qki+C/EuGUVCQTOTD5vzJzJuMUlewbzuKyUy+/iHM2uwGiru9gZeBJtHAPKAEkB5KWGi9mP/CHKcY0wt1aW45Q==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0
      react-dom: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-presence@1.0.1':
    resolution: {integrity: sha512-UXLW4UAbIY5ZjcvzjfRFo5gxva8QirC9hF7wRE4U5gz+TP0DbRk+//qyuAQ1McDxBt1xNMBTaciFGvEmJvAZCg==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0
      react-dom: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-primitive@1.0.3':
    resolution: {integrity: sha512-yi58uVyoAcK/Nq1inRY56ZSjKypBNKTa/1mcL8qdl6oJeEaDbOldlzrGn7P6Q3Id5d+SYNGc5AJgc4vGhjs5+g==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0
      react-dom: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-progress@1.0.3':
    resolution: {integrity: sha512-5G6Om/tYSxjSeEdrb1VfKkfZfn/1IlPWd731h2RfPuSbIfNUgfqAwbKfJCg/PP6nuUCTrYzalwHSpSinoWoCag==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0
      react-dom: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-roving-focus@1.0.4':
    resolution: {integrity: sha512-2mUg5Mgcu001VkGy+FfzZyzbmuUWzgWkj3rvv4yu+mLw03+mTzbxZHvfcGyFp2b8EkQeMkpRQ5FiA2Vr2O6TeQ==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0
      react-dom: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-scroll-area@1.0.5':
    resolution: {integrity: sha512-b6PAgH4GQf9QEn8zbT2XUHpW5z8BzqEc7Kl11TwDrvuTrxlkcjTD5qa/bxgKr+nmuXKu4L/W5UZ4mlP/VG/5Gw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0
      react-dom: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-select@2.0.0':
    resolution: {integrity: sha512-RH5b7af4oHtkcHS7pG6Sgv5rk5Wxa7XI8W5gvB1N/yiuDGZxko1ynvOiVhFM7Cis2A8zxF9bTOUVbRDzPepe6w==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0
      react-dom: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-slot@1.0.2':
    resolution: {integrity: sha512-YeTpuq4deV+6DusvVUW4ivBgnkHwECUu0BiN43L5UCDFgdhsRUWAghhTF5MbvNTPzmiFOx90asDSUjWuCNapwg==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-tabs@1.0.4':
    resolution: {integrity: sha512-egZfYY/+wRNCflXNHx+dePvnz9FbmssDTJBtgRfDY7e8SE5oIo3Py2eCB1ckAbh1Q7cQ/6yJZThJ++sgbxibog==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0
      react-dom: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-toast@1.1.5':
    resolution: {integrity: sha512-fRLn227WHIBRSzuRzGJ8W+5YALxofH23y0MlPLddaIpLpCDqdE0NZlS2NRQDRiptfxDeeCjgFIpexB1/zkxDlw==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0
      react-dom: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/react-use-callback-ref@1.0.1':
    resolution: {integrity: sha512-D94LjX4Sp0xJFVaoQOd3OO9k7tpBYNOXdVhkltUbGv2Qb9OXdrg/CpsjlZv7ia14Sylv398LswWBVVu5nqKzAQ==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-controllable-state@1.0.1':
    resolution: {integrity: sha512-Svl5GY5FQeN758fWKrjM6Qb7asvXeiZltlT4U2gVfl8Gx5UAv2sMR0LWo8yhsIZh2oQ0eFdZ59aoOOMV7b47VA==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-escape-keydown@1.0.3':
    resolution: {integrity: sha512-vyL82j40hcFicA+M4Ex7hVkB9vHgSse1ZWomAqV2Je3RleKGO5iM8KMOEtfoSB0PnIelMd2lATjTGMYqN5ylTg==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-layout-effect@1.0.1':
    resolution: {integrity: sha512-v/5RegiJWYdoCvMnITBkNNx6bCj20fiaJnWtRkU18yITptraXjffz5Qbn05uOiQnOvi+dbkznkoaMltz1GnszQ==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-previous@1.0.1':
    resolution: {integrity: sha512-cV5La9DPwiQ7S0gf/0qiD6YgNqM5Fk97Kdrlc5yBcrF3jyEZQwm7vYFqMo4IfeHgJXsRaMvLABFtd0OVEmZhDw==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-rect@1.0.1':
    resolution: {integrity: sha512-Cq5DLuSiuYVKNU8orzJMbl15TXilTnJKUCltMVQg53BQOF1/C5toAaGrowkgksdBQ9H+SRL23g0HDmg9tvmxXw==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-use-size@1.0.1':
    resolution: {integrity: sha512-ibay+VqrgcaI6veAojjofPATwledXiSmX+C0KrBk/xgpX9rBzPV3OsfwlhQdUOFbh+LKQorLYT+xTXW9V8yd0g==}
    peerDependencies:
      '@types/react': '*'
      react: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@radix-ui/react-visually-hidden@1.0.3':
    resolution: {integrity: sha512-D4w41yN5YRKtu464TLnByKzMDG/JlMPHtfZgQAu9v6mNakUqGUI9vUrfQKz8NK41VMm/xbZbh76NUTVtIYqOMA==}
    peerDependencies:
      '@types/react': '*'
      '@types/react-dom': '*'
      react: ^16.8 || ^17.0 || ^18.0
      react-dom: ^16.8 || ^17.0 || ^18.0
    peerDependenciesMeta:
      '@types/react':
        optional: true
      '@types/react-dom':
        optional: true

  '@radix-ui/rect@1.0.1':
    resolution: {integrity: sha512-fyrgCaedtvMg9NK3en0pnOYJdtfwxUcNolezkNPUsoX57X8oQk+NkqcvzHXD2uKNij6GXmWU9NDru2IWjrO4BQ==}

  '@remix-run/router@1.15.3':
    resolution: {integrity: sha512-Oy8rmScVrVxWZVOpEF57ovlnhpZ8CCPlnIIumVcV9nFdiSIrus99+Lw78ekXyGvVDlIsFJbSfmSovJUhCWYV3w==}
    engines: {node: '>=14.0.0'}

  '@rollup/rollup-android-arm-eabi@4.24.0':
    resolution: {integrity: sha512-Q6HJd7Y6xdB48x8ZNVDOqsbh2uByBhgK8PiQgPhwkIw/HC/YX5Ghq2mQY5sRMZWHb3VsFkWooUVOZHKr7DmDIA==}
    cpu: [arm]
    os: [android]

  '@rollup/rollup-android-arm64@4.24.0':
    resolution: {integrity: sha512-ijLnS1qFId8xhKjT81uBHuuJp2lU4x2yxa4ctFPtG+MqEE6+C5f/+X/bStmxapgmwLwiL3ih122xv8kVARNAZA==}
    cpu: [arm64]
    os: [android]

  '@rollup/rollup-darwin-arm64@4.24.0':
    resolution: {integrity: sha512-bIv+X9xeSs1XCk6DVvkO+S/z8/2AMt/2lMqdQbMrmVpgFvXlmde9mLcbQpztXm1tajC3raFDqegsH18HQPMYtA==}
    cpu: [arm64]
    os: [darwin]

  '@rollup/rollup-darwin-x64@4.24.0':
    resolution: {integrity: sha512-X6/nOwoFN7RT2svEQWUsW/5C/fYMBe4fnLK9DQk4SX4mgVBiTA9h64kjUYPvGQ0F/9xwJ5U5UfTbl6BEjaQdBQ==}
    cpu: [x64]
    os: [darwin]

  '@rollup/rollup-linux-arm-gnueabihf@4.24.0':
    resolution: {integrity: sha512-0KXvIJQMOImLCVCz9uvvdPgfyWo93aHHp8ui3FrtOP57svqrF/roSSR5pjqL2hcMp0ljeGlU4q9o/rQaAQ3AYA==}
    cpu: [arm]
    os: [linux]

  '@rollup/rollup-linux-arm-musleabihf@4.24.0':
    resolution: {integrity: sha512-it2BW6kKFVh8xk/BnHfakEeoLPv8STIISekpoF+nBgWM4d55CZKc7T4Dx1pEbTnYm/xEKMgy1MNtYuoA8RFIWw==}
    cpu: [arm]
    os: [linux]

  '@rollup/rollup-linux-arm64-gnu@4.24.0':
    resolution: {integrity: sha512-i0xTLXjqap2eRfulFVlSnM5dEbTVque/3Pi4g2y7cxrs7+a9De42z4XxKLYJ7+OhE3IgxvfQM7vQc43bwTgPwA==}
    cpu: [arm64]
    os: [linux]

  '@rollup/rollup-linux-arm64-musl@4.24.0':
    resolution: {integrity: sha512-9E6MKUJhDuDh604Qco5yP/3qn3y7SLXYuiC0Rpr89aMScS2UAmK1wHP2b7KAa1nSjWJc/f/Lc0Wl1L47qjiyQw==}
    cpu: [arm64]
    os: [linux]

  '@rollup/rollup-linux-powerpc64le-gnu@4.24.0':
    resolution: {integrity: sha512-2XFFPJ2XMEiF5Zi2EBf4h73oR1V/lycirxZxHZNc93SqDN/IWhYYSYj8I9381ikUFXZrz2v7r2tOVk2NBwxrWw==}
    cpu: [ppc64]
    os: [linux]

  '@rollup/rollup-linux-riscv64-gnu@4.24.0':
    resolution: {integrity: sha512-M3Dg4hlwuntUCdzU7KjYqbbd+BLq3JMAOhCKdBE3TcMGMZbKkDdJ5ivNdehOssMCIokNHFOsv7DO4rlEOfyKpg==}
    cpu: [riscv64]
    os: [linux]

  '@rollup/rollup-linux-s390x-gnu@4.24.0':
    resolution: {integrity: sha512-mjBaoo4ocxJppTorZVKWFpy1bfFj9FeCMJqzlMQGjpNPY9JwQi7OuS1axzNIk0nMX6jSgy6ZURDZ2w0QW6D56g==}
    cpu: [s390x]
    os: [linux]

  '@rollup/rollup-linux-x64-gnu@4.24.0':
    resolution: {integrity: sha512-ZXFk7M72R0YYFN5q13niV0B7G8/5dcQ9JDp8keJSfr3GoZeXEoMHP/HlvqROA3OMbMdfr19IjCeNAnPUG93b6A==}
    cpu: [x64]
    os: [linux]

  '@rollup/rollup-linux-x64-musl@4.24.0':
    resolution: {integrity: sha512-w1i+L7kAXZNdYl+vFvzSZy8Y1arS7vMgIy8wusXJzRrPyof5LAb02KGr1PD2EkRcl73kHulIID0M501lN+vobQ==}
    cpu: [x64]
    os: [linux]

  '@rollup/rollup-win32-arm64-msvc@4.24.0':
    resolution: {integrity: sha512-VXBrnPWgBpVDCVY6XF3LEW0pOU51KbaHhccHw6AS6vBWIC60eqsH19DAeeObl+g8nKAz04QFdl/Cefta0xQtUQ==}
    cpu: [arm64]
    os: [win32]

  '@rollup/rollup-win32-ia32-msvc@4.24.0':
    resolution: {integrity: sha512-xrNcGDU0OxVcPTH/8n/ShH4UevZxKIO6HJFK0e15XItZP2UcaiLFd5kiX7hJnqCbSztUF8Qot+JWBC/QXRPYWQ==}
    cpu: [ia32]
    os: [win32]

  '@rollup/rollup-win32-x64-msvc@4.24.0':
    resolution: {integrity: sha512-fbMkAF7fufku0N2dE5TBXcNlg0pt0cJue4xBRE2Qc5Vqikxr4VCgKj/ht6SMdFcOacVA9rqF70APJ8RN/4vMJw==}
    cpu: [x64]
    os: [win32]

  '@swc/core-darwin-arm64@1.4.13':
    resolution: {integrity: sha512-36P72FLpm5iq85IvoEjBvi22DiqkkEIanJ1M0E8bkxcFHUbjBrYfPY9T6cpPyK5oQqkaTBvNAc3j1BlVD6IH6w==}
    engines: {node: '>=10'}
    cpu: [arm64]
    os: [darwin]

  '@swc/core-darwin-x64@1.4.13':
    resolution: {integrity: sha512-ye7OgKpDdyA8AMIVVdmD1ICDaFXgoEXORnVO8bBHyul0WN71yUBZMX+YxEx2lpWtiftA2vY/1MAuOR80vHkBCw==}
    engines: {node: '>=10'}
    cpu: [x64]
    os: [darwin]

  '@swc/core-linux-arm-gnueabihf@1.4.13':
    resolution: {integrity: sha512-+x593Jlmu4c3lJtZUKRejWpV2MAij1Js5nmQLLdjo6ChR2D4B2rzj3iMiKn5gITew7fraF9t3fvXALdWh7HmUg==}
    engines: {node: '>=10'}
    cpu: [arm]
    os: [linux]

  '@swc/core-linux-arm64-gnu@1.4.13':
    resolution: {integrity: sha512-0x8OVw4dfyNerrs/9eZX9wNnmvwbwXSMCi+LbE6Xt1pXOIwvoLtFIXcV3NsrlkFboO3sr5UAQIwDxKqbIZA9pQ==}
    engines: {node: '>=10'}
    cpu: [arm64]
    os: [linux]

  '@swc/core-linux-arm64-musl@1.4.13':
    resolution: {integrity: sha512-Z9c4JiequtZvngPcxbCuAOkmWBxi2vInZbjjhD5I+Q9oiJdXUz1t2USGwsGPS41Xvk1BOA3ecK2Sn1ilY3titg==}
    engines: {node: '>=10'}
    cpu: [arm64]
    os: [linux]

  '@swc/core-linux-x64-gnu@1.4.13':
    resolution: {integrity: sha512-ChatHtk+vX0Ke5QG+jO+rIapw/KwZsi9MedCBHFXHH6iWF4z8d51cJeN68ykcn+vAXzjNeFNdlNy5Vbkd1zAqg==}
    engines: {node: '>=10'}
    cpu: [x64]
    os: [linux]

  '@swc/core-linux-x64-musl@1.4.13':
    resolution: {integrity: sha512-0Pz39YR530mXpsztwQkmEKdkkZy4fY4Smdh4pkm6Ly8Nndyo0te/l4bcAGqN24Jp7aVwF/QSy14SAtw4HRjU9g==}
    engines: {node: '>=10'}
    cpu: [x64]
    os: [linux]

  '@swc/core-win32-arm64-msvc@1.4.13':
    resolution: {integrity: sha512-LVZfhlD+jHcAbz5NN+gAJ1BEasB0WpcvUzcsJt0nQSRsojgzPzFjJ+fzEBnvT7SMtqKkrnVJ0OmDYeh88bDRpw==}
    engines: {node: '>=10'}
    cpu: [arm64]
    os: [win32]

  '@swc/core-win32-ia32-msvc@1.4.13':
    resolution: {integrity: sha512-78hxHWUvUZtWsnhcf8DKwhBcNFJw+j4y4fN2B9ioXmBWX2tIyw+BqUHOrismOtjPihaZmwe/Ok2e4qmkawE2fw==}
    engines: {node: '>=10'}
    cpu: [ia32]
    os: [win32]

  '@swc/core-win32-x64-msvc@1.4.13':
    resolution: {integrity: sha512-WSfy1u2Xde6jU7UpHIInCUMW98Zw9iZglddKUAvmr1obkZji5U6EX0Oca3asEJdZPFb+2lMLjt0Mh5a1YisROg==}
    engines: {node: '>=10'}
    cpu: [x64]
    os: [win32]

  '@swc/core@1.4.13':
    resolution: {integrity: sha512-rOtusBE+2gaeRkAJn5E4zp5yzZekZOypzSOz5ZG6P1hFbd+Cc26fWEdK6sUSnrkkvTd0Oj33KXLB/4UkbK/UHA==}
    engines: {node: '>=10'}
    peerDependencies:
      '@swc/helpers': ^0.5.0
    peerDependenciesMeta:
      '@swc/helpers':
        optional: true

  '@swc/counter@0.1.3':
    resolution: {integrity: sha512-e2BR4lsJkkRlKZ/qCHPw9ZaSxc0MVUd7gtbtaB7aMvHeJVYe8sOB8DBZkP2DtISHGSku9sCK6T6cnY0CtXrOCQ==}

  '@swc/types@0.1.6':
    resolution: {integrity: sha512-/JLo/l2JsT/LRd80C3HfbmVpxOAJ11FO2RCEslFrgzLltoP9j8XIbsyDcfCt2WWyX+CM96rBoNM+IToAkFOugg==}

  '@tanstack/eslint-plugin-query@5.28.11':
    resolution: {integrity: sha512-bODGLeG4WCGmHVKCh3bH1KLfq7xdi1jsRjTESV6ifCw1mZ0m2fBMxAjK42KjbhJwcvNdTlYHI+YY/aZWBk4Niw==}
    peerDependencies:
      eslint: ^8.0.0

  '@tanstack/query-core@5.29.0':
    resolution: {integrity: sha512-WgPTRs58hm9CMzEr5jpISe8HXa3qKQ8CxewdYZeVnA54JrPY9B1CZiwsCoLpLkf0dGRZq+LcX5OiJb0bEsOFww==}

  '@tanstack/query-devtools@5.28.10':
    resolution: {integrity: sha512-5UN629fKa5/1K/2Pd26gaU7epxRrYiT1gy+V+pW5K6hnf1DeUKK3pANSb2eHKlecjIKIhTwyF7k9XdyE2gREvQ==}

  '@tanstack/react-query-devtools@5.29.2':
    resolution: {integrity: sha512-EmsaLNa8iFtReAW+5ftom0/TW78fIosVor517ak/+JFaoTBw8Yub3ao937JFE6AM3K/HXhteqvObetgt1ndLcw==}
    peerDependencies:
      '@tanstack/react-query': ^5.29.2
      react: ^18.0.0

  '@tanstack/react-query@5.29.2':
    resolution: {integrity: sha512-nyuWILR4u7H5moLGSiifLh8kIqQDLNOHGuSz0rcp+J75fNc8aQLyr5+I2JCHU3n+nJrTTW1ssgAD8HiKD7IFBQ==}
    peerDependencies:
      react: ^18.0.0

  '@types/estree@1.0.6':
    resolution: {integrity: sha512-AYnb1nQyY49te+VRAVgmzfcgjYS91mY5P0TKUDCLEM+gNnA+3T6rWITXRLYCpahpqSQbN5cE+gHpnPyXjHWxcw==}

  '@types/history@4.7.11':
    resolution: {integrity: sha512-qjDJRrmvBMiTx+jyLxvLfJU7UznFuokDv4f3WRuriHKERccVpFU+8XMQUAbDzoiJCsmexxRExQeMwwCdamSKDA==}

  '@types/json-schema@7.0.15':
    resolution: {integrity: sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==}

  '@types/node@20.12.7':
    resolution: {integrity: sha512-wq0cICSkRLVaf3UGLMGItu/PtdY7oaXaI/RVU+xliKVOtRna3PRY57ZDfztpDL0n11vfymMUnXv8QwYCO7L1wg==}

  '@types/prop-types@15.7.12':
    resolution: {integrity: sha512-5zvhXYtRNRluoE/jAp4GVsSduVUzNWKkOZrCDBWYtE7biZywwdC2AcEzg+cSMLFRfVgeAFqpfNabiPjxFddV1Q==}

  '@types/react-dom@18.2.25':
    resolution: {integrity: sha512-o/V48vf4MQh7juIKZU2QGDfli6p1+OOi5oXx36Hffpc9adsHeXjVp8rHuPkjd8VT8sOJ2Zp05HR7CdpGTIUFUA==}

  '@types/react-router-dom@5.3.3':
    resolution: {integrity: sha512-kpqnYK4wcdm5UaWI3fLcELopqLrHgLqNsdpHauzlQktfkHL3npOSwtj1Uz9oKBAzs7lFtVkV8j83voAz2D8fhw==}

  '@types/react-router@5.1.20':
    resolution: {integrity: sha512-jGjmu/ZqS7FjSH6owMcD5qpq19+1RS9DeVRqfl1FeBMxTDQAGwlMWOcs52NDoXaNKyG3d1cYQFMs9rCrb88o9Q==}

  '@types/react@18.2.78':
    resolution: {integrity: sha512-qOwdPnnitQY4xKlKayt42q5W5UQrSHjgoXNVEtxeqdITJ99k4VXJOP3vt8Rkm9HmgJpH50UNU+rlqfkfWOqp0A==}

  '@types/semver@7.5.8':
    resolution: {integrity: sha512-I8EUhyrgfLrcTkzV3TSsGyl1tSuPrEDzr0yd5m90UgNxQkyDXULk3b6MlQqTCpZpNtWe1K0hzclnZkTcLBe2UQ==}

  '@typescript-eslint/eslint-plugin@6.21.0':
    resolution: {integrity: sha512-oy9+hTPCUFpngkEZUSzbf9MxI65wbKFoQYsgPdILTfbUldp5ovUuphZVe4i30emU9M/kP+T64Di0mxl7dSw3MA==}
    engines: {node: ^16.0.0 || >=18.0.0}
    peerDependencies:
      '@typescript-eslint/parser': ^6.0.0 || ^6.0.0-alpha
      eslint: ^7.0.0 || ^8.0.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/parser@6.21.0':
    resolution: {integrity: sha512-tbsV1jPne5CkFQCgPBcDOt30ItF7aJoZL997JSF7MhGQqOeT3svWRYxiqlfA5RUdlHN6Fi+EI9bxqbdyAUZjYQ==}
    engines: {node: ^16.0.0 || >=18.0.0}
    peerDependencies:
      eslint: ^7.0.0 || ^8.0.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/scope-manager@6.21.0':
    resolution: {integrity: sha512-OwLUIWZJry80O99zvqXVEioyniJMa+d2GrqpUTqi5/v5D5rOrppJVBPa0yKCblcigC0/aYAzxxqQ1B+DS2RYsg==}
    engines: {node: ^16.0.0 || >=18.0.0}

  '@typescript-eslint/type-utils@6.21.0':
    resolution: {integrity: sha512-rZQI7wHfao8qMX3Rd3xqeYSMCL3SoiSQLBATSiVKARdFGCYSRvmViieZjqc58jKgs8Y8i9YvVVhRbHSTA4VBag==}
    engines: {node: ^16.0.0 || >=18.0.0}
    peerDependencies:
      eslint: ^7.0.0 || ^8.0.0
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/types@6.21.0':
    resolution: {integrity: sha512-1kFmZ1rOm5epu9NZEZm1kckCDGj5UJEf7P1kliH4LKu/RkwpsfqqGmY2OOcUs18lSlQBKLDYBOGxRVtrMN5lpg==}
    engines: {node: ^16.0.0 || >=18.0.0}

  '@typescript-eslint/typescript-estree@6.21.0':
    resolution: {integrity: sha512-6npJTkZcO+y2/kr+z0hc4HwNfrrP4kNYh57ek7yCNlrBjWQ1Y0OS7jiZTkgumrvkX5HkEKXFZkkdFNkaW2wmUQ==}
    engines: {node: ^16.0.0 || >=18.0.0}
    peerDependencies:
      typescript: '*'
    peerDependenciesMeta:
      typescript:
        optional: true

  '@typescript-eslint/utils@6.21.0':
    resolution: {integrity: sha512-NfWVaC8HP9T8cbKQxHcsJBY5YE1O33+jpMwN45qzWWaPDZgLIbo12toGMWnmhvCpd3sIxkpDw3Wv1B3dYrbDQQ==}
    engines: {node: ^16.0.0 || >=18.0.0}
    peerDependencies:
      eslint: ^7.0.0 || ^8.0.0

  '@typescript-eslint/visitor-keys@6.21.0':
    resolution: {integrity: sha512-JJtkDduxLi9bivAB+cYOVMtbkqdPOhZ+ZI5LC47MIRrDV4Yn2o+ZnW10Nkmr28xRpSpdJ6Sm42Hjf2+REYXm0A==}
    engines: {node: ^16.0.0 || >=18.0.0}

  '@ungap/structured-clone@1.2.0':
    resolution: {integrity: sha512-zuVdFrMJiuCDQUMCzQaD6KL28MjnqqN8XnAqiEq9PNm/hCPTSGfrXCOfwj1ow4LFb/tNymJPwsNbVePc1xFqrQ==}

  '@vitejs/plugin-react-swc@3.6.0':
    resolution: {integrity: sha512-XFRbsGgpGxGzEV5i5+vRiro1bwcIaZDIdBRP16qwm+jP68ue/S8FJTBEgOeojtVDYrbSua3XFp71kC8VJE6v+g==}
    peerDependencies:
      vite: ^4 || ^5

  acorn-jsx@5.3.2:
    resolution: {integrity: sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==}
    peerDependencies:
      acorn: ^6.0.0 || ^7.0.0 || ^8.0.0

  acorn@8.11.3:
    resolution: {integrity: sha512-Y9rRfJG5jcKOE0CLisYbojUjIrIEE7AGMzA/Sm4BslANhbS+cDMpgBdcPT91oJ7OuJ9hYJBx59RjbhxVnrF8Xg==}
    engines: {node: '>=0.4.0'}
    hasBin: true

  ajv@6.12.6:
    resolution: {integrity: sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==}

  ansi-regex@5.0.1:
    resolution: {integrity: sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==}
    engines: {node: '>=8'}

  ansi-regex@6.0.1:
    resolution: {integrity: sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==}
    engines: {node: '>=12'}

  ansi-styles@4.3.0:
    resolution: {integrity: sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==}
    engines: {node: '>=8'}

  ansi-styles@6.2.1:
    resolution: {integrity: sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==}
    engines: {node: '>=12'}

  any-promise@1.3.0:
    resolution: {integrity: sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==}

  anymatch@3.1.3:
    resolution: {integrity: sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==}
    engines: {node: '>= 8'}

  arg@5.0.2:
    resolution: {integrity: sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==}

  argparse@2.0.1:
    resolution: {integrity: sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==}

  aria-hidden@1.2.4:
    resolution: {integrity: sha512-y+CcFFwelSXpLZk/7fMB2mUbGtX9lKycf1MWJ7CaTIERyitVlyQx6C+sxcROU2BAJ24OiZyK+8wj2i8AlBoS3A==}
    engines: {node: '>=10'}

  array-union@2.1.0:
    resolution: {integrity: sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==}
    engines: {node: '>=8'}

  asynckit@0.4.0:
    resolution: {integrity: sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==}

  autoprefixer@10.4.19:
    resolution: {integrity: sha512-BaENR2+zBZ8xXhM4pUaKUxlVdxZ0EZhjvbopwnXmxRUfqDmwSpC2lAi/QXvx7NRdPCo1WKEcEF6mV64si1z4Ew==}
    engines: {node: ^10 || ^12 || >=14}
    hasBin: true
    peerDependencies:
      postcss: ^8.1.0

  axios@1.7.4:
    resolution: {integrity: sha512-DukmaFRnY6AzAALSH4J2M3k6PkaC+MfaAGdEERRWcC9q3/TWQwLpHR8ZRLKTdQ3aBDL64EdluRDjJqKw+BPZEw==}

  balanced-match@1.0.2:
    resolution: {integrity: sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==}

  binary-extensions@2.3.0:
    resolution: {integrity: sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==}
    engines: {node: '>=8'}

  brace-expansion@1.1.11:
    resolution: {integrity: sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==}

  brace-expansion@2.0.1:
    resolution: {integrity: sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==}

  braces@3.0.3:
    resolution: {integrity: sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==}
    engines: {node: '>=8'}

  browserslist@4.23.0:
    resolution: {integrity: sha512-QW8HiM1shhT2GuzkvklfjcKDiWFXHOeFCIA/huJPwHsslwcydgk7X+z2zXpEijP98UCY7HbubZt5J2Zgvf0CaQ==}
    engines: {node: ^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7}
    hasBin: true

  callsites@3.1.0:
    resolution: {integrity: sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==}
    engines: {node: '>=6'}

  camelcase-css@2.0.1:
    resolution: {integrity: sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==}
    engines: {node: '>= 6'}

  caniuse-lite@1.0.30001609:
    resolution: {integrity: sha512-JFPQs34lHKx1B5t1EpQpWH4c+29zIyn/haGsbpfq3suuV9v56enjFt23zqijxGTMwy1p/4H2tjnQMY+p1WoAyA==}

  chalk@4.1.2:
    resolution: {integrity: sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==}
    engines: {node: '>=10'}

  chart.js@4.4.2:
    resolution: {integrity: sha512-6GD7iKwFpP5kbSD4MeRRRlTnQvxfQREy36uEtm1hzHzcOqwWx0YEHuspuoNlslu+nciLIB7fjjsHkUv/FzFcOg==}
    engines: {pnpm: '>=8'}

  chokidar@3.6.0:
    resolution: {integrity: sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==}
    engines: {node: '>= 8.10.0'}

  class-variance-authority@0.7.0:
    resolution: {integrity: sha512-jFI8IQw4hczaL4ALINxqLEXQbWcNjoSkloa4IaufXCJr6QawJyw7tuRysRsrE8w2p/4gGaxKIt/hX3qz/IbD1A==}

  clsx@2.0.0:
    resolution: {integrity: sha512-rQ1+kcj+ttHG0MKVGBUXwayCCF1oh39BF5COIpRzuCEv8Mwjv0XucrI2ExNTOn9IlLifGClWQcU9BrZORvtw6Q==}
    engines: {node: '>=6'}

  clsx@2.1.0:
    resolution: {integrity: sha512-m3iNNWpd9rl3jvvcBnu70ylMdrXt8Vlq4HYadnU5fwcOtvkSQWPmj7amUcDT2qYI7risszBjI5AUIUox9D16pg==}
    engines: {node: '>=6'}

  cmdk@1.0.0:
    resolution: {integrity: sha512-gDzVf0a09TvoJ5jnuPvygTB77+XdOSwEmJ88L6XPFPlv7T3RxbP9jgenfylrAMD0+Le1aO0nVjQUzl2g+vjz5Q==}
    peerDependencies:
      react: ^18.0.0
      react-dom: ^18.0.0

  color-convert@2.0.1:
    resolution: {integrity: sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==}
    engines: {node: '>=7.0.0'}

  color-name@1.1.4:
    resolution: {integrity: sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==}

  combined-stream@1.0.8:
    resolution: {integrity: sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==}
    engines: {node: '>= 0.8'}

  commander@4.1.1:
    resolution: {integrity: sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==}
    engines: {node: '>= 6'}

  concat-map@0.0.1:
    resolution: {integrity: sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==}

  cross-spawn@7.0.6:
    resolution: {integrity: sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==}
    engines: {node: '>= 8'}

  cssesc@3.0.0:
    resolution: {integrity: sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==}
    engines: {node: '>=4'}
    hasBin: true

  csstype@3.1.3:
    resolution: {integrity: sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==}

  date-fns@3.6.0:
    resolution: {integrity: sha512-fRHTG8g/Gif+kSh50gaGEdToemgfj74aRX3swtiouboip5JDLAyDE9F11nHMIcvOaXeOC6D7SpNhi7uFyB7Uww==}

  debug@4.3.4:
    resolution: {integrity: sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==}
    engines: {node: '>=6.0'}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  deeks@3.1.0:
    resolution: {integrity: sha512-e7oWH1LzIdv/prMQ7pmlDlaVoL64glqzvNgkgQNgyec9ORPHrT2jaOqMtRyqJuwWjtfb6v+2rk9pmaHj+F137A==}
    engines: {node: '>= 16'}

  deep-is@0.1.4:
    resolution: {integrity: sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==}

  delayed-stream@1.0.0:
    resolution: {integrity: sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==}
    engines: {node: '>=0.4.0'}

  detect-node-es@1.1.0:
    resolution: {integrity: sha512-ypdmJU/TbBby2Dxibuv7ZLW3Bs1QEmM7nHjEANfohJLvE0XVujisn1qPJcZxg+qDucsr+bP6fLD1rPS3AhJ7EQ==}

  didyoumean@1.2.2:
    resolution: {integrity: sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==}

  dir-glob@3.0.1:
    resolution: {integrity: sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==}
    engines: {node: '>=8'}

  dlv@1.1.3:
    resolution: {integrity: sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==}

  doc-path@4.1.1:
    resolution: {integrity: sha512-h1ErTglQAVv2gCnOpD3sFS6uolDbOKHDU1BZq+Kl3npPqroU3dYL42lUgMfd5UimlwtRgp7C9dLGwqQ5D2HYgQ==}
    engines: {node: '>=16'}

  doctrine@3.0.0:
    resolution: {integrity: sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==}
    engines: {node: '>=6.0.0'}

  eastasianwidth@0.2.0:
    resolution: {integrity: sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==}

  electron-to-chromium@1.4.736:
    resolution: {integrity: sha512-Rer6wc3ynLelKNM4lOCg7/zPQj8tPOCB2hzD32PX9wd3hgRRi9MxEbmkFCokzcEhRVMiOVLjnL9ig9cefJ+6+Q==}

  emoji-regex@8.0.0:
    resolution: {integrity: sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==}

  emoji-regex@9.2.2:
    resolution: {integrity: sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==}

  esbuild@0.20.2:
    resolution: {integrity: sha512-WdOOppmUNU+IbZ0PaDiTst80zjnrOkyJNHoKupIcVyU8Lvla3Ugx94VzkQ32Ijqd7UhHJy75gNWDMUekcrSJ6g==}
    engines: {node: '>=12'}
    hasBin: true

  escalade@3.1.2:
    resolution: {integrity: sha512-ErCHMCae19vR8vQGe50xIsVomy19rg6gFu3+r3jkEO46suLMWBksvVyoGgQV+jOfl84ZSOSlmv6Gxa89PmTGmA==}
    engines: {node: '>=6'}

  escape-string-regexp@4.0.0:
    resolution: {integrity: sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==}
    engines: {node: '>=10'}

  eslint-plugin-react-hooks@4.6.0:
    resolution: {integrity: sha512-oFc7Itz9Qxh2x4gNHStv3BqJq54ExXmfC+a1NjAta66IAN87Wu0R/QArgIS9qKzX3dXKPI9H5crl9QchNMY9+g==}
    engines: {node: '>=10'}
    peerDependencies:
      eslint: ^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0

  eslint-plugin-react-refresh@0.4.6:
    resolution: {integrity: sha512-NjGXdm7zgcKRkKMua34qVO9doI7VOxZ6ancSvBELJSSoX97jyndXcSoa8XBh69JoB31dNz3EEzlMcizZl7LaMA==}
    peerDependencies:
      eslint: '>=7'

  eslint-scope@7.2.2:
    resolution: {integrity: sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  eslint-visitor-keys@3.4.3:
    resolution: {integrity: sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  eslint@8.57.0:
    resolution: {integrity: sha512-dZ6+mexnaTIbSBZWgou51U6OmzIhYM2VcNdtiTtI7qPNZm35Akpr0f6vtw3w1Kmn5PYo+tZVfh13WrhpS6oLqQ==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}
    deprecated: This version is no longer supported. Please see https://eslint.org/version-support for other options.
    hasBin: true

  espree@9.6.1:
    resolution: {integrity: sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==}
    engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}

  esquery@1.5.0:
    resolution: {integrity: sha512-YQLXUplAwJgCydQ78IMJywZCceoqk1oH01OERdSAJc/7U2AylwjhSCLDEtqwg811idIS/9fIU5GjG73IgjKMVg==}
    engines: {node: '>=0.10'}

  esrecurse@4.3.0:
    resolution: {integrity: sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==}
    engines: {node: '>=4.0'}

  estraverse@5.3.0:
    resolution: {integrity: sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==}
    engines: {node: '>=4.0'}

  esutils@2.0.3:
    resolution: {integrity: sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==}
    engines: {node: '>=0.10.0'}

  fast-deep-equal@3.1.3:
    resolution: {integrity: sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==}

  fast-glob@3.3.2:
    resolution: {integrity: sha512-oX2ruAFQwf/Orj8m737Y5adxDQO0LAB7/S5MnxCdTNDd4p6BsyIVsv9JQsATbTSq8KHRpLwIHbVlUNatxd+1Ow==}
    engines: {node: '>=8.6.0'}

  fast-json-stable-stringify@2.1.0:
    resolution: {integrity: sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==}

  fast-levenshtein@2.0.6:
    resolution: {integrity: sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==}

  fastq@1.17.1:
    resolution: {integrity: sha512-sRVD3lWVIXWg6By68ZN7vho9a1pQcN/WBFaAAsDDFzlJjvoGx0P8z7V1t72grFJfJhu3YPZBuu25f7Kaw2jN1w==}

  file-entry-cache@6.0.1:
    resolution: {integrity: sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==}
    engines: {node: ^10.12.0 || >=12.0.0}

  fill-range@7.1.1:
    resolution: {integrity: sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==}
    engines: {node: '>=8'}

  find-up@5.0.0:
    resolution: {integrity: sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==}
    engines: {node: '>=10'}

  flat-cache@3.2.0:
    resolution: {integrity: sha512-CYcENa+FtcUKLmhhqyctpclsq7QF38pKjZHsGNiSQF5r4FtoKDWabFDl3hzaEQMvT1LHEysw5twgLvpYYb4vbw==}
    engines: {node: ^10.12.0 || >=12.0.0}

  flatted@3.3.1:
    resolution: {integrity: sha512-X8cqMLLie7KsNUDSdzeN8FYK9rEt4Dt67OsG/DNGnYTSDBG4uFAJFBnUeiV+zCVAvwFy56IjM9sH51jVaEhNxw==}

  follow-redirects@1.15.6:
    resolution: {integrity: sha512-wWN62YITEaOpSK584EZXJafH1AGpO8RVgElfkuXbTOrPX4fIfOyEpW/CsiNd8JdYrAoOvafRTOEnvsO++qCqFA==}
    engines: {node: '>=4.0'}
    peerDependencies:
      debug: '*'
    peerDependenciesMeta:
      debug:
        optional: true

  foreground-child@3.1.1:
    resolution: {integrity: sha512-TMKDUnIte6bfb5nWv7V/caI169OHgvwjb7V4WkeUvbQQdjr5rWKqHFiKWb/fcOwB+CzBT+qbWjvj+DVwRskpIg==}
    engines: {node: '>=14'}

  form-data@4.0.0:
    resolution: {integrity: sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==}
    engines: {node: '>= 6'}

  fraction.js@4.3.7:
    resolution: {integrity: sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==}

  fs.realpath@1.0.0:
    resolution: {integrity: sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==}

  fsevents@2.3.3:
    resolution: {integrity: sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==}
    engines: {node: ^8.16.0 || ^10.6.0 || >=11.0.0}
    os: [darwin]

  function-bind@1.1.2:
    resolution: {integrity: sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==}

  get-nonce@1.0.1:
    resolution: {integrity: sha512-FJhYRoDaiatfEkUK8HKlicmu/3SGFD51q3itKDGoSTysQJBnfOcxU5GxnhE1E6soB76MbT0MBtnKJuXyAx+96Q==}
    engines: {node: '>=6'}

  glob-parent@5.1.2:
    resolution: {integrity: sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==}
    engines: {node: '>= 6'}

  glob-parent@6.0.2:
    resolution: {integrity: sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==}
    engines: {node: '>=10.13.0'}

  glob@10.3.12:
    resolution: {integrity: sha512-TCNv8vJ+xz4QiqTpfOJA7HvYv+tNIRHKfUWw/q+v2jdgN4ebz+KY9tGx5J4rHP0o84mNP+ApH66HRX8us3Khqg==}
    engines: {node: '>=16 || 14 >=14.17'}
    hasBin: true

  glob@7.2.3:
    resolution: {integrity: sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==}
    deprecated: Glob versions prior to v9 are no longer supported

  globals@13.24.0:
    resolution: {integrity: sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==}
    engines: {node: '>=8'}

  globby@11.1.0:
    resolution: {integrity: sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==}
    engines: {node: '>=10'}

  goober@2.1.14:
    resolution: {integrity: sha512-4UpC0NdGyAFqLNPnhCT2iHpza2q+RAY3GV85a/mRPdzyPQMsj0KmMMuetdIkzWRbJ+Hgau1EZztq8ImmiMGhsg==}
    peerDependencies:
      csstype: ^3.0.10

  graphemer@1.4.0:
    resolution: {integrity: sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==}

  has-flag@4.0.0:
    resolution: {integrity: sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==}
    engines: {node: '>=8'}

  hasown@2.0.2:
    resolution: {integrity: sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==}
    engines: {node: '>= 0.4'}

  ignore@5.3.1:
    resolution: {integrity: sha512-5Fytz/IraMjqpwfd34ke28PTVMjZjJG2MPn5t7OE4eUCUNf8BAa7b5WUS9/Qvr6mwOQS7Mk6vdsMno5he+T8Xw==}
    engines: {node: '>= 4'}

  import-fresh@3.3.0:
    resolution: {integrity: sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==}
    engines: {node: '>=6'}

  imurmurhash@0.1.4:
    resolution: {integrity: sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==}
    engines: {node: '>=0.8.19'}

  inflight@1.0.6:
    resolution: {integrity: sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==}
    deprecated: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.

  inherits@2.0.4:
    resolution: {integrity: sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==}

  invariant@2.2.4:
    resolution: {integrity: sha512-phJfQVBuaJM5raOpJjSfkiD6BpbCE4Ns//LaXl6wGYtUBY83nWS6Rf9tXm2e8VaK60JEjYldbPif/A2B1C2gNA==}

  is-binary-path@2.1.0:
    resolution: {integrity: sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==}
    engines: {node: '>=8'}

  is-core-module@2.13.1:
    resolution: {integrity: sha512-hHrIjvZsftOsvKSn2TRYl63zvxsgE0K+0mYMoH6gD4omR5IWB2KynivBQczo3+wF1cCkjzvptnI9Q0sPU66ilw==}

  is-extglob@2.1.1:
    resolution: {integrity: sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==}
    engines: {node: '>=0.10.0'}

  is-fullwidth-code-point@3.0.0:
    resolution: {integrity: sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==}
    engines: {node: '>=8'}

  is-glob@4.0.3:
    resolution: {integrity: sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==}
    engines: {node: '>=0.10.0'}

  is-number@7.0.0:
    resolution: {integrity: sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==}
    engines: {node: '>=0.12.0'}

  is-path-inside@3.0.3:
    resolution: {integrity: sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==}
    engines: {node: '>=8'}

  isexe@2.0.0:
    resolution: {integrity: sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==}

  jackspeak@2.3.6:
    resolution: {integrity: sha512-N3yCS/NegsOBokc8GAdM8UcmfsKiSS8cipheD/nivzr700H+nsMOxJjQnvwOcRYVuFkdH0wGUvW2WbXGmrZGbQ==}
    engines: {node: '>=14'}

  jiti@1.21.0:
    resolution: {integrity: sha512-gFqAIbuKyyso/3G2qhiO2OM6shY6EPP/R0+mkDbyspxKazh8BXDC5FiFsUjlczgdNz/vfra0da2y+aHrusLG/Q==}
    hasBin: true

  js-tokens@4.0.0:
    resolution: {integrity: sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==}

  js-yaml@4.1.0:
    resolution: {integrity: sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==}
    hasBin: true

  json-2-csv@5.5.1:
    resolution: {integrity: sha512-KgAtAXTQopRwe90gh8SgjRSxgt9bUWbGAPMo9W0TZLA8SqiQH7khtagFfeEUjG3NBPwJu/+9uX5pMvunKaPvrQ==}
    engines: {node: '>= 16'}

  json-buffer@3.0.1:
    resolution: {integrity: sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==}

  json-schema-traverse@0.4.1:
    resolution: {integrity: sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==}

  json-stable-stringify-without-jsonify@1.0.1:
    resolution: {integrity: sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==}

  keyv@4.5.4:
    resolution: {integrity: sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==}

  levn@0.4.1:
    resolution: {integrity: sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==}
    engines: {node: '>= 0.8.0'}

  lilconfig@2.1.0:
    resolution: {integrity: sha512-utWOt/GHzuUxnLKxB6dk81RoOeoNeHgbrXiuGk4yyF5qlRz+iIVWu56E2fqGHFrXz0QNUhLB/8nKqvRH66JKGQ==}
    engines: {node: '>=10'}

  lilconfig@3.1.1:
    resolution: {integrity: sha512-O18pf7nyvHTckunPWCV1XUNXU1piu01y2b7ATJ0ppkUkk8ocqVWBrYjJBCwHDjD/ZWcfyrA0P4gKhzWGi5EINQ==}
    engines: {node: '>=14'}

  lines-and-columns@1.2.4:
    resolution: {integrity: sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==}

  locate-path@6.0.0:
    resolution: {integrity: sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==}
    engines: {node: '>=10'}

  lodash.merge@4.6.2:
    resolution: {integrity: sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==}

  loose-envify@1.4.0:
    resolution: {integrity: sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==}
    hasBin: true

  lru-cache@10.2.0:
    resolution: {integrity: sha512-2bIM8x+VAf6JT4bKAljS1qUWgMsqZRPGJS6FSahIMPVvctcNhyVp7AJu7quxOW9jwkryBReKZY5tY5JYv2n/7Q==}
    engines: {node: 14 || >=16.14}

  lru-cache@6.0.0:
    resolution: {integrity: sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==}
    engines: {node: '>=10'}

  lucide-react@0.331.0:
    resolution: {integrity: sha512-CHFJ0ve9vaZ7bB2VRAl27SlX1ELh6pfNC0jS96qGpPEEzLkLDGq4pDBFU8RhOoRMqsjXqTzLm9U6bZ1OcIHq7Q==}
    peerDependencies:
      react: ^16.5.1 || ^17.0.0 || ^18.0.0

  merge2@1.4.1:
    resolution: {integrity: sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==}
    engines: {node: '>= 8'}

  micromatch@4.0.8:
    resolution: {integrity: sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==}
    engines: {node: '>=8.6'}

  mime-db@1.52.0:
    resolution: {integrity: sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==}
    engines: {node: '>= 0.6'}

  mime-types@2.1.35:
    resolution: {integrity: sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==}
    engines: {node: '>= 0.6'}

  minimatch@3.1.2:
    resolution: {integrity: sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==}

  minimatch@9.0.3:
    resolution: {integrity: sha512-RHiac9mvaRw0x3AYRgDC1CxAP7HTcNrrECeA8YYJeWnpo+2Q5CegtZjaotWTWxDG3UeGA1coE05iH1mPjT/2mg==}
    engines: {node: '>=16 || 14 >=14.17'}

  minimatch@9.0.4:
    resolution: {integrity: sha512-KqWh+VchfxcMNRAJjj2tnsSJdNbHsVgnkBhTNrW7AjVo6OvLtxw8zfT9oLw1JSohlFzJ8jCoTgaoXvJ+kHt6fw==}
    engines: {node: '>=16 || 14 >=14.17'}

  minipass@7.0.4:
    resolution: {integrity: sha512-jYofLM5Dam9279rdkWzqHozUo4ybjdZmCsDHePy5V/PbBcVMiSZR97gmAy45aqi8CK1lG2ECd356FU86avfwUQ==}
    engines: {node: '>=16 || 14 >=14.17'}

  ms@2.1.2:
    resolution: {integrity: sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==}

  mz@2.7.0:
    resolution: {integrity: sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==}

  nanoid@3.3.8:
    resolution: {integrity: sha512-WNLf5Sd8oZxOm+TzppcYk8gVOgP+l58xNy58D0nbUnOxOWRWvlcCV4kUF7ltmI6PsrLl/BgKEyS4mqsGChFN0w==}
    engines: {node: ^10 || ^12 || ^13.7 || ^14 || >=15.0.1}
    hasBin: true

  natural-compare@1.4.0:
    resolution: {integrity: sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==}

  node-releases@2.0.14:
    resolution: {integrity: sha512-y10wOWt8yZpqXmOgRo77WaHEmhYQYGNA6y421PKsKYWEK8aW+cqAphborZDhqfyKrbZEN92CN1X2KbafY2s7Yw==}

  normalize-path@3.0.0:
    resolution: {integrity: sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==}
    engines: {node: '>=0.10.0'}

  normalize-range@0.1.2:
    resolution: {integrity: sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==}
    engines: {node: '>=0.10.0'}

  object-assign@4.1.1:
    resolution: {integrity: sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==}
    engines: {node: '>=0.10.0'}

  object-hash@3.0.0:
    resolution: {integrity: sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==}
    engines: {node: '>= 6'}

  once@1.4.0:
    resolution: {integrity: sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==}

  optionator@0.9.3:
    resolution: {integrity: sha512-JjCoypp+jKn1ttEFExxhetCKeJt9zhAgAve5FXHixTvFDW/5aEktX9bufBKLRRMdU7bNtpLfcGu94B3cdEJgjg==}
    engines: {node: '>= 0.8.0'}

  p-limit@3.1.0:
    resolution: {integrity: sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==}
    engines: {node: '>=10'}

  p-locate@5.0.0:
    resolution: {integrity: sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==}
    engines: {node: '>=10'}

  parent-module@1.0.1:
    resolution: {integrity: sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==}
    engines: {node: '>=6'}

  path-exists@4.0.0:
    resolution: {integrity: sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==}
    engines: {node: '>=8'}

  path-is-absolute@1.0.1:
    resolution: {integrity: sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==}
    engines: {node: '>=0.10.0'}

  path-key@3.1.1:
    resolution: {integrity: sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==}
    engines: {node: '>=8'}

  path-parse@1.0.7:
    resolution: {integrity: sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==}

  path-scurry@1.10.2:
    resolution: {integrity: sha512-7xTavNy5RQXnsjANvVvMkEjvloOinkAjv/Z6Ildz9v2RinZ4SBKTWFOVRbaF8p0vpHnyjV/UwNDdKuUv6M5qcA==}
    engines: {node: '>=16 || 14 >=14.17'}

  path-type@4.0.0:
    resolution: {integrity: sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==}
    engines: {node: '>=8'}

  picocolors@1.0.0:
    resolution: {integrity: sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==}

  picomatch@2.3.1:
    resolution: {integrity: sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==}
    engines: {node: '>=8.6'}

  pify@2.3.0:
    resolution: {integrity: sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==}
    engines: {node: '>=0.10.0'}

  pirates@4.0.6:
    resolution: {integrity: sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==}
    engines: {node: '>= 6'}

  postcss-import@15.1.0:
    resolution: {integrity: sha512-hpr+J05B2FVYUAXHeK1YyI267J/dDDhMU6B6civm8hSY1jYJnBXxzKDKDswzJmtLHryrjhnDjqqp/49t8FALew==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      postcss: ^8.0.0

  postcss-js@4.0.1:
    resolution: {integrity: sha512-dDLF8pEO191hJMtlHFPRa8xsizHaM82MLfNkUHdUtVEV3tgTp5oj+8qbEqYM57SLfc74KSbw//4SeJma2LRVIw==}
    engines: {node: ^12 || ^14 || >= 16}
    peerDependencies:
      postcss: ^8.4.21

  postcss-load-config@4.0.2:
    resolution: {integrity: sha512-bSVhyJGL00wMVoPUzAVAnbEoWyqRxkjv64tUl427SKnPrENtq6hJwUojroMz2VB+Q1edmi4IfrAPpami5VVgMQ==}
    engines: {node: '>= 14'}
    peerDependencies:
      postcss: '>=8.0.9'
      ts-node: '>=9.0.0'
    peerDependenciesMeta:
      postcss:
        optional: true
      ts-node:
        optional: true

  postcss-nested@6.0.1:
    resolution: {integrity: sha512-mEp4xPMi5bSWiMbsgoPfcP74lsWLHkQbZc3sY+jWYd65CUwXrUaTp0fmNpa01ZcETKlIgUdFN/MpS2xZtqL9dQ==}
    engines: {node: '>=12.0'}
    peerDependencies:
      postcss: ^8.2.14

  postcss-selector-parser@6.0.16:
    resolution: {integrity: sha512-A0RVJrX+IUkVZbW3ClroRWurercFhieevHB38sr2+l9eUClMqome3LmEmnhlNy+5Mr2EYN6B2Kaw9wYdd+VHiw==}
    engines: {node: '>=4'}

  postcss-value-parser@4.2.0:
    resolution: {integrity: sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==}

  postcss@8.4.38:
    resolution: {integrity: sha512-Wglpdk03BSfXkHoQa3b/oulrotAkwrlLDRSOb9D0bN86FdRyE9lppSp33aHNPgBa0JKCoB+drFLZkQoRRYae5A==}
    engines: {node: ^10 || ^12 || >=14}

  prelude-ls@1.2.1:
    resolution: {integrity: sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==}
    engines: {node: '>= 0.8.0'}

  proxy-from-env@1.1.0:
    resolution: {integrity: sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==}

  punycode@2.3.1:
    resolution: {integrity: sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==}
    engines: {node: '>=6'}

  queue-microtask@1.2.3:
    resolution: {integrity: sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==}

  react-chartjs-2@5.2.0:
    resolution: {integrity: sha512-98iN5aguJyVSxp5U3CblRLH67J8gkfyGNbiK3c+l1QI/G4irHMPQw44aEPmjVag+YKTyQ260NcF82GTQ3bdscA==}
    peerDependencies:
      chart.js: ^4.1.1
      react: ^16.8.0 || ^17.0.0 || ^18.0.0

  react-day-picker@8.10.0:
    resolution: {integrity: sha512-mz+qeyrOM7++1NCb1ARXmkjMkzWVh2GL9YiPbRjKe0zHccvekk4HE+0MPOZOrosn8r8zTHIIeOUXTmXRqmkRmg==}
    peerDependencies:
      date-fns: ^2.28.0 || ^3.0.0
      react: ^16.8.0 || ^17.0.0 || ^18.0.0

  react-dom@18.2.0:
    resolution: {integrity: sha512-6IMTriUmvsjHUjNtEDudZfuDQUoWXVxKHhlEGSk81n4YFS+r/Kl99wXiwlVXtPBtJenozv2P+hxDsw9eA7Xo6g==}
    peerDependencies:
      react: ^18.2.0

  react-hot-toast@2.4.1:
    resolution: {integrity: sha512-j8z+cQbWIM5LY37pR6uZR6D4LfseplqnuAO4co4u8917hBUvXlEqyP1ZzqVLcqoyUesZZv/ImreoCeHVDpE5pQ==}
    engines: {node: '>=10'}
    peerDependencies:
      react: '>=16'
      react-dom: '>=16'

  react-icons@5.0.1:
    resolution: {integrity: sha512-WqLZJ4bLzlhmsvme6iFdgO8gfZP17rfjYEJ2m9RsZjZ+cc4k1hTzknEz63YS1MeT50kVzoa1Nz36f4BEx+Wigw==}
    peerDependencies:
      react: '*'

  react-remove-scroll-bar@2.3.6:
    resolution: {integrity: sha512-DtSYaao4mBmX+HDo5YWYdBWQwYIQQshUV/dVxFxK+KM26Wjwp1gZ6rv6OC3oujI6Bfu6Xyg3TwK533AQutsn/g==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': ^16.8.0 || ^17.0.0 || ^18.0.0
      react: ^16.8.0 || ^17.0.0 || ^18.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  react-remove-scroll@2.5.5:
    resolution: {integrity: sha512-ImKhrzJJsyXJfBZ4bzu8Bwpka14c/fQt0k+cyFp/PBhTfyDnU5hjOtM4AG/0AMyy8oKzOTR0lDgJIM7pYXI0kw==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': ^16.8.0 || ^17.0.0 || ^18.0.0
      react: ^16.8.0 || ^17.0.0 || ^18.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  react-router-dom@6.22.3:
    resolution: {integrity: sha512-7ZILI7HjcE+p31oQvwbokjk6OA/bnFxrhJ19n82Ex9Ph8fNAq+Hm/7KchpMGlTgWhUxRHMMCut+vEtNpWpowKw==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      react: '>=16.8'
      react-dom: '>=16.8'

  react-router@6.22.3:
    resolution: {integrity: sha512-dr2eb3Mj5zK2YISHK++foM9w4eBnO23eKnZEDs7c880P6oKbrjz/Svg9+nxqtHQK+oMW4OtjZca0RqPglXxguQ==}
    engines: {node: '>=14.0.0'}
    peerDependencies:
      react: '>=16.8'

  react-style-singleton@2.2.1:
    resolution: {integrity: sha512-ZWj0fHEMyWkHzKYUr2Bs/4zU6XLmq9HsgBURm7g5pAVfyn49DgUiNgY2d4lXRlYSiCif9YBGpQleewkcqddc7g==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': ^16.8.0 || ^17.0.0 || ^18.0.0
      react: ^16.8.0 || ^17.0.0 || ^18.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  react@18.2.0:
    resolution: {integrity: sha512-/3IjMdb2L9QbBdWiW5e3P2/npwMBaU9mHCSCUzNln0ZCYbcfTsGbTJrU/kGemdH2IWmB2ioZ+zkxtmq6g09fGQ==}
    engines: {node: '>=0.10.0'}

  read-cache@1.0.0:
    resolution: {integrity: sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==}

  readdirp@3.6.0:
    resolution: {integrity: sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==}
    engines: {node: '>=8.10.0'}

  regenerator-runtime@0.14.1:
    resolution: {integrity: sha512-dYnhHh0nJoMfnkZs6GmmhFknAGRrLznOu5nc9ML+EJxGvrx6H7teuevqVqCuPcPK//3eDrrjQhehXVx9cnkGdw==}

  resolve-from@4.0.0:
    resolution: {integrity: sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==}
    engines: {node: '>=4'}

  resolve@1.22.8:
    resolution: {integrity: sha512-oKWePCxqpd6FlLvGV1VU0x7bkPmmCNolxzjMf4NczoDnQcIWrAF+cPtZn5i6n+RfD2d9i0tzpKnG6Yk168yIyw==}
    hasBin: true

  reusify@1.0.4:
    resolution: {integrity: sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==}
    engines: {iojs: '>=1.0.0', node: '>=0.10.0'}

  rimraf@3.0.2:
    resolution: {integrity: sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==}
    deprecated: Rimraf versions prior to v4 are no longer supported
    hasBin: true

  rollup@4.24.0:
    resolution: {integrity: sha512-DOmrlGSXNk1DM0ljiQA+i+o0rSLhtii1je5wgk60j49d1jHT5YYttBv1iWOnYSTG+fZZESUOSNiAl89SIet+Cg==}
    engines: {node: '>=18.0.0', npm: '>=8.0.0'}
    hasBin: true

  run-parallel@1.2.0:
    resolution: {integrity: sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==}

  scheduler@0.23.0:
    resolution: {integrity: sha512-CtuThmgHNg7zIZWAXi3AsyIzA3n4xx7aNyjwC2VJldO2LMVDhFK+63xGqq6CsJH4rTAt6/M+N4GhZiDYPx9eUw==}

  semver@7.6.0:
    resolution: {integrity: sha512-EnwXhrlwXMk9gKu5/flx5sv/an57AkRplG3hTK68W7FRDN+k+OWBj65M7719OkA82XLBxrcX0KSHj+X5COhOVg==}
    engines: {node: '>=10'}
    hasBin: true

  shebang-command@2.0.0:
    resolution: {integrity: sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==}
    engines: {node: '>=8'}

  shebang-regex@3.0.0:
    resolution: {integrity: sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==}
    engines: {node: '>=8'}

  signal-exit@4.1.0:
    resolution: {integrity: sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==}
    engines: {node: '>=14'}

  slash@3.0.0:
    resolution: {integrity: sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==}
    engines: {node: '>=8'}

  source-map-js@1.2.0:
    resolution: {integrity: sha512-itJW8lvSA0TXEphiRoawsCksnlf8SyvmFzIhltqAHluXd88pkCd+cXJVHTDwdCr0IzwptSm035IHQktUu1QUMg==}
    engines: {node: '>=0.10.0'}

  string-width@4.2.3:
    resolution: {integrity: sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==}
    engines: {node: '>=8'}

  string-width@5.1.2:
    resolution: {integrity: sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==}
    engines: {node: '>=12'}

  strip-ansi@6.0.1:
    resolution: {integrity: sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==}
    engines: {node: '>=8'}

  strip-ansi@7.1.0:
    resolution: {integrity: sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==}
    engines: {node: '>=12'}

  strip-json-comments@3.1.1:
    resolution: {integrity: sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==}
    engines: {node: '>=8'}

  sucrase@3.35.0:
    resolution: {integrity: sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==}
    engines: {node: '>=16 || 14 >=14.17'}
    hasBin: true

  supports-color@7.2.0:
    resolution: {integrity: sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==}
    engines: {node: '>=8'}

  supports-preserve-symlinks-flag@1.0.0:
    resolution: {integrity: sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==}
    engines: {node: '>= 0.4'}

  tailwind-merge@2.2.2:
    resolution: {integrity: sha512-tWANXsnmJzgw6mQ07nE3aCDkCK4QdT3ThPMCzawoYA2Pws7vSTCvz3Vrjg61jVUGfFZPJzxEP+NimbcW+EdaDw==}

  tailwindcss-animate@1.0.7:
    resolution: {integrity: sha512-bl6mpH3T7I3UFxuvDEXLxy/VuFxBk5bbzplh7tXI68mwMokNYd1t9qPBHlnyTwfa4JGC4zP516I1hYYtQ/vspA==}
    peerDependencies:
      tailwindcss: '>=3.0.0 || insiders'

  tailwindcss@3.4.3:
    resolution: {integrity: sha512-U7sxQk/n397Bmx4JHbJx/iSOOv5G+II3f1kpLpY2QeUv5DcPdcTsYLlusZfq1NthHS1c1cZoyFmmkex1rzke0A==}
    engines: {node: '>=14.0.0'}
    hasBin: true

  text-table@0.2.0:
    resolution: {integrity: sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==}

  thenify-all@1.6.0:
    resolution: {integrity: sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==}
    engines: {node: '>=0.8'}

  thenify@3.3.1:
    resolution: {integrity: sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==}

  to-regex-range@5.0.1:
    resolution: {integrity: sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==}
    engines: {node: '>=8.0'}

  ts-api-utils@1.3.0:
    resolution: {integrity: sha512-UQMIo7pb8WRomKR1/+MFVLTroIvDVtMX3K6OUir8ynLyzB8Jeriont2bTAtmNPa1ekAgN7YPDyf6V+ygrdU+eQ==}
    engines: {node: '>=16'}
    peerDependencies:
      typescript: '>=4.2.0'

  ts-interface-checker@0.1.13:
    resolution: {integrity: sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==}

  tslib@2.6.2:
    resolution: {integrity: sha512-AEYxH93jGFPn/a2iVAwW87VuUIkR1FVUKB77NwMF7nBTDkDrrT/Hpt/IrCJ0QXhW27jTBDcf5ZY7w6RiqTMw2Q==}

  type-check@0.4.0:
    resolution: {integrity: sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==}
    engines: {node: '>= 0.8.0'}

  type-fest@0.20.2:
    resolution: {integrity: sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==}
    engines: {node: '>=10'}

  typescript@5.4.5:
    resolution: {integrity: sha512-vcI4UpRgg81oIRUFwR0WSIHKt11nJ7SAVlYNIu+QpqeyXP+gpQJy/Z4+F0aGxSE4MqwjyXvW/TzgkLAx2AGHwQ==}
    engines: {node: '>=14.17'}
    hasBin: true

  undici-types@5.26.5:
    resolution: {integrity: sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA==}

  update-browserslist-db@1.0.13:
    resolution: {integrity: sha512-xebP81SNcPuNpPP3uzeW1NYXxI3rxyJzF3pD6sH4jE7o/IX+WtSpwnVU+qIsDPyk0d3hmFQ7mjqc6AtV604hbg==}
    hasBin: true
    peerDependencies:
      browserslist: '>= 4.21.0'

  uri-js@4.4.1:
    resolution: {integrity: sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==}

  use-callback-ref@1.3.2:
    resolution: {integrity: sha512-elOQwe6Q8gqZgDA8mrh44qRTQqpIHDcZ3hXTLjBe1i4ph8XpNJnO+aQf3NaG+lriLopI4HMx9VjQLfPQ6vhnoA==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': ^16.8.0 || ^17.0.0 || ^18.0.0
      react: ^16.8.0 || ^17.0.0 || ^18.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  use-sidecar@1.1.2:
    resolution: {integrity: sha512-epTbsLuzZ7lPClpz2TyryBfztm7m+28DlEv2ZCQ3MDr5ssiwyOwGH/e5F9CkfWjJ1t4clvI58yF822/GUkjjhw==}
    engines: {node: '>=10'}
    peerDependencies:
      '@types/react': ^16.9.0 || ^17.0.0 || ^18.0.0
      react: ^16.8.0 || ^17.0.0 || ^18.0.0
    peerDependenciesMeta:
      '@types/react':
        optional: true

  util-deprecate@1.0.2:
    resolution: {integrity: sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==}

  vaul@0.9.0:
    resolution: {integrity: sha512-bZSySGbAHiTXmZychprnX/dE0EsSige88xtyyL3/MCRbrFotRPQZo7UdydGXZWw+CKbNOw5Ow8gwAo93/nB/Cg==}
    peerDependencies:
      react: ^16.8 || ^17.0 || ^18.0
      react-dom: ^16.8 || ^17.0 || ^18.0

  vite@5.2.14:
    resolution: {integrity: sha512-TFQLuwWLPms+NBNlh0D9LZQ+HXW471COABxw/9TEUBrjuHMo9BrYBPrN/SYAwIuVL+rLerycxiLT41t4f5MZpA==}
    engines: {node: ^18.0.0 || >=20.0.0}
    hasBin: true
    peerDependencies:
      '@types/node': ^18.0.0 || >=20.0.0
      less: '*'
      lightningcss: ^1.21.0
      sass: '*'
      stylus: '*'
      sugarss: '*'
      terser: ^5.4.0
    peerDependenciesMeta:
      '@types/node':
        optional: true
      less:
        optional: true
      lightningcss:
        optional: true
      sass:
        optional: true
      stylus:
        optional: true
      sugarss:
        optional: true
      terser:
        optional: true

  which@2.0.2:
    resolution: {integrity: sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==}
    engines: {node: '>= 8'}
    hasBin: true

  wrap-ansi@7.0.0:
    resolution: {integrity: sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==}
    engines: {node: '>=10'}

  wrap-ansi@8.1.0:
    resolution: {integrity: sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==}
    engines: {node: '>=12'}

  wrappy@1.0.2:
    resolution: {integrity: sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==}

  yallist@4.0.0:
    resolution: {integrity: sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==}

  yaml@2.4.1:
    resolution: {integrity: sha512-pIXzoImaqmfOrL7teGUBt/T7ZDnyeGBWyXQBvOVhLkWLN37GXv8NMLK406UY6dS51JfcQHsmcW5cJ441bHg6Lg==}
    engines: {node: '>= 14'}
    hasBin: true

  yocto-queue@0.1.0:
    resolution: {integrity: sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==}
    engines: {node: '>=10'}

snapshots:

  '@aashutoshrathi/word-wrap@1.2.6': {}

  '@alloc/quick-lru@5.2.0': {}

  '@babel/runtime@7.24.4':
    dependencies:
      regenerator-runtime: 0.14.1

  '@esbuild/aix-ppc64@0.20.2':
    optional: true

  '@esbuild/android-arm64@0.20.2':
    optional: true

  '@esbuild/android-arm@0.20.2':
    optional: true

  '@esbuild/android-x64@0.20.2':
    optional: true

  '@esbuild/darwin-arm64@0.20.2':
    optional: true

  '@esbuild/darwin-x64@0.20.2':
    optional: true

  '@esbuild/freebsd-arm64@0.20.2':
    optional: true

  '@esbuild/freebsd-x64@0.20.2':
    optional: true

  '@esbuild/linux-arm64@0.20.2':
    optional: true

  '@esbuild/linux-arm@0.20.2':
    optional: true

  '@esbuild/linux-ia32@0.20.2':
    optional: true

  '@esbuild/linux-loong64@0.20.2':
    optional: true

  '@esbuild/linux-mips64el@0.20.2':
    optional: true

  '@esbuild/linux-ppc64@0.20.2':
    optional: true

  '@esbuild/linux-riscv64@0.20.2':
    optional: true

  '@esbuild/linux-s390x@0.20.2':
    optional: true

  '@esbuild/linux-x64@0.20.2':
    optional: true

  '@esbuild/netbsd-x64@0.20.2':
    optional: true

  '@esbuild/openbsd-x64@0.20.2':
    optional: true

  '@esbuild/sunos-x64@0.20.2':
    optional: true

  '@esbuild/win32-arm64@0.20.2':
    optional: true

  '@esbuild/win32-ia32@0.20.2':
    optional: true

  '@esbuild/win32-x64@0.20.2':
    optional: true

  '@eslint-community/eslint-utils@4.4.0(eslint@8.57.0)':
    dependencies:
      eslint: 8.57.0
      eslint-visitor-keys: 3.4.3

  '@eslint-community/regexpp@4.10.0': {}

  '@eslint/eslintrc@2.1.4':
    dependencies:
      ajv: 6.12.6
      debug: 4.3.4
      espree: 9.6.1
      globals: 13.24.0
      ignore: 5.3.1
      import-fresh: 3.3.0
      js-yaml: 4.1.0
      minimatch: 3.1.2
      strip-json-comments: 3.1.1
    transitivePeerDependencies:
      - supports-color

  '@eslint/js@8.57.0': {}

  '@floating-ui/core@1.6.0':
    dependencies:
      '@floating-ui/utils': 0.2.1

  '@floating-ui/dom@1.6.3':
    dependencies:
      '@floating-ui/core': 1.6.0
      '@floating-ui/utils': 0.2.1

  '@floating-ui/react-dom@2.0.8(react-dom@18.2.0(react@18.2.0))(react@18.2.0)':
    dependencies:
      '@floating-ui/dom': 1.6.3
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)

  '@floating-ui/utils@0.2.1': {}

  '@humanwhocodes/config-array@0.11.14':
    dependencies:
      '@humanwhocodes/object-schema': 2.0.3
      debug: 4.3.4
      minimatch: 3.1.2
    transitivePeerDependencies:
      - supports-color

  '@humanwhocodes/module-importer@1.0.1': {}

  '@humanwhocodes/object-schema@2.0.3': {}

  '@isaacs/cliui@8.0.2':
    dependencies:
      string-width: 5.1.2
      string-width-cjs: string-width@4.2.3
      strip-ansi: 7.1.0
      strip-ansi-cjs: strip-ansi@6.0.1
      wrap-ansi: 8.1.0
      wrap-ansi-cjs: wrap-ansi@7.0.0

  '@jridgewell/gen-mapping@0.3.5':
    dependencies:
      '@jridgewell/set-array': 1.2.1
      '@jridgewell/sourcemap-codec': 1.4.15
      '@jridgewell/trace-mapping': 0.3.25

  '@jridgewell/resolve-uri@3.1.2': {}

  '@jridgewell/set-array@1.2.1': {}

  '@jridgewell/sourcemap-codec@1.4.15': {}

  '@jridgewell/trace-mapping@0.3.25':
    dependencies:
      '@jridgewell/resolve-uri': 3.1.2
      '@jridgewell/sourcemap-codec': 1.4.15

  '@kurkle/color@0.3.2': {}

  '@nodelib/fs.scandir@2.1.5':
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      run-parallel: 1.2.0

  '@nodelib/fs.stat@2.0.5': {}

  '@nodelib/fs.walk@1.2.8':
    dependencies:
      '@nodelib/fs.scandir': 2.1.5
      fastq: 1.17.1

  '@pkgjs/parseargs@0.11.0':
    optional: true

  '@radix-ui/number@1.0.1':
    dependencies:
      '@babel/runtime': 7.24.4

  '@radix-ui/primitive@1.0.1':
    dependencies:
      '@babel/runtime': 7.24.4

  '@radix-ui/react-alert-dialog@1.0.5(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/primitive': 1.0.1
      '@radix-ui/react-compose-refs': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-context': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-dialog': 1.0.5(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-primitive': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-slot': 1.0.2(@types/react@18.2.78)(react@18.2.0)
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
    optionalDependencies:
      '@types/react': 18.2.78
      '@types/react-dom': 18.2.25

  '@radix-ui/react-arrow@1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/react-primitive': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
    optionalDependencies:
      '@types/react': 18.2.78
      '@types/react-dom': 18.2.25

  '@radix-ui/react-avatar@1.0.4(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/react-context': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-primitive': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-use-callback-ref': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-use-layout-effect': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
    optionalDependencies:
      '@types/react': 18.2.78
      '@types/react-dom': 18.2.25

  '@radix-ui/react-checkbox@1.0.4(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/primitive': 1.0.1
      '@radix-ui/react-compose-refs': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-context': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-presence': 1.0.1(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-primitive': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-use-controllable-state': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-use-previous': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-use-size': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
    optionalDependencies:
      '@types/react': 18.2.78
      '@types/react-dom': 18.2.25

  '@radix-ui/react-collection@1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/react-compose-refs': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-context': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-primitive': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-slot': 1.0.2(@types/react@18.2.78)(react@18.2.0)
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
    optionalDependencies:
      '@types/react': 18.2.78
      '@types/react-dom': 18.2.25

  '@radix-ui/react-compose-refs@1.0.1(@types/react@18.2.78)(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      react: 18.2.0
    optionalDependencies:
      '@types/react': 18.2.78

  '@radix-ui/react-context@1.0.1(@types/react@18.2.78)(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      react: 18.2.0
    optionalDependencies:
      '@types/react': 18.2.78

  '@radix-ui/react-dialog@1.0.5(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/primitive': 1.0.1
      '@radix-ui/react-compose-refs': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-context': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-dismissable-layer': 1.0.5(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-focus-guards': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-focus-scope': 1.0.4(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-id': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-portal': 1.0.4(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-presence': 1.0.1(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-primitive': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-slot': 1.0.2(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-use-controllable-state': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      aria-hidden: 1.2.4
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
      react-remove-scroll: 2.5.5(@types/react@18.2.78)(react@18.2.0)
    optionalDependencies:
      '@types/react': 18.2.78
      '@types/react-dom': 18.2.25

  '@radix-ui/react-direction@1.0.1(@types/react@18.2.78)(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      react: 18.2.0
    optionalDependencies:
      '@types/react': 18.2.78

  '@radix-ui/react-dismissable-layer@1.0.5(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/primitive': 1.0.1
      '@radix-ui/react-compose-refs': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-primitive': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-use-callback-ref': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-use-escape-keydown': 1.0.3(@types/react@18.2.78)(react@18.2.0)
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
    optionalDependencies:
      '@types/react': 18.2.78
      '@types/react-dom': 18.2.25

  '@radix-ui/react-dropdown-menu@2.0.6(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/primitive': 1.0.1
      '@radix-ui/react-compose-refs': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-context': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-id': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-menu': 2.0.6(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-primitive': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-use-controllable-state': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
    optionalDependencies:
      '@types/react': 18.2.78
      '@types/react-dom': 18.2.25

  '@radix-ui/react-focus-guards@1.0.1(@types/react@18.2.78)(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      react: 18.2.0
    optionalDependencies:
      '@types/react': 18.2.78

  '@radix-ui/react-focus-scope@1.0.4(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/react-compose-refs': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-primitive': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-use-callback-ref': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
    optionalDependencies:
      '@types/react': 18.2.78
      '@types/react-dom': 18.2.25

  '@radix-ui/react-hover-card@1.0.7(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/primitive': 1.0.1
      '@radix-ui/react-compose-refs': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-context': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-dismissable-layer': 1.0.5(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-popper': 1.1.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-portal': 1.0.4(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-presence': 1.0.1(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-primitive': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-use-controllable-state': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
    optionalDependencies:
      '@types/react': 18.2.78
      '@types/react-dom': 18.2.25

  '@radix-ui/react-icons@1.3.0(react@18.2.0)':
    dependencies:
      react: 18.2.0

  '@radix-ui/react-id@1.0.1(@types/react@18.2.78)(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/react-use-layout-effect': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      react: 18.2.0
    optionalDependencies:
      '@types/react': 18.2.78

  '@radix-ui/react-label@2.0.2(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/react-primitive': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
    optionalDependencies:
      '@types/react': 18.2.78
      '@types/react-dom': 18.2.25

  '@radix-ui/react-menu@2.0.6(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/primitive': 1.0.1
      '@radix-ui/react-collection': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-compose-refs': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-context': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-direction': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-dismissable-layer': 1.0.5(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-focus-guards': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-focus-scope': 1.0.4(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-id': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-popper': 1.1.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-portal': 1.0.4(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-presence': 1.0.1(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-primitive': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-roving-focus': 1.0.4(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-slot': 1.0.2(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-use-callback-ref': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      aria-hidden: 1.2.4
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
      react-remove-scroll: 2.5.5(@types/react@18.2.78)(react@18.2.0)
    optionalDependencies:
      '@types/react': 18.2.78
      '@types/react-dom': 18.2.25

  '@radix-ui/react-popover@1.0.7(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/primitive': 1.0.1
      '@radix-ui/react-compose-refs': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-context': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-dismissable-layer': 1.0.5(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-focus-guards': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-focus-scope': 1.0.4(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-id': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-popper': 1.1.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-portal': 1.0.4(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-presence': 1.0.1(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-primitive': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-slot': 1.0.2(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-use-controllable-state': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      aria-hidden: 1.2.4
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
      react-remove-scroll: 2.5.5(@types/react@18.2.78)(react@18.2.0)
    optionalDependencies:
      '@types/react': 18.2.78
      '@types/react-dom': 18.2.25

  '@radix-ui/react-popper@1.1.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@floating-ui/react-dom': 2.0.8(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-arrow': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-compose-refs': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-context': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-primitive': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-use-callback-ref': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-use-layout-effect': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-use-rect': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-use-size': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/rect': 1.0.1
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
    optionalDependencies:
      '@types/react': 18.2.78
      '@types/react-dom': 18.2.25

  '@radix-ui/react-portal@1.0.4(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/react-primitive': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
    optionalDependencies:
      '@types/react': 18.2.78
      '@types/react-dom': 18.2.25

  '@radix-ui/react-presence@1.0.1(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/react-compose-refs': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-use-layout-effect': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
    optionalDependencies:
      '@types/react': 18.2.78
      '@types/react-dom': 18.2.25

  '@radix-ui/react-primitive@1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/react-slot': 1.0.2(@types/react@18.2.78)(react@18.2.0)
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
    optionalDependencies:
      '@types/react': 18.2.78
      '@types/react-dom': 18.2.25

  '@radix-ui/react-progress@1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/react-context': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-primitive': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
    optionalDependencies:
      '@types/react': 18.2.78
      '@types/react-dom': 18.2.25

  '@radix-ui/react-roving-focus@1.0.4(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/primitive': 1.0.1
      '@radix-ui/react-collection': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-compose-refs': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-context': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-direction': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-id': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-primitive': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-use-callback-ref': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-use-controllable-state': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
    optionalDependencies:
      '@types/react': 18.2.78
      '@types/react-dom': 18.2.25

  '@radix-ui/react-scroll-area@1.0.5(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/number': 1.0.1
      '@radix-ui/primitive': 1.0.1
      '@radix-ui/react-compose-refs': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-context': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-direction': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-presence': 1.0.1(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-primitive': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-use-callback-ref': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-use-layout-effect': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
    optionalDependencies:
      '@types/react': 18.2.78
      '@types/react-dom': 18.2.25

  '@radix-ui/react-select@2.0.0(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/number': 1.0.1
      '@radix-ui/primitive': 1.0.1
      '@radix-ui/react-collection': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-compose-refs': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-context': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-direction': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-dismissable-layer': 1.0.5(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-focus-guards': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-focus-scope': 1.0.4(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-id': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-popper': 1.1.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-portal': 1.0.4(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-primitive': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-slot': 1.0.2(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-use-callback-ref': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-use-controllable-state': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-use-layout-effect': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-use-previous': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-visually-hidden': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      aria-hidden: 1.2.4
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
      react-remove-scroll: 2.5.5(@types/react@18.2.78)(react@18.2.0)
    optionalDependencies:
      '@types/react': 18.2.78
      '@types/react-dom': 18.2.25

  '@radix-ui/react-slot@1.0.2(@types/react@18.2.78)(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/react-compose-refs': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      react: 18.2.0
    optionalDependencies:
      '@types/react': 18.2.78

  '@radix-ui/react-tabs@1.0.4(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/primitive': 1.0.1
      '@radix-ui/react-context': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-direction': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-id': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-presence': 1.0.1(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-primitive': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-roving-focus': 1.0.4(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-use-controllable-state': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
    optionalDependencies:
      '@types/react': 18.2.78
      '@types/react-dom': 18.2.25

  '@radix-ui/react-toast@1.1.5(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/primitive': 1.0.1
      '@radix-ui/react-collection': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-compose-refs': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-context': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-dismissable-layer': 1.0.5(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-portal': 1.0.4(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-presence': 1.0.1(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-primitive': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-use-callback-ref': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-use-controllable-state': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-use-layout-effect': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      '@radix-ui/react-visually-hidden': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
    optionalDependencies:
      '@types/react': 18.2.78
      '@types/react-dom': 18.2.25

  '@radix-ui/react-use-callback-ref@1.0.1(@types/react@18.2.78)(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      react: 18.2.0
    optionalDependencies:
      '@types/react': 18.2.78

  '@radix-ui/react-use-controllable-state@1.0.1(@types/react@18.2.78)(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/react-use-callback-ref': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      react: 18.2.0
    optionalDependencies:
      '@types/react': 18.2.78

  '@radix-ui/react-use-escape-keydown@1.0.3(@types/react@18.2.78)(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/react-use-callback-ref': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      react: 18.2.0
    optionalDependencies:
      '@types/react': 18.2.78

  '@radix-ui/react-use-layout-effect@1.0.1(@types/react@18.2.78)(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      react: 18.2.0
    optionalDependencies:
      '@types/react': 18.2.78

  '@radix-ui/react-use-previous@1.0.1(@types/react@18.2.78)(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      react: 18.2.0
    optionalDependencies:
      '@types/react': 18.2.78

  '@radix-ui/react-use-rect@1.0.1(@types/react@18.2.78)(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/rect': 1.0.1
      react: 18.2.0
    optionalDependencies:
      '@types/react': 18.2.78

  '@radix-ui/react-use-size@1.0.1(@types/react@18.2.78)(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/react-use-layout-effect': 1.0.1(@types/react@18.2.78)(react@18.2.0)
      react: 18.2.0
    optionalDependencies:
      '@types/react': 18.2.78

  '@radix-ui/react-visually-hidden@1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)':
    dependencies:
      '@babel/runtime': 7.24.4
      '@radix-ui/react-primitive': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
    optionalDependencies:
      '@types/react': 18.2.78
      '@types/react-dom': 18.2.25

  '@radix-ui/rect@1.0.1':
    dependencies:
      '@babel/runtime': 7.24.4

  '@remix-run/router@1.15.3': {}

  '@rollup/rollup-android-arm-eabi@4.24.0':
    optional: true

  '@rollup/rollup-android-arm64@4.24.0':
    optional: true

  '@rollup/rollup-darwin-arm64@4.24.0':
    optional: true

  '@rollup/rollup-darwin-x64@4.24.0':
    optional: true

  '@rollup/rollup-linux-arm-gnueabihf@4.24.0':
    optional: true

  '@rollup/rollup-linux-arm-musleabihf@4.24.0':
    optional: true

  '@rollup/rollup-linux-arm64-gnu@4.24.0':
    optional: true

  '@rollup/rollup-linux-arm64-musl@4.24.0':
    optional: true

  '@rollup/rollup-linux-powerpc64le-gnu@4.24.0':
    optional: true

  '@rollup/rollup-linux-riscv64-gnu@4.24.0':
    optional: true

  '@rollup/rollup-linux-s390x-gnu@4.24.0':
    optional: true

  '@rollup/rollup-linux-x64-gnu@4.24.0':
    optional: true

  '@rollup/rollup-linux-x64-musl@4.24.0':
    optional: true

  '@rollup/rollup-win32-arm64-msvc@4.24.0':
    optional: true

  '@rollup/rollup-win32-ia32-msvc@4.24.0':
    optional: true

  '@rollup/rollup-win32-x64-msvc@4.24.0':
    optional: true

  '@swc/core-darwin-arm64@1.4.13':
    optional: true

  '@swc/core-darwin-x64@1.4.13':
    optional: true

  '@swc/core-linux-arm-gnueabihf@1.4.13':
    optional: true

  '@swc/core-linux-arm64-gnu@1.4.13':
    optional: true

  '@swc/core-linux-arm64-musl@1.4.13':
    optional: true

  '@swc/core-linux-x64-gnu@1.4.13':
    optional: true

  '@swc/core-linux-x64-musl@1.4.13':
    optional: true

  '@swc/core-win32-arm64-msvc@1.4.13':
    optional: true

  '@swc/core-win32-ia32-msvc@1.4.13':
    optional: true

  '@swc/core-win32-x64-msvc@1.4.13':
    optional: true

  '@swc/core@1.4.13':
    dependencies:
      '@swc/counter': 0.1.3
      '@swc/types': 0.1.6
    optionalDependencies:
      '@swc/core-darwin-arm64': 1.4.13
      '@swc/core-darwin-x64': 1.4.13
      '@swc/core-linux-arm-gnueabihf': 1.4.13
      '@swc/core-linux-arm64-gnu': 1.4.13
      '@swc/core-linux-arm64-musl': 1.4.13
      '@swc/core-linux-x64-gnu': 1.4.13
      '@swc/core-linux-x64-musl': 1.4.13
      '@swc/core-win32-arm64-msvc': 1.4.13
      '@swc/core-win32-ia32-msvc': 1.4.13
      '@swc/core-win32-x64-msvc': 1.4.13

  '@swc/counter@0.1.3': {}

  '@swc/types@0.1.6':
    dependencies:
      '@swc/counter': 0.1.3

  '@tanstack/eslint-plugin-query@5.28.11(eslint@8.57.0)(typescript@5.4.5)':
    dependencies:
      '@typescript-eslint/utils': 6.21.0(eslint@8.57.0)(typescript@5.4.5)
      eslint: 8.57.0
    transitivePeerDependencies:
      - supports-color
      - typescript

  '@tanstack/query-core@5.29.0': {}

  '@tanstack/query-devtools@5.28.10': {}

  '@tanstack/react-query-devtools@5.29.2(@tanstack/react-query@5.29.2(react@18.2.0))(react@18.2.0)':
    dependencies:
      '@tanstack/query-devtools': 5.28.10
      '@tanstack/react-query': 5.29.2(react@18.2.0)
      react: 18.2.0

  '@tanstack/react-query@5.29.2(react@18.2.0)':
    dependencies:
      '@tanstack/query-core': 5.29.0
      react: 18.2.0

  '@types/estree@1.0.6': {}

  '@types/history@4.7.11': {}

  '@types/json-schema@7.0.15': {}

  '@types/node@20.12.7':
    dependencies:
      undici-types: 5.26.5

  '@types/prop-types@15.7.12': {}

  '@types/react-dom@18.2.25':
    dependencies:
      '@types/react': 18.2.78

  '@types/react-router-dom@5.3.3':
    dependencies:
      '@types/history': 4.7.11
      '@types/react': 18.2.78
      '@types/react-router': 5.1.20

  '@types/react-router@5.1.20':
    dependencies:
      '@types/history': 4.7.11
      '@types/react': 18.2.78

  '@types/react@18.2.78':
    dependencies:
      '@types/prop-types': 15.7.12
      csstype: 3.1.3

  '@types/semver@7.5.8': {}

  '@typescript-eslint/eslint-plugin@6.21.0(@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.4.5))(eslint@8.57.0)(typescript@5.4.5)':
    dependencies:
      '@eslint-community/regexpp': 4.10.0
      '@typescript-eslint/parser': 6.21.0(eslint@8.57.0)(typescript@5.4.5)
      '@typescript-eslint/scope-manager': 6.21.0
      '@typescript-eslint/type-utils': 6.21.0(eslint@8.57.0)(typescript@5.4.5)
      '@typescript-eslint/utils': 6.21.0(eslint@8.57.0)(typescript@5.4.5)
      '@typescript-eslint/visitor-keys': 6.21.0
      debug: 4.3.4
      eslint: 8.57.0
      graphemer: 1.4.0
      ignore: 5.3.1
      natural-compare: 1.4.0
      semver: 7.6.0
      ts-api-utils: 1.3.0(typescript@5.4.5)
    optionalDependencies:
      typescript: 5.4.5
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/parser@6.21.0(eslint@8.57.0)(typescript@5.4.5)':
    dependencies:
      '@typescript-eslint/scope-manager': 6.21.0
      '@typescript-eslint/types': 6.21.0
      '@typescript-eslint/typescript-estree': 6.21.0(typescript@5.4.5)
      '@typescript-eslint/visitor-keys': 6.21.0
      debug: 4.3.4
      eslint: 8.57.0
    optionalDependencies:
      typescript: 5.4.5
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/scope-manager@6.21.0':
    dependencies:
      '@typescript-eslint/types': 6.21.0
      '@typescript-eslint/visitor-keys': 6.21.0

  '@typescript-eslint/type-utils@6.21.0(eslint@8.57.0)(typescript@5.4.5)':
    dependencies:
      '@typescript-eslint/typescript-estree': 6.21.0(typescript@5.4.5)
      '@typescript-eslint/utils': 6.21.0(eslint@8.57.0)(typescript@5.4.5)
      debug: 4.3.4
      eslint: 8.57.0
      ts-api-utils: 1.3.0(typescript@5.4.5)
    optionalDependencies:
      typescript: 5.4.5
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/types@6.21.0': {}

  '@typescript-eslint/typescript-estree@6.21.0(typescript@5.4.5)':
    dependencies:
      '@typescript-eslint/types': 6.21.0
      '@typescript-eslint/visitor-keys': 6.21.0
      debug: 4.3.4
      globby: 11.1.0
      is-glob: 4.0.3
      minimatch: 9.0.3
      semver: 7.6.0
      ts-api-utils: 1.3.0(typescript@5.4.5)
    optionalDependencies:
      typescript: 5.4.5
    transitivePeerDependencies:
      - supports-color

  '@typescript-eslint/utils@6.21.0(eslint@8.57.0)(typescript@5.4.5)':
    dependencies:
      '@eslint-community/eslint-utils': 4.4.0(eslint@8.57.0)
      '@types/json-schema': 7.0.15
      '@types/semver': 7.5.8
      '@typescript-eslint/scope-manager': 6.21.0
      '@typescript-eslint/types': 6.21.0
      '@typescript-eslint/typescript-estree': 6.21.0(typescript@5.4.5)
      eslint: 8.57.0
      semver: 7.6.0
    transitivePeerDependencies:
      - supports-color
      - typescript

  '@typescript-eslint/visitor-keys@6.21.0':
    dependencies:
      '@typescript-eslint/types': 6.21.0
      eslint-visitor-keys: 3.4.3

  '@ungap/structured-clone@1.2.0': {}

  '@vitejs/plugin-react-swc@3.6.0(vite@5.2.14(@types/node@20.12.7))':
    dependencies:
      '@swc/core': 1.4.13
      vite: 5.2.14(@types/node@20.12.7)
    transitivePeerDependencies:
      - '@swc/helpers'

  acorn-jsx@5.3.2(acorn@8.11.3):
    dependencies:
      acorn: 8.11.3

  acorn@8.11.3: {}

  ajv@6.12.6:
    dependencies:
      fast-deep-equal: 3.1.3
      fast-json-stable-stringify: 2.1.0
      json-schema-traverse: 0.4.1
      uri-js: 4.4.1

  ansi-regex@5.0.1: {}

  ansi-regex@6.0.1: {}

  ansi-styles@4.3.0:
    dependencies:
      color-convert: 2.0.1

  ansi-styles@6.2.1: {}

  any-promise@1.3.0: {}

  anymatch@3.1.3:
    dependencies:
      normalize-path: 3.0.0
      picomatch: 2.3.1

  arg@5.0.2: {}

  argparse@2.0.1: {}

  aria-hidden@1.2.4:
    dependencies:
      tslib: 2.6.2

  array-union@2.1.0: {}

  asynckit@0.4.0: {}

  autoprefixer@10.4.19(postcss@8.4.38):
    dependencies:
      browserslist: 4.23.0
      caniuse-lite: 1.0.30001609
      fraction.js: 4.3.7
      normalize-range: 0.1.2
      picocolors: 1.0.0
      postcss: 8.4.38
      postcss-value-parser: 4.2.0

  axios@1.7.4:
    dependencies:
      follow-redirects: 1.15.6
      form-data: 4.0.0
      proxy-from-env: 1.1.0
    transitivePeerDependencies:
      - debug

  balanced-match@1.0.2: {}

  binary-extensions@2.3.0: {}

  brace-expansion@1.1.11:
    dependencies:
      balanced-match: 1.0.2
      concat-map: 0.0.1

  brace-expansion@2.0.1:
    dependencies:
      balanced-match: 1.0.2

  braces@3.0.3:
    dependencies:
      fill-range: 7.1.1

  browserslist@4.23.0:
    dependencies:
      caniuse-lite: 1.0.30001609
      electron-to-chromium: 1.4.736
      node-releases: 2.0.14
      update-browserslist-db: 1.0.13(browserslist@4.23.0)

  callsites@3.1.0: {}

  camelcase-css@2.0.1: {}

  caniuse-lite@1.0.30001609: {}

  chalk@4.1.2:
    dependencies:
      ansi-styles: 4.3.0
      supports-color: 7.2.0

  chart.js@4.4.2:
    dependencies:
      '@kurkle/color': 0.3.2

  chokidar@3.6.0:
    dependencies:
      anymatch: 3.1.3
      braces: 3.0.3
      glob-parent: 5.1.2
      is-binary-path: 2.1.0
      is-glob: 4.0.3
      normalize-path: 3.0.0
      readdirp: 3.6.0
    optionalDependencies:
      fsevents: 2.3.3

  class-variance-authority@0.7.0:
    dependencies:
      clsx: 2.0.0

  clsx@2.0.0: {}

  clsx@2.1.0: {}

  cmdk@1.0.0(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0):
    dependencies:
      '@radix-ui/react-dialog': 1.0.5(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      '@radix-ui/react-primitive': 1.0.3(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
    transitivePeerDependencies:
      - '@types/react'
      - '@types/react-dom'

  color-convert@2.0.1:
    dependencies:
      color-name: 1.1.4

  color-name@1.1.4: {}

  combined-stream@1.0.8:
    dependencies:
      delayed-stream: 1.0.0

  commander@4.1.1: {}

  concat-map@0.0.1: {}

  cross-spawn@7.0.6:
    dependencies:
      path-key: 3.1.1
      shebang-command: 2.0.0
      which: 2.0.2

  cssesc@3.0.0: {}

  csstype@3.1.3: {}

  date-fns@3.6.0: {}

  debug@4.3.4:
    dependencies:
      ms: 2.1.2

  deeks@3.1.0: {}

  deep-is@0.1.4: {}

  delayed-stream@1.0.0: {}

  detect-node-es@1.1.0: {}

  didyoumean@1.2.2: {}

  dir-glob@3.0.1:
    dependencies:
      path-type: 4.0.0

  dlv@1.1.3: {}

  doc-path@4.1.1: {}

  doctrine@3.0.0:
    dependencies:
      esutils: 2.0.3

  eastasianwidth@0.2.0: {}

  electron-to-chromium@1.4.736: {}

  emoji-regex@8.0.0: {}

  emoji-regex@9.2.2: {}

  esbuild@0.20.2:
    optionalDependencies:
      '@esbuild/aix-ppc64': 0.20.2
      '@esbuild/android-arm': 0.20.2
      '@esbuild/android-arm64': 0.20.2
      '@esbuild/android-x64': 0.20.2
      '@esbuild/darwin-arm64': 0.20.2
      '@esbuild/darwin-x64': 0.20.2
      '@esbuild/freebsd-arm64': 0.20.2
      '@esbuild/freebsd-x64': 0.20.2
      '@esbuild/linux-arm': 0.20.2
      '@esbuild/linux-arm64': 0.20.2
      '@esbuild/linux-ia32': 0.20.2
      '@esbuild/linux-loong64': 0.20.2
      '@esbuild/linux-mips64el': 0.20.2
      '@esbuild/linux-ppc64': 0.20.2
      '@esbuild/linux-riscv64': 0.20.2
      '@esbuild/linux-s390x': 0.20.2
      '@esbuild/linux-x64': 0.20.2
      '@esbuild/netbsd-x64': 0.20.2
      '@esbuild/openbsd-x64': 0.20.2
      '@esbuild/sunos-x64': 0.20.2
      '@esbuild/win32-arm64': 0.20.2
      '@esbuild/win32-ia32': 0.20.2
      '@esbuild/win32-x64': 0.20.2

  escalade@3.1.2: {}

  escape-string-regexp@4.0.0: {}

  eslint-plugin-react-hooks@4.6.0(eslint@8.57.0):
    dependencies:
      eslint: 8.57.0

  eslint-plugin-react-refresh@0.4.6(eslint@8.57.0):
    dependencies:
      eslint: 8.57.0

  eslint-scope@7.2.2:
    dependencies:
      esrecurse: 4.3.0
      estraverse: 5.3.0

  eslint-visitor-keys@3.4.3: {}

  eslint@8.57.0:
    dependencies:
      '@eslint-community/eslint-utils': 4.4.0(eslint@8.57.0)
      '@eslint-community/regexpp': 4.10.0
      '@eslint/eslintrc': 2.1.4
      '@eslint/js': 8.57.0
      '@humanwhocodes/config-array': 0.11.14
      '@humanwhocodes/module-importer': 1.0.1
      '@nodelib/fs.walk': 1.2.8
      '@ungap/structured-clone': 1.2.0
      ajv: 6.12.6
      chalk: 4.1.2
      cross-spawn: 7.0.6
      debug: 4.3.4
      doctrine: 3.0.0
      escape-string-regexp: 4.0.0
      eslint-scope: 7.2.2
      eslint-visitor-keys: 3.4.3
      espree: 9.6.1
      esquery: 1.5.0
      esutils: 2.0.3
      fast-deep-equal: 3.1.3
      file-entry-cache: 6.0.1
      find-up: 5.0.0
      glob-parent: 6.0.2
      globals: 13.24.0
      graphemer: 1.4.0
      ignore: 5.3.1
      imurmurhash: 0.1.4
      is-glob: 4.0.3
      is-path-inside: 3.0.3
      js-yaml: 4.1.0
      json-stable-stringify-without-jsonify: 1.0.1
      levn: 0.4.1
      lodash.merge: 4.6.2
      minimatch: 3.1.2
      natural-compare: 1.4.0
      optionator: 0.9.3
      strip-ansi: 6.0.1
      text-table: 0.2.0
    transitivePeerDependencies:
      - supports-color

  espree@9.6.1:
    dependencies:
      acorn: 8.11.3
      acorn-jsx: 5.3.2(acorn@8.11.3)
      eslint-visitor-keys: 3.4.3

  esquery@1.5.0:
    dependencies:
      estraverse: 5.3.0

  esrecurse@4.3.0:
    dependencies:
      estraverse: 5.3.0

  estraverse@5.3.0: {}

  esutils@2.0.3: {}

  fast-deep-equal@3.1.3: {}

  fast-glob@3.3.2:
    dependencies:
      '@nodelib/fs.stat': 2.0.5
      '@nodelib/fs.walk': 1.2.8
      glob-parent: 5.1.2
      merge2: 1.4.1
      micromatch: 4.0.8

  fast-json-stable-stringify@2.1.0: {}

  fast-levenshtein@2.0.6: {}

  fastq@1.17.1:
    dependencies:
      reusify: 1.0.4

  file-entry-cache@6.0.1:
    dependencies:
      flat-cache: 3.2.0

  fill-range@7.1.1:
    dependencies:
      to-regex-range: 5.0.1

  find-up@5.0.0:
    dependencies:
      locate-path: 6.0.0
      path-exists: 4.0.0

  flat-cache@3.2.0:
    dependencies:
      flatted: 3.3.1
      keyv: 4.5.4
      rimraf: 3.0.2

  flatted@3.3.1: {}

  follow-redirects@1.15.6: {}

  foreground-child@3.1.1:
    dependencies:
      cross-spawn: 7.0.6
      signal-exit: 4.1.0

  form-data@4.0.0:
    dependencies:
      asynckit: 0.4.0
      combined-stream: 1.0.8
      mime-types: 2.1.35

  fraction.js@4.3.7: {}

  fs.realpath@1.0.0: {}

  fsevents@2.3.3:
    optional: true

  function-bind@1.1.2: {}

  get-nonce@1.0.1: {}

  glob-parent@5.1.2:
    dependencies:
      is-glob: 4.0.3

  glob-parent@6.0.2:
    dependencies:
      is-glob: 4.0.3

  glob@10.3.12:
    dependencies:
      foreground-child: 3.1.1
      jackspeak: 2.3.6
      minimatch: 9.0.4
      minipass: 7.0.4
      path-scurry: 1.10.2

  glob@7.2.3:
    dependencies:
      fs.realpath: 1.0.0
      inflight: 1.0.6
      inherits: 2.0.4
      minimatch: 3.1.2
      once: 1.4.0
      path-is-absolute: 1.0.1

  globals@13.24.0:
    dependencies:
      type-fest: 0.20.2

  globby@11.1.0:
    dependencies:
      array-union: 2.1.0
      dir-glob: 3.0.1
      fast-glob: 3.3.2
      ignore: 5.3.1
      merge2: 1.4.1
      slash: 3.0.0

  goober@2.1.14(csstype@3.1.3):
    dependencies:
      csstype: 3.1.3

  graphemer@1.4.0: {}

  has-flag@4.0.0: {}

  hasown@2.0.2:
    dependencies:
      function-bind: 1.1.2

  ignore@5.3.1: {}

  import-fresh@3.3.0:
    dependencies:
      parent-module: 1.0.1
      resolve-from: 4.0.0

  imurmurhash@0.1.4: {}

  inflight@1.0.6:
    dependencies:
      once: 1.4.0
      wrappy: 1.0.2

  inherits@2.0.4: {}

  invariant@2.2.4:
    dependencies:
      loose-envify: 1.4.0

  is-binary-path@2.1.0:
    dependencies:
      binary-extensions: 2.3.0

  is-core-module@2.13.1:
    dependencies:
      hasown: 2.0.2

  is-extglob@2.1.1: {}

  is-fullwidth-code-point@3.0.0: {}

  is-glob@4.0.3:
    dependencies:
      is-extglob: 2.1.1

  is-number@7.0.0: {}

  is-path-inside@3.0.3: {}

  isexe@2.0.0: {}

  jackspeak@2.3.6:
    dependencies:
      '@isaacs/cliui': 8.0.2
    optionalDependencies:
      '@pkgjs/parseargs': 0.11.0

  jiti@1.21.0: {}

  js-tokens@4.0.0: {}

  js-yaml@4.1.0:
    dependencies:
      argparse: 2.0.1

  json-2-csv@5.5.1:
    dependencies:
      deeks: 3.1.0
      doc-path: 4.1.1

  json-buffer@3.0.1: {}

  json-schema-traverse@0.4.1: {}

  json-stable-stringify-without-jsonify@1.0.1: {}

  keyv@4.5.4:
    dependencies:
      json-buffer: 3.0.1

  levn@0.4.1:
    dependencies:
      prelude-ls: 1.2.1
      type-check: 0.4.0

  lilconfig@2.1.0: {}

  lilconfig@3.1.1: {}

  lines-and-columns@1.2.4: {}

  locate-path@6.0.0:
    dependencies:
      p-locate: 5.0.0

  lodash.merge@4.6.2: {}

  loose-envify@1.4.0:
    dependencies:
      js-tokens: 4.0.0

  lru-cache@10.2.0: {}

  lru-cache@6.0.0:
    dependencies:
      yallist: 4.0.0

  lucide-react@0.331.0(react@18.2.0):
    dependencies:
      react: 18.2.0

  merge2@1.4.1: {}

  micromatch@4.0.8:
    dependencies:
      braces: 3.0.3
      picomatch: 2.3.1

  mime-db@1.52.0: {}

  mime-types@2.1.35:
    dependencies:
      mime-db: 1.52.0

  minimatch@3.1.2:
    dependencies:
      brace-expansion: 1.1.11

  minimatch@9.0.3:
    dependencies:
      brace-expansion: 2.0.1

  minimatch@9.0.4:
    dependencies:
      brace-expansion: 2.0.1

  minipass@7.0.4: {}

  ms@2.1.2: {}

  mz@2.7.0:
    dependencies:
      any-promise: 1.3.0
      object-assign: 4.1.1
      thenify-all: 1.6.0

  nanoid@3.3.8: {}

  natural-compare@1.4.0: {}

  node-releases@2.0.14: {}

  normalize-path@3.0.0: {}

  normalize-range@0.1.2: {}

  object-assign@4.1.1: {}

  object-hash@3.0.0: {}

  once@1.4.0:
    dependencies:
      wrappy: 1.0.2

  optionator@0.9.3:
    dependencies:
      '@aashutoshrathi/word-wrap': 1.2.6
      deep-is: 0.1.4
      fast-levenshtein: 2.0.6
      levn: 0.4.1
      prelude-ls: 1.2.1
      type-check: 0.4.0

  p-limit@3.1.0:
    dependencies:
      yocto-queue: 0.1.0

  p-locate@5.0.0:
    dependencies:
      p-limit: 3.1.0

  parent-module@1.0.1:
    dependencies:
      callsites: 3.1.0

  path-exists@4.0.0: {}

  path-is-absolute@1.0.1: {}

  path-key@3.1.1: {}

  path-parse@1.0.7: {}

  path-scurry@1.10.2:
    dependencies:
      lru-cache: 10.2.0
      minipass: 7.0.4

  path-type@4.0.0: {}

  picocolors@1.0.0: {}

  picomatch@2.3.1: {}

  pify@2.3.0: {}

  pirates@4.0.6: {}

  postcss-import@15.1.0(postcss@8.4.38):
    dependencies:
      postcss: 8.4.38
      postcss-value-parser: 4.2.0
      read-cache: 1.0.0
      resolve: 1.22.8

  postcss-js@4.0.1(postcss@8.4.38):
    dependencies:
      camelcase-css: 2.0.1
      postcss: 8.4.38

  postcss-load-config@4.0.2(postcss@8.4.38):
    dependencies:
      lilconfig: 3.1.1
      yaml: 2.4.1
    optionalDependencies:
      postcss: 8.4.38

  postcss-nested@6.0.1(postcss@8.4.38):
    dependencies:
      postcss: 8.4.38
      postcss-selector-parser: 6.0.16

  postcss-selector-parser@6.0.16:
    dependencies:
      cssesc: 3.0.0
      util-deprecate: 1.0.2

  postcss-value-parser@4.2.0: {}

  postcss@8.4.38:
    dependencies:
      nanoid: 3.3.8
      picocolors: 1.0.0
      source-map-js: 1.2.0

  prelude-ls@1.2.1: {}

  proxy-from-env@1.1.0: {}

  punycode@2.3.1: {}

  queue-microtask@1.2.3: {}

  react-chartjs-2@5.2.0(chart.js@4.4.2)(react@18.2.0):
    dependencies:
      chart.js: 4.4.2
      react: 18.2.0

  react-day-picker@8.10.0(date-fns@3.6.0)(react@18.2.0):
    dependencies:
      date-fns: 3.6.0
      react: 18.2.0

  react-dom@18.2.0(react@18.2.0):
    dependencies:
      loose-envify: 1.4.0
      react: 18.2.0
      scheduler: 0.23.0

  react-hot-toast@2.4.1(csstype@3.1.3)(react-dom@18.2.0(react@18.2.0))(react@18.2.0):
    dependencies:
      goober: 2.1.14(csstype@3.1.3)
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
    transitivePeerDependencies:
      - csstype

  react-icons@5.0.1(react@18.2.0):
    dependencies:
      react: 18.2.0

  react-remove-scroll-bar@2.3.6(@types/react@18.2.78)(react@18.2.0):
    dependencies:
      react: 18.2.0
      react-style-singleton: 2.2.1(@types/react@18.2.78)(react@18.2.0)
      tslib: 2.6.2
    optionalDependencies:
      '@types/react': 18.2.78

  react-remove-scroll@2.5.5(@types/react@18.2.78)(react@18.2.0):
    dependencies:
      react: 18.2.0
      react-remove-scroll-bar: 2.3.6(@types/react@18.2.78)(react@18.2.0)
      react-style-singleton: 2.2.1(@types/react@18.2.78)(react@18.2.0)
      tslib: 2.6.2
      use-callback-ref: 1.3.2(@types/react@18.2.78)(react@18.2.0)
      use-sidecar: 1.1.2(@types/react@18.2.78)(react@18.2.0)
    optionalDependencies:
      '@types/react': 18.2.78

  react-router-dom@6.22.3(react-dom@18.2.0(react@18.2.0))(react@18.2.0):
    dependencies:
      '@remix-run/router': 1.15.3
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
      react-router: 6.22.3(react@18.2.0)

  react-router@6.22.3(react@18.2.0):
    dependencies:
      '@remix-run/router': 1.15.3
      react: 18.2.0

  react-style-singleton@2.2.1(@types/react@18.2.78)(react@18.2.0):
    dependencies:
      get-nonce: 1.0.1
      invariant: 2.2.4
      react: 18.2.0
      tslib: 2.6.2
    optionalDependencies:
      '@types/react': 18.2.78

  react@18.2.0:
    dependencies:
      loose-envify: 1.4.0

  read-cache@1.0.0:
    dependencies:
      pify: 2.3.0

  readdirp@3.6.0:
    dependencies:
      picomatch: 2.3.1

  regenerator-runtime@0.14.1: {}

  resolve-from@4.0.0: {}

  resolve@1.22.8:
    dependencies:
      is-core-module: 2.13.1
      path-parse: 1.0.7
      supports-preserve-symlinks-flag: 1.0.0

  reusify@1.0.4: {}

  rimraf@3.0.2:
    dependencies:
      glob: 7.2.3

  rollup@4.24.0:
    dependencies:
      '@types/estree': 1.0.6
    optionalDependencies:
      '@rollup/rollup-android-arm-eabi': 4.24.0
      '@rollup/rollup-android-arm64': 4.24.0
      '@rollup/rollup-darwin-arm64': 4.24.0
      '@rollup/rollup-darwin-x64': 4.24.0
      '@rollup/rollup-linux-arm-gnueabihf': 4.24.0
      '@rollup/rollup-linux-arm-musleabihf': 4.24.0
      '@rollup/rollup-linux-arm64-gnu': 4.24.0
      '@rollup/rollup-linux-arm64-musl': 4.24.0
      '@rollup/rollup-linux-powerpc64le-gnu': 4.24.0
      '@rollup/rollup-linux-riscv64-gnu': 4.24.0
      '@rollup/rollup-linux-s390x-gnu': 4.24.0
      '@rollup/rollup-linux-x64-gnu': 4.24.0
      '@rollup/rollup-linux-x64-musl': 4.24.0
      '@rollup/rollup-win32-arm64-msvc': 4.24.0
      '@rollup/rollup-win32-ia32-msvc': 4.24.0
      '@rollup/rollup-win32-x64-msvc': 4.24.0
      fsevents: 2.3.3

  run-parallel@1.2.0:
    dependencies:
      queue-microtask: 1.2.3

  scheduler@0.23.0:
    dependencies:
      loose-envify: 1.4.0

  semver@7.6.0:
    dependencies:
      lru-cache: 6.0.0

  shebang-command@2.0.0:
    dependencies:
      shebang-regex: 3.0.0

  shebang-regex@3.0.0: {}

  signal-exit@4.1.0: {}

  slash@3.0.0: {}

  source-map-js@1.2.0: {}

  string-width@4.2.3:
    dependencies:
      emoji-regex: 8.0.0
      is-fullwidth-code-point: 3.0.0
      strip-ansi: 6.0.1

  string-width@5.1.2:
    dependencies:
      eastasianwidth: 0.2.0
      emoji-regex: 9.2.2
      strip-ansi: 7.1.0

  strip-ansi@6.0.1:
    dependencies:
      ansi-regex: 5.0.1

  strip-ansi@7.1.0:
    dependencies:
      ansi-regex: 6.0.1

  strip-json-comments@3.1.1: {}

  sucrase@3.35.0:
    dependencies:
      '@jridgewell/gen-mapping': 0.3.5
      commander: 4.1.1
      glob: 10.3.12
      lines-and-columns: 1.2.4
      mz: 2.7.0
      pirates: 4.0.6
      ts-interface-checker: 0.1.13

  supports-color@7.2.0:
    dependencies:
      has-flag: 4.0.0

  supports-preserve-symlinks-flag@1.0.0: {}

  tailwind-merge@2.2.2:
    dependencies:
      '@babel/runtime': 7.24.4

  tailwindcss-animate@1.0.7(tailwindcss@3.4.3):
    dependencies:
      tailwindcss: 3.4.3

  tailwindcss@3.4.3:
    dependencies:
      '@alloc/quick-lru': 5.2.0
      arg: 5.0.2
      chokidar: 3.6.0
      didyoumean: 1.2.2
      dlv: 1.1.3
      fast-glob: 3.3.2
      glob-parent: 6.0.2
      is-glob: 4.0.3
      jiti: 1.21.0
      lilconfig: 2.1.0
      micromatch: 4.0.8
      normalize-path: 3.0.0
      object-hash: 3.0.0
      picocolors: 1.0.0
      postcss: 8.4.38
      postcss-import: 15.1.0(postcss@8.4.38)
      postcss-js: 4.0.1(postcss@8.4.38)
      postcss-load-config: 4.0.2(postcss@8.4.38)
      postcss-nested: 6.0.1(postcss@8.4.38)
      postcss-selector-parser: 6.0.16
      resolve: 1.22.8
      sucrase: 3.35.0
    transitivePeerDependencies:
      - ts-node

  text-table@0.2.0: {}

  thenify-all@1.6.0:
    dependencies:
      thenify: 3.3.1

  thenify@3.3.1:
    dependencies:
      any-promise: 1.3.0

  to-regex-range@5.0.1:
    dependencies:
      is-number: 7.0.0

  ts-api-utils@1.3.0(typescript@5.4.5):
    dependencies:
      typescript: 5.4.5

  ts-interface-checker@0.1.13: {}

  tslib@2.6.2: {}

  type-check@0.4.0:
    dependencies:
      prelude-ls: 1.2.1

  type-fest@0.20.2: {}

  typescript@5.4.5: {}

  undici-types@5.26.5: {}

  update-browserslist-db@1.0.13(browserslist@4.23.0):
    dependencies:
      browserslist: 4.23.0
      escalade: 3.1.2
      picocolors: 1.0.0

  uri-js@4.4.1:
    dependencies:
      punycode: 2.3.1

  use-callback-ref@1.3.2(@types/react@18.2.78)(react@18.2.0):
    dependencies:
      react: 18.2.0
      tslib: 2.6.2
    optionalDependencies:
      '@types/react': 18.2.78

  use-sidecar@1.1.2(@types/react@18.2.78)(react@18.2.0):
    dependencies:
      detect-node-es: 1.1.0
      react: 18.2.0
      tslib: 2.6.2
    optionalDependencies:
      '@types/react': 18.2.78

  util-deprecate@1.0.2: {}

  vaul@0.9.0(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0):
    dependencies:
      '@radix-ui/react-dialog': 1.0.5(@types/react-dom@18.2.25)(@types/react@18.2.78)(react-dom@18.2.0(react@18.2.0))(react@18.2.0)
      react: 18.2.0
      react-dom: 18.2.0(react@18.2.0)
    transitivePeerDependencies:
      - '@types/react'
      - '@types/react-dom'

  vite@5.2.14(@types/node@20.12.7):
    dependencies:
      esbuild: 0.20.2
      postcss: 8.4.38
      rollup: 4.24.0
    optionalDependencies:
      '@types/node': 20.12.7
      fsevents: 2.3.3

  which@2.0.2:
    dependencies:
      isexe: 2.0.0

  wrap-ansi@7.0.0:
    dependencies:
      ansi-styles: 4.3.0
      string-width: 4.2.3
      strip-ansi: 6.0.1

  wrap-ansi@8.1.0:
    dependencies:
      ansi-styles: 6.2.1
      string-width: 5.1.2
      strip-ansi: 7.1.0

  wrappy@1.0.2: {}

  yallist@4.0.0: {}

  yaml@2.4.1: {}

  yocto-queue@0.1.0: {}



================================================
FILE: frontend/postcss.config.js
================================================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}



================================================
FILE: frontend/tailwind.config.js
================================================
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}


================================================
FILE: frontend/tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }],
  "noImplicitAny": false
}



================================================
FILE: frontend/tsconfig.node.json
================================================
{
  "compilerOptions": {
    "composite": true,
    "skipLibCheck": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true
  },
  "include": ["vite.config.ts"]
}



================================================
FILE: frontend/vercel.json
================================================
{
  "rewrites": [
    {
      "source": "/(.*)",
      "destination": "/"
    }
  ]
}



================================================
FILE: frontend/vite.config.ts
================================================
import path from "path";
import react from "@vitejs/plugin-react-swc";
import { defineConfig } from "vite";

export default defineConfig({
  plugins: [
    react()
  ],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
});



================================================
FILE: frontend/.eslintrc.cjs
================================================
module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:react-hooks/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs'],
  parser: '@typescript-eslint/parser',
  plugins: ['react-refresh'],
  rules: {
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
  },
}



================================================
FILE: frontend/src/App.tsx
================================================
import Routing from "./Routing";
import { ThemeProvider } from "./components/theme-provider";
import { Toaster } from "./components/ui/toaster";
import { Toaster as RHToaster } from "react-hot-toast";
import { createContext, useEffect, useState } from "react";
import axios from "axios";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { ReactQueryDevtools } from "@tanstack/react-query-devtools";

const queryClient = new QueryClient();

// adding this any just for now, gonna remove this later
/* eslint-disable @typescript-eslint/no-explicit-any */
export const AppContext = createContext<any>({});

function App() {
  const [isLoggedIn, setIsLoggedIn] = useState(
    localStorage.getItem("userStatus") === "loggedIn"
  );
  const [userData, setUserData] = useState(
    JSON.parse(localStorage.getItem("userData") || "{}")
  );
  const [showGoals, setShowGoals] = useState(
    localStorage.getItem("showGoals") === "true" ||
      !localStorage.getItem("showGoals")
  );
  const [showTransactions, setShowTransactions] = useState(
    localStorage.getItem("showTransactions") === "true" ||
      !localStorage.getItem("showTransactions")
  );

  const [selectedGoal, setSelectedGoal] = useState({});

  useEffect(() => {
    if (isLoggedIn) {
      axios.get("/users/get-current-user").then((res) => {
        setUserData(res.data.data);
        localStorage.setItem("userData", JSON.stringify(res.data.data));
      });
    }

    if (userData?.user?.stripeSessionId && !userData?.user?.isPaidUser) {
      axios.post("/pay/confirm-payment").then((res) => {
        setUserData(res.data.data);
        localStorage.setItem("userData", JSON.stringify(res.data.data));
      });
    }
  }, []);

  axios.defaults.baseURL = import.meta.env.VITE_API_URI;
  axios.defaults.withCredentials = true;

  return (
    <ThemeProvider defaultTheme="dark" storageKey="vite-ui-theme">
      <AppContext.Provider
        value={{
          isLoggedIn,
          setIsLoggedIn,
          userData,
          setUserData,
          selectedGoal,
          setSelectedGoal,
          showGoals,
          setShowGoals,
          showTransactions,
          setShowTransactions,
        }}
      >
        <QueryClientProvider client={queryClient}>
          <Routing />
          <Toaster />
          <ReactQueryDevtools />
          <RHToaster
            toastOptions={{
              success: {
                duration: 3000,
              },
            }}
          />
        </QueryClientProvider>
      </AppContext.Provider>
    </ThemeProvider>
  );
}

export default App;



================================================
FILE: frontend/src/index.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Purple Theme */
@layer base {
  :root {
    --background: 251 48% 13%;
    --foreground: 251 38% 83%;
    --muted: 251 12% 17%;
    --muted-foreground: 251 12% 67%;
    --popover: 251 48% 10%;
    --popover-foreground: 251 38% 93%;
    --card: 251 48% 11%;
    --card-foreground: 251 38% 88%;
    --border: 251 38% 18%;
    --input: 251 38% 21%;
    --primary: 258 100% 75%;
    --primary-foreground: 258 100% 15%;
    --secondary: 258 30% 25%;
    --secondary-foreground: 258 30% 85%;
    --accent: 251 48% 28%;
    --accent-foreground: 251 48% 88%;
    --destructive: 7 87% 60%;
    --destructive-foreground: 0 0% 0%;
    --ring: 258 100% 75%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 251 48% 13%;
    --foreground: 251 38% 83%;
    --muted: 251 12% 17%;
    --muted-foreground: 251 12% 67%;
    --popover: 251 48% 10%;
    --popover-foreground: 251 38% 93%;
    --card: 251 48% 11%;
    --card-foreground: 251 38% 88%;
    --border: 251 38% 18%;
    --input: 251 38% 21%;
    --primary: 258 100% 75%;
    --primary-foreground: 258 100% 15%;
    --secondary: 258 30% 25%;
    --secondary-foreground: 258 30% 85%;
    --accent: 251 48% 28%;
    --accent-foreground: 251 48% 88%;
    --destructive: 7 87% 60%;
    --destructive-foreground: 0 0% 0%;
    --ring: 258 100% 75%;
  }
}

/* Blue light */
/* @layer base {
  :root {
    --background: 229 57% 100%;
    --foreground: 229 63% 4%;
    --muted: 229 12% 86%;
    --muted-foreground: 229 10% 37%;
    --popover: 0 0% 99%;
    --popover-foreground: 229 63% 3%;
    --card: 0 0% 99%;
    --card-foreground: 229 63% 3%;
    --border: 220 13% 91%;
    --input: 220 13% 91%;
    --primary: 229 100% 62%;
    --primary-foreground: 0 0% 100%;
    --secondary: 229 20% 90%;
    --secondary-foreground: 229 20% 30%;
    --accent: 229 28% 85%;
    --accent-foreground: 229 28% 25%;
    --destructive: 3 100% 50%;
    --destructive-foreground: 3 0% 100%;
    --ring: 229 100% 62%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 229 41% 4%;
    --foreground: 229 23% 99%;
    --muted: 229 12% 14%;
    --muted-foreground: 229 10% 63%;
    --popover: 229 41% 5%;
    --popover-foreground: 0 0% 100%;
    --card: 229 41% 5%;
    --card-foreground: 0 0% 100%;
    --border: 215 27.9% 16.9%;
    --input: 215 27.9% 16.9%;
    --primary: 229 100% 62%;
    --primary-foreground: 0 0% 100%;
    --secondary: 229 14% 8%;
    --secondary-foreground: 229 14% 68%;
    --accent: 229 23% 17%;
    --accent-foreground: 229 23% 77%;
    --destructive: 3 89% 54%;
    --destructive-foreground: 0 0% 100%;
    --ring: 229 100% 62%;
  }
} */

/* Midnight tokyo blue */
/* @layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --primary: 220.47 98.26% 36.08%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 92.99% 56.11%;
    --destructive-foreground: 210 40% 98%;
    --ring: 220.67 97.83% 36.08%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 240 13.73% 10%;
    --foreground: 229.76 31.78% 74.71%;
    --muted: 232.5 15.44% 18.32%;
    --muted-foreground: 233.79 11.37% 50%;
    --popover: 234.55 17.46% 12.35%;
    --popover-foreground: 234 12.4% 52.55%;
    --card: 234.55 17.46% 12.35%;
    --card-foreground: 229.76 31.78% 74.71%;
    --border: 232.5 15.38% 30.59%;
    --input: 232 20% 14.71%;
    --primary: 225.45 71.22% 72.75%;
    --primary-foreground: 234.55 17.46% 12.35%;
    --secondary: 0 0% 82.75%;
    --secondary-foreground: 0 0% 20%;
    --accent: 227.73 48.05% 48.58%;
    --accent-foreground: 210 40% 98%;
    --destructive: 1.58 47.5% 52.94%;
    --destructive-foreground: 210 40% 98.04%;
    --ring: 225.45 71.22% 72.75%;
  }
} */

/* This kinna works!, maybe tweak it a little bit */
/* PowerShell ISE */
/* @layer base {
  :root {
    --background: 60 100% 100%;
    --foreground: 0 0% 20%;
    --muted: 60 12% 90%;
    --muted-foreground: 60 12% 30%;
    --popover: 60 100% 97%;
    --popover-foreground: 0 0% 10%;
    --card: 60 100% 98%;
    --card-foreground: 0 0% 15%;
    --border: 60 90% 95%;
    --input: 60 90% 92%;
    --primary: 213 67% 93%;
    --primary-foreground: 213 67% 33%;
    --secondary: 213 30% 25%;
    --secondary-foreground: 213 30% 85%;
    --accent: 60 100% 85%;
    --accent-foreground: 60 100% 5%;
    --destructive: 10 81% 42%;
    --destructive-foreground: 0 0% 100%;
    --ring: 213 67% 93%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 60 100% 100%;
    --foreground: 0 0% 20%;
    --muted: 60 12% 90%;
    --muted-foreground: 60 12% 30%;
    --popover: 60 100% 97%;
    --popover-foreground: 0 0% 10%;
    --card: 60 100% 98%;
    --card-foreground: 0 0% 15%;
    --border: 60 90% 95%;
    --input: 60 90% 92%;
    --primary: 213 67% 93%;
    --primary-foreground: 213 67% 33%;
    --secondary: 213 30% 25%;
    --secondary-foreground: 213 30% 85%;
    --accent: 60 100% 85%;
    --accent-foreground: 60 100% 5%;
    --destructive: 10 81% 42%;
    --destructive-foreground: 0 0% 100%;
    --ring: 213 67% 93%;
  }
} */

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}



================================================
FILE: frontend/src/main.tsx
================================================
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.tsx";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);



================================================
FILE: frontend/src/Routing.tsx
================================================
// import Landing from "./pages/Landing";
import Login from "./pages/Login";
import Register from "./pages/Register";
import { createBrowserRouter } from "react-router-dom";
import { RouterProvider } from "react-router-dom";
import { AppContext } from "./App";
import { useContext } from "react";
import Dashboard from "./pages/Dashboard";
import Settings from "./pages/Settings";
import Transactions from "./pages/Transactions";
import Overview from "./pages/Overview";
import Goals from "./pages/Goals";
import Account from "./pages/Account";
import Statistics from "./pages/Statistics";
import NewTransaction from "./pages/NewTransaction";
import SingularGoalView from "./components/SingularGoalView";
import ResetDemo from "./pages/ResetDemo";
import SingleTransaction from "./components/SingleTransaction";
import NotFound from "./components/NotFound";
import PaymentSuccess from "./components/payment/PaymentSuccess";

function Routing() {
  const { isLoggedIn } = useContext(AppContext);

  const router = createBrowserRouter([
    {
      path: "/",
      element: isLoggedIn ? <Dashboard /> : <Login />,
      children: [
        {
          index: true,
          element: <Overview />,
        },
        {
          path: "settings",
          element: <Settings />,
        },
        {
          path: "transactions",
          element: <Transactions />,
          children: [
            {
              path: ":transactionId",
              element: <SingleTransaction />,
            },
          ],
        },
        {
          path: "account",
          element: <Account />,
        },
        {
          path: "statistics",
          element: <Statistics />,
        },
        {
          path: "payment-success",
          element: <PaymentSuccess />,
        },
        {
          path: "goals",
          element: <Goals />,
          children: [
            {
              path: ":goalId",
              element: <SingularGoalView />,
            },
          ],
        },
        {
          path: "create-transaction",
          element: <NewTransaction />,
        },
      ],
    },
    {
      path: "register",
      element: <Register />,
    },
    {
      path: "login",
      element: <Login />,
    },
    {
      path: "reset-demo",
      element: <ResetDemo />,
    },
    {
      path: "*",
      element: <NotFound />,
    },
  ]);

  return <RouterProvider router={router} />;
}

export default Routing;



================================================
FILE: frontend/src/vite-env.d.ts
================================================
/// <reference types="vite/client" />



================================================
FILE: frontend/src/components/AccountBalance.tsx
================================================
import { useContext } from "react";
import { AppContext } from "@/App";
import { Button } from "@/components/ui/button";
import { Link } from "react-router-dom";

const formatter = new Intl.NumberFormat("en-US");

function AccountBalance() {
  const { userData } = useContext(AppContext);

  return (
    <div className="bg-card max-w-80 h-60 rounded-[20px] p-5 flex flex-col items-center gap-10 shadow-md">
      <h3 className="text-center text-md">Account Balance</h3>
      <h2 className="text-4xl">
        {userData.user.currency}
        {formatter.format(userData.user.currentBalance)}
      </h2>
      <Link to={"/create-transaction"}>
        <Button className="">Make a transaction</Button>
      </Link>
    </div>
  );
}

export default AccountBalance;



================================================
FILE: frontend/src/components/AddIncomeAndExpense.tsx
================================================
import { FormEvent, useContext, useState } from "react";
import { AppContext } from "@/App";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { toast } from "./ui/use-toast";
import axios from "axios";

function AddIncomeAndExpense() {
  const { userData, setUserData } = useContext(AppContext);
  const [modalOpen, setModalOpen] = useState(false);
  const [income, setIncome] = useState<number>();
  const [expense, setExpense] = useState<number>();

  async function handleSubmit(e: FormEvent<HTMLFormElement>) {
    e.preventDefault();
    if (expense === undefined || income === undefined) return;
    if (expense > income) {
      toast({
        description: "Expenses can't be greater than income.",
      });
      return;
    }
    await axios
      .post("/users/add-income-and-expense", {
        email: userData.user.email,
        income,
        expense,
      })
      .then((res) => {
        localStorage.setItem("userData", JSON.stringify(res.data.data));
        setUserData(res.data.data);
        setModalOpen(false);
      });
  }

  return (
    <div className="bg-card sm:w-80 h-48 rounded-[20px] p-5 flex flex-col items-center gap-10">
      <h3 className="text-center text-md">
        You haven't set your income and expenses yet.
      </h3>
      <Dialog open={modalOpen} onOpenChange={setModalOpen}>
        <DialogTrigger asChild>
          <Button variant="default">Add Income and Expenses</Button>
        </DialogTrigger>
        <DialogContent className="sm:max-w-[425px]">
          <form onSubmit={handleSubmit}>
            <DialogHeader>
              <DialogTitle>Add Income and Expenses</DialogTitle>
              <DialogDescription>
                Add your income and expenses here. Click save when you're done.
              </DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="income" className="text-right">
                  Income
                </Label>
                <Input
                  id="income"
                  className="col-span-3"
                  type="number"
                  min="0"
                  required
                  onChange={(e) => {
                    setIncome(+e.target.value);
                  }}
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="expense" className="text-right">
                  Expense
                </Label>
                <Input
                  id="expense"
                  className="col-span-3"
                  type="number"
                  min="0"
                  required
                  onChange={(e) => {
                    setExpense(+e.target.value);
                  }}
                />
              </div>
            </div>
            <DialogFooter>
              <Button type="submit">Save changes</Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>
    </div>
  );
}

export default AddIncomeAndExpense;



================================================
FILE: frontend/src/components/AddMoneyToGoal.tsx
================================================
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { useState, useContext, FormEvent } from "react";
import { Button } from "./ui/button";
import { AppContext } from "@/App";
import { Input } from "./ui/input";
import { Label } from "@radix-ui/react-dropdown-menu";
import { useToast } from "./ui/use-toast";
import axios from "axios";

function AddMoneyToGoal() {
  const [modalOpen, setModalOpen] = useState(false);
  const [amountToAdd, setAmountToAdd] = useState<number>();
  const { selectedGoal, setSelectedGoal, userData, setUserData } =
    useContext(AppContext);
  const { toast } = useToast();

  async function handleSubmit(e: FormEvent<HTMLFormElement>) {
    e.preventDefault();
    if (!amountToAdd) return;

    if (selectedGoal.finalAmount < amountToAdd) {
      toast({
        description:
          "Amount to add can't be more than the final amount of the goal",
      });
      return;
    }

    if (userData.user.currentBalance < amountToAdd) {
      toast({
        description: "You don't have enough balance to make this transaction",
      });
      return;
    }

    await axios
      .post("/goals/add-money-to-goal", {
        goalId: selectedGoal._id,
        currentAmount: amountToAdd,
      })
      .then((res) => {
        localStorage.setItem("userData", JSON.stringify(res.data.data));
        setUserData(res.data.data);
        setSelectedGoal(res.data.data.goal);
        setModalOpen(false);
      });
  }

  return (
    <Dialog open={modalOpen} onOpenChange={setModalOpen}>
      <Button
        onClick={() => {
          setModalOpen(true);
        }}
      >
        Add Money to This Goal
      </Button>
      <DialogContent className="max-w-[350px]">
        <DialogHeader>
          <DialogTitle>Add money to this goal</DialogTitle>
          <DialogDescription>
            You are adding money from your account to this goal.
          </DialogDescription>
        </DialogHeader>
        <form
          onSubmit={(e) => {
            handleSubmit(e);
          }}
        >
          <div className="">
            <Label>Amount to Add</Label>
            <Input
              id="amount"
              className="mb-6"
              type="number"
              min={1}
              required
              placeholder="How much are you adding to this goal?"
              onChange={(e) => {
                setAmountToAdd(+e.target.value);
              }}
            />
          </div>
          <Button type="submit">Save changes</Button>
        </form>
      </DialogContent>
    </Dialog>
  );
}

export default AddMoneyToGoal;



================================================
FILE: frontend/src/components/AddNewGoal.tsx
================================================
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetFooter,
  SheetTitle,
} from "@/components/ui/sheet";
import { Button } from "./ui/button";
import { Label } from "@radix-ui/react-dropdown-menu";
import { Input } from "./ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import axios from "axios";
import { FormEvent, useContext, useState } from "react";
import { AppContext } from "@/App";
import { FaPlus as PlusIcon } from "react-icons/fa";

function AddNewGoal() {
  const { setUserData, setSelectedGoal } = useContext(AppContext);
  const [title, setTitle] = useState<string>();
  const [amount, setAmount] = useState<number>();
  const [category, setCategory] = useState<string | null>();
  const [description, setDescription] = useState<string | null>();
  const [sheetOpen, setSheetOpen] = useState(false);

  async function handleSubmit(e: FormEvent<HTMLFormElement>) {
    e.preventDefault();
    if (title === undefined || amount === undefined) return;
    await axios
      .post("/goals/create-goal", {
        title,
        finalAmount: amount,
        category,
        description,
      })
      .then((res) => {
        localStorage.setItem("userData", JSON.stringify(res.data.data));
        setUserData(res.data.data);
        setSheetOpen(false);
        setSelectedGoal(res.data.data.goal);
      });
  }

  return (
    <Sheet open={sheetOpen} onOpenChange={setSheetOpen}>
      {/* <SheetTrigger> */}
      <Button
        className="font-bold h-14 text-md sm:w-72 flex gap-2"
        variant={"outline"}
        onClick={() => {
          setSheetOpen(true);
        }}
      >
        <PlusIcon className="w-5 h-5" />
        Create a New Goal
      </Button>
      {/* </SheetTrigger> */}
      <SheetContent>
        <form onSubmit={handleSubmit}>
          <SheetHeader>
            <SheetTitle>Create a New Goal</SheetTitle>
            <SheetDescription>
              Create a goal for yourself to save money!
            </SheetDescription>
          </SheetHeader>
          <div className="grid gap-4 py-4">
            <div className="">
              <Label>Title</Label>
              <Input
                id="title"
                className="col-span-3"
                type="text"
                maxLength={30}
                required
                placeholder="To buy a house"
                onChange={(e) => {
                  setTitle(e.target.value);
                }}
              />
            </div>
            <div className="">
              <Label>Amount</Label>
              <Input
                id="amount"
                className="col-span-3"
                type="number"
                min={1}
                required
                placeholder="How much do you want to save?"
                onChange={(e) => {
                  setAmount(+e.target.value);
                }}
              />
            </div>
            <div>
              <Label>Category</Label>
              <Select onValueChange={(value) => setCategory(value)}>
                <SelectTrigger className="h-9 data-[placeholder]:text-muted-foreground">
                  <SelectValue placeholder="Optional Category" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Savings">Savings</SelectItem>
                  <SelectItem value="Investment">Investment</SelectItem>
                  <SelectItem value="Emergency">Emergency</SelectItem>
                  <SelectItem value="Travel">Travel</SelectItem>
                  <SelectItem value="Retirement">Retirement</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="">
              <Label>Description</Label>
              <Textarea
                id="description"
                placeholder="Optional description here"
                onChange={(e) => {
                  setDescription(e.target.value);
                }}
              />
            </div>
          </div>
          <SheetFooter>
            {/* <SheetClose asChild> */}
            <Button type="submit">Save changes</Button>
            {/* </SheetClose> */}
          </SheetFooter>
        </form>
      </SheetContent>
    </Sheet>
  );
}

export default AddNewGoal;



================================================
FILE: frontend/src/components/CheckoutButton.tsx
================================================
import { useContext } from "react";
import { Button } from "./ui/button";
import axios from "axios";
import { AppContext } from "@/App";
import { PiCrown as ProIcon } from "react-icons/pi";
import toast from "react-hot-toast";

function CheckoutButton() {
  const { setUserData } = useContext(AppContext);

  function handleCheckout() {
    toast.loading("Creating checkout session...");
    axios
      .post("/pay/create-checkout")
      .then((res) => {
        if (res.status === 200) {
          setUserData(res.data.data);
          localStorage.setItem("userData", JSON.stringify(res.data.data));
          window.location = res.data.data.url;
        }
      })
      .catch((e) => {
        console.error(e.error);
      });
  }

  return (
    <Button
      onClick={handleCheckout}
      className="w-full md:w-full h-14 bg-green-600 rounded-[20px] text-lg flex justify-center items-center gap-4 text-white font-semibold hover:bg-green-700 shadow-md"
    >
      <ProIcon className="w-8 h-8" />
      Upgrade to premium
    </Button>
  );
}

export default CheckoutButton;



================================================
FILE: frontend/src/components/Command.tsx
================================================
import { useState, useEffect, useContext } from "react";
import { LuLayoutDashboard as OverviewIcon } from "react-icons/lu";
import { GrTransaction as TransactionsIcon } from "react-icons/gr";
// import { FaMoneyBillTransfer as HomeIcon } from "react-icons/fa6";
import { IoSettingsOutline as SettingsIcon } from "react-icons/io5";
import { TbTargetArrow as GoalsIcon } from "react-icons/tb";
import { IoPerson as AccountIcon } from "react-icons/io5";
import {
  CommandDialog,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  // CommandSeparator,
  // CommandShortcut,
} from "@/components/ui/command";
import { HiOutlineLogout as LogoutIcon } from "react-icons/hi";
import React from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { AppContext } from "@/App";
import toast from "react-hot-toast";

export default function Command({ children }: { children: React.ReactNode }) {
  const [open, setOpen] = useState(false);
  const { setIsLoggedIn } = useContext(AppContext);
  const navigate = useNavigate();

  useEffect(() => {
    const down = (e: KeyboardEvent) => {
      if (e.key === "k" && (e.metaKey || e.ctrlKey)) {
        e.preventDefault();
        setOpen((open) => !open);
      }
    };

    document.addEventListener("keydown", down);
    return () => document.removeEventListener("keydown", down);
  }, []);

  function handleSelect(page: string) {
    navigate(page);
    setOpen(false);
  }

  function handleLogout() {
    const toastPromise = axios.post("/users/logout").then(() => {
      localStorage.removeItem("userStatus");
      setIsLoggedIn(false);
    });

    toast.promise(toastPromise, {
      success: "Logged out",
      loading: "Logging out",
      error: "Unable to log out",
    });
  }

  return (
    <>
      {children}
      <CommandDialog open={open} onOpenChange={setOpen}>
        <CommandInput placeholder="Type a command or search..." />
        <CommandList>
          <CommandEmpty>No results found.</CommandEmpty>
          <CommandGroup heading="Suggestions">
            <CommandItem onSelect={() => handleSelect("/")}>
              <OverviewIcon className="mr-2 h-4 w-4" />
              <span>Overview</span>
            </CommandItem>
            <CommandItem onSelect={() => handleSelect("/transactions")}>
              <TransactionsIcon className="mr-2 h-4 w-4" />
              <span>Transactions</span>
            </CommandItem>
            <CommandItem onSelect={() => handleSelect("/goals")}>
              <GoalsIcon className="mr-2 h-4 w-4" />
              <span>Goals</span>
            </CommandItem>
            <CommandItem onSelect={() => handleSelect("/account")}>
              <AccountIcon className="mr-2 h-4 w-4" />
              <span>Account</span>
            </CommandItem>
            <CommandItem onSelect={() => handleSelect("/settings")}>
              <SettingsIcon className="mr-2 h-4 w-4" />
              <span>Settings</span>
            </CommandItem>
            <CommandItem onSelect={handleLogout}>
              <LogoutIcon className="mr-2 h-4 w-4" />
              <span>Log out</span>
            </CommandItem>
          </CommandGroup>
        </CommandList>
      </CommandDialog>
    </>
  );
}



================================================
FILE: frontend/src/components/DatePicker.tsx
================================================
import { CalendarIcon } from "@radix-ui/react-icons";
import { format } from "date-fns";

import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { FormEvent, useContext, useState } from "react";
import { Label } from "@radix-ui/react-dropdown-menu";
import { toast } from "react-hot-toast";
import { AppContext } from "@/App";
import axios from "axios";

function DatePicker() {
  const { userData, setUserData } = useContext(AppContext);
  const [date, setDate] = useState(userData.user.dateOfBirth);

  // const { mutate, mutateAsync } = useMutation({
  //   mutationKey: ["userData"],
  //   mutationFn: (date) => axios.post("/user/update-date", { date }),
  // });

  async function updateDate(e: FormEvent<HTMLFormElement>) {
    e.preventDefault();
    if (!date) {
      toast.error("Date is required", { id: "date-required" });
      return;
    }

    if (date > new Date()) {
      toast.error("Date of birth can't be in the future", {
        id: "date-in-future",
      });
      return;
    }

    if (date === userData.user.dateOfBirth) {
      toast.error("This date of birth has already been set by you", {
        id: "date-already-set",
        icon: "📌",
      });
      return;
    }

    const toastPromise = axios
      .post("/users/update-date", { date })
      .then((res) => {
        localStorage.setItem("userData", JSON.stringify(res.data.data));
        setUserData(res.data.data);
      });

    toast.promise(toastPromise, {
      loading: "Saving",
      success: "Saved",
      error: "Error when fetching",
    });
  }

  return (
    <div className="">
      <div className="">
        <form onSubmit={updateDate} className="flex gap-4 flex-col sm:flex-row">
          <div className="flex flex-col gap-1.5">
            <Label className="text-sm font-semibold">Date of Birth</Label>
            <Popover>
              <PopoverTrigger asChild>
                <Button
                  variant={"outline"}
                  type="button"
                  className={cn(
                    "sm:w-[240px] justify-start text-left font-normal h-9",
                    !date && "text-muted-foreground"
                  )}
                >
                  <CalendarIcon className="mr-2 h-4 w-4" />
                  {date ? format(date, "PPP") : <span>Pick a date</span>}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0" align="start">
                <Calendar
                  mode="single"
                  selected={date}
                  onSelect={setDate}
                  initialFocus
                  id="date"
                />
              </PopoverContent>
            </Popover>
          </div>
          <Button className="sm:mt-[26px] h-9" type="submit">
            Save
          </Button>
        </form>
      </div>
    </div>
  );
}

export default DatePicker;



================================================
FILE: frontend/src/components/DemoLoginButton.tsx
================================================
import toast from "react-hot-toast";
import axios from "axios";
import { useContext } from "react";
import { AppContext } from "@/App";
import { useNavigate } from "react-router-dom";
import { Button } from "./ui/button";

function DemoLoginButton() {
  const { setIsLoggedIn, setUserData } = useContext(AppContext);
  const navigate = useNavigate();

  async function demoLogin() {
    const toastPromise = axios
      .post("/users/login", {
        email: "demo@demo.demo",
        password: import.meta.env.VITE_DEMO_PASS,
      })
      .then((response) => {
        localStorage.setItem("userStatus", "loggedIn");
        setIsLoggedIn(true);
        localStorage.setItem("userData", JSON.stringify(response.data.data));
        setUserData(response.data.data);
        navigate("/");
      });

    toast.promise(toastPromise, {
      loading: "Logging in...",
      success: "Logged in as a demo user",
      error: "Error logging you in",
    });
  }

  return (
    <Button
      className="w-full mt-4 rounded-[20px]"
      onClick={demoLogin}
      type="button"
    >
      Login as a demo user
    </Button>
  );
}

export default DemoLoginButton;



================================================
FILE: frontend/src/components/ExpenseTransactionCard.tsx
================================================
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { format } from "date-fns";
import { cn } from "@/lib/utils";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Calendar } from "@/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { CalendarIcon } from "@radix-ui/react-icons";
import { FormEvent, useContext, useState } from "react";
import toast from "react-hot-toast";
import axios from "axios";
import { AppContext } from "@/App";

function ExpenseTransactionCard() {
  const [title, setTitle] = useState<string>();
  const [amount, setAmount] = useState<number>();
  const [category, setCategory] = useState<string>();
  const [date, setDate] = useState<Date | undefined>();
  const [wallet, setWallet] = useState<string>("Cash");
  const [receipt, setReceipt] = useState<File | undefined>();
  const { userData, setUserData } = useContext(AppContext);

  function createExpense(e: FormEvent<HTMLFormElement>) {
    e.preventDefault();

    if (!title) {
      toast.error("Title is required");
      return;
    }
    if (!amount) {
      toast.error("Amount is required");
      return;
    }
    if (!wallet) {
      toast.error("Wallet is required");
      return;
    }

    if (amount > userData.user.currentBalance && wallet === "Cash") {
      toast.error("You don't have enough balance to make this transaction", {
        id: "not-enough-balance",
      });
      return;
    }

    if (receipt) {
      if (!["image/jpeg", "image/png"].includes(receipt?.type)) {
        toast.error("Only jpeg and png files are allowed");
        return;
      }

      const formData = new FormData();
      formData.append("receipt", receipt);
      formData.append("title", title);
      formData.append("amount", amount.toString());
      if (category !== undefined) formData.append("category", category);
      formData.append("date", date?.toISOString() || "");
      formData.append("wallet", wallet);

      const toastPromise = axios
        .post("/transaction/create-expense", formData, {
          headers: {
            "Content-Type": "multipart/form-data",
          },
        })
        .then((res) => {
          localStorage.setItem("userData", JSON.stringify(res.data.data));
          setUserData(res.data.data);
        });

      toast.promise(
        toastPromise,
        {
          loading: "Saving expense...",
          success: "Expense saved successfully!",
          error: "Failed to save expense. Please try again.",
        },
        {
          id: "saving-expense",
        }
      );
    } else {
      const data = {
        title,
        amount,
        category,
        date,
        wallet,
      };

      const toastPromise = axios
        .post("/transaction/create-expense", data)
        .then((res) => {
          localStorage.setItem("userData", JSON.stringify(res.data.data));
          setUserData(res.data.data);
        });

      toast.promise(
        toastPromise,
        {
          loading: "Saving expense...",
          success: "Expense saved successfully!",
          error: "Failed to save expense. Please try again.",
        },
        {
          id: "saving-expense",
        }
      );
    }
  }

  return (
    <Card>
      <form onSubmit={createExpense}>
        <CardHeader>
          <CardTitle>Add Expense</CardTitle>
          {/* <CardDescription>
      Make changes to your account here. Click save when you're done.
    </CardDescription> */}
        </CardHeader>
        <CardContent className="space-y-2 flex flex-col gap-1.5">
          <div className="space-y-1">
            <Label htmlFor="title">Title</Label>
            <Input
              id="title"
              placeholder="Paid rent"
              maxLength={40}
              required
              onChange={(e) => setTitle(e.target.value)}
            />
          </div>

          <div className="flex gap-4 sm:gap-6 flex-col sm:flex-row">
            <div className="sm:w-[150px] space-y-1">
              <Label htmlFor="amount">Amount</Label>
              <Input
                id="amount"
                type="number"
                min={1}
                required
                placeholder="- 200"
                onChange={(e) => setAmount(+e.target.value)}
              />
            </div>
            <div className="space-y-1 flex-1">
              <Label>Wallet</Label>
              <Select
                onValueChange={(value) => setWallet(value)}
                value={wallet}
              >
                <SelectTrigger className="h-9 data-[placeholder]:text-muted-foreground">
                  <SelectValue placeholder="Wallet" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Cash">Cash</SelectItem>
                  <SelectItem value="Credit card">Credit card</SelectItem>
                  <SelectItem value="Debit card">Debit card</SelectItem>
                  <SelectItem value="Bank">Bank</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
          <div className="flex sm:items-center gap-4 sm:gap-6 flex-col sm:flex-row">
            <div className="flex flex-col gap-1.5">
              <Label>Date</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant={"outline"}
                    type="button"
                    className={cn(
                      "sm:w-[140px] justify-start text-left font-normal",
                      !date && "text-muted-foreground"
                    )}
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {date ? format(date, "PPP") : <span>Pick a date</span>}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0" align="start">
                  <Calendar
                    mode="single"
                    selected={date}
                    onSelect={setDate}
                    initialFocus
                    id="date"
                  />
                </PopoverContent>
              </Popover>
            </div>
            <div className="mb-[4px] flex-1">
              <Label>Category</Label>
              <Select
                onValueChange={(value) => setCategory(value)}
                value={category}
              >
                <SelectTrigger className="h-9 data-[placeholder]:text-muted-foreground">
                  <SelectValue placeholder="Optional Category" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Electricity">Electricity</SelectItem>
                  <SelectItem value="Food & Drinks">Food & Drinks</SelectItem>
                  <SelectItem value="Shopping">Shopping</SelectItem>
                  <SelectItem value="Movie">Movie</SelectItem>
                  <SelectItem value="Office">Office</SelectItem>
                  <SelectItem value="Entertainment">Entertainment</SelectItem>
                  <SelectItem value="Healthcare">Healthcare</SelectItem>
                  <SelectItem value="Bills & Fees">Bills & Fees</SelectItem>
                  <SelectItem value="Education">Education</SelectItem>
                  <SelectItem value="Travel">Travel</SelectItem>
                  <SelectItem value="Groceries">Groceries</SelectItem>
                  <SelectItem value="Work">Work</SelectItem>
                  <SelectItem value="Other">Other</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="space-y-1">
            <Label htmlFor="receipt" className="tex-md">
              Upload Receipt
            </Label>
            <Input
              id="receipt"
              type="file"
              name="receipt"
              className="file:text-primary h-10 file:mt-1 cursor-pointer"
              accept="image/png, image/jpeg"
              onChange={(e) => {
                if (!e.target.files) return;
                setReceipt(e.target.files[0]);
              }}
            />
          </div>
        </CardContent>
        <CardFooter>
          <Button type="submit">Save changes</Button>
        </CardFooter>
      </form>
    </Card>
  );
}

export default ExpenseTransactionCard;



================================================
FILE: frontend/src/components/Feedback.tsx
================================================
import {
  Drawer,
  DrawerContent,
  DrawerFooter,
  DrawerHeader,
  DrawerTitle,
} from "@/components/ui/drawer";
import { Button } from "@/components/ui/button";
import { FormEvent, useState } from "react";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import axios from "axios";
import { toast } from "react-hot-toast";

function Feedback() {
  const [drawerOpen, setDrawerOpen] = useState(false);
  const [rating, setRating] = useState<string>();
  const [description, setDescription] = useState<string>();

  async function submitFeedback(e: FormEvent<HTMLFormElement>) {
    e.preventDefault();
    if (!rating) return;

    await axios
      .post("/feedback/create-feedback", { rating, description })
      .then(() => {
        setDrawerOpen(false);
        toast.success("Thank you for your feedback!");
      })
      .catch(() => {
        setDrawerOpen(false);
        toast.error("Something went wrong");
      });
  }

  return (
    <Drawer open={drawerOpen} onOpenChange={setDrawerOpen}>
      <Button className="h-10" onClick={() => setDrawerOpen(true)}>
        Give Feedback
      </Button>
      <DrawerContent className="">
        <form onSubmit={(e) => submitFeedback(e)}>
          <DrawerHeader className="">
            <DrawerTitle className="w-[400px] mx-auto text-xl">
              Your feedback is valuable to us!
            </DrawerTitle>
          </DrawerHeader>
          <div className="w-[400px] mx-auto mb-4">
            <Label>Rating</Label>
            <Select required onValueChange={(value) => setRating(value)}>
              <SelectTrigger className="h-9 data-[placeholder]:text-muted-foreground">
                <SelectValue placeholder="Your Rating" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="1-star">⭐</SelectItem>
                <SelectItem value="2-star">⭐⭐</SelectItem>
                <SelectItem value="3-star">⭐⭐⭐</SelectItem>
                <SelectItem value="4-star">⭐⭐⭐⭐</SelectItem>
                <SelectItem value="5-star">⭐⭐⭐⭐⭐</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div className="w-[400px] mx-auto mb-6">
            <Label htmlFor="feedback" className="">
              Feedback
            </Label>
            <Textarea
              id="feedback"
              placeholder="Optional description here"
              onChange={(e) => {
                setDescription(e.target.value);
              }}
            />
          </div>

          <DrawerFooter className="flex">
            <Button className="w-[400px] mx-auto" type="submit">
              Submit
            </Button>
            <Button
              variant="outline"
              type="button"
              className="w-[400px] mx-auto"
              onClick={() => {
                setDrawerOpen(false);
              }}
            >
              Cancel
            </Button>
          </DrawerFooter>
        </form>
      </DrawerContent>
    </Drawer>
  );
}

export default Feedback;



================================================
FILE: frontend/src/components/FirstGoal.tsx
================================================
import { FormEvent, useContext, useState } from "react";
import { AppContext } from "@/App";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
  CardFooter,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import axios from "axios";

function FirstGoal() {
  const { setUserData } = useContext(AppContext);
  const [title, setTitle] = useState<string>();
  const [amount, setAmount] = useState<number>();
  const [category, setCategory] = useState<string>();
  const [description, setDescription] = useState<string>();

  async function handleSubmit(e: FormEvent<HTMLFormElement>) {
    e.preventDefault();
    if (title === undefined || amount === undefined) return;
    await axios
      .post("/goals/create-goal", {
        title,
        finalAmount: amount,
        category,
        description,
      })
      .then((res) => {
        localStorage.setItem("userData", JSON.stringify(res.data.data));
        setUserData(res.data.data);
      });
  }

  return (
    <Card className="max-w-[400px]">
      <form
        onSubmit={(e) => {
          handleSubmit(e);
        }}
      >
        <CardHeader>
          <CardTitle>Add a New Goal</CardTitle>
          <CardDescription>
            Create a goal for yourself to save money!
          </CardDescription>
        </CardHeader>
        <CardContent className="sm:max-w-[425px]">
          <div className="grid gap-4 py-4">
            <div className="">
              <Label htmlFor="title" className="text-right">
                Title
              </Label>
              <Input
                id="title"
                className="col-span-3"
                type="text"
                maxLength={30}
                required
                placeholder="To buy a house"
                onChange={(e) => {
                  setTitle(e.target.value);
                }}
              />
            </div>
            <div className="">
              <Label htmlFor="amount" className="text-right">
                Amount
              </Label>
              <Input
                id="amount"
                className="col-span-3"
                type="number"
                min={1}
                required
                placeholder="How much do you want to save?"
                onChange={(e) => {
                  setAmount(+e.target.value);
                }}
              />
            </div>
            <div>
              <Label>Category</Label>
              <Select onValueChange={(value) => setCategory(value)}>
                <SelectTrigger className="h-9 data-[placeholder]:text-muted-foreground">
                  <SelectValue placeholder="Optional Category" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Savings">Savings</SelectItem>
                  <SelectItem value="Investment">Investment</SelectItem>
                  <SelectItem value="Emergency">Emergency</SelectItem>
                  <SelectItem value="Travel">Travel</SelectItem>
                  <SelectItem value="Retirement">Retirement</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="">
              <Label htmlFor="description" className="">
                Description
              </Label>
              <Textarea
                id="description"
                placeholder="Optional description here"
                onChange={(e) => {
                  setDescription(e.target.value);
                }}
              />
            </div>
          </div>
        </CardContent>
        <CardFooter>
          <Button type="submit">Save changes</Button>
        </CardFooter>
      </form>
    </Card>
  );
}

export default FirstGoal;



================================================
FILE: frontend/src/components/GoalsDisplay.tsx
================================================
import { useEffect, useState, useContext } from "react";
import { AppContext } from "@/App";
import axios from "axios";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import AddNewGoal from "./AddNewGoal";
import SingularGoalView from "./SingularGoalView";
import GoalsSkeleton from "./GoalsSkeleton";
import { useParams, useNavigate } from "react-router-dom";
import { useQuery } from "@tanstack/react-query";
import { formatter } from "@/utils/formatter";

type GoalType = {
  _id: string;
  title: string;
  description: string;
  category: string;
  currentAmount: number;
  finalAmount: number;
};

function GoalsDisplay() {
  const { userData, selectedGoal, setSelectedGoal } = useContext(AppContext);
  const [isSelected, setIsSelected] = useState(false);
  const { goalId } = useParams();
  const navigate = useNavigate();

  const { data, isPending, error, refetch } = useQuery({
    queryKey: ["get-goals"],
    queryFn: async () => {
      return axios
        .get("/goals/get-goals")
        .then((res) => res.data.data.goals.reverse());
    },
  });

  useEffect(() => {
    refetch();
  }, [selectedGoal]); // eslint-disable-line react-hooks/exhaustive-deps

  useEffect(() => {
    if (!goalId) setIsSelected(false);
  }, [goalId]);

  if (error) return "Error";

  return (
    <div className="flex gap-6 flex-col md:flex-row">
      {isPending ? (
        <GoalsSkeleton />
      ) : (
        <ScrollArea className="h-[75vh] sm:w-[400px] rounded-xl">
          {data.map((goal: GoalType) => (
            <Card
              className="mt-4 sm:mr-4 hover:bg-accent hover:cursor-pointer"
              key={goal._id}
              onClick={() => {
                setSelectedGoal(goal);
                setIsSelected(true);
                navigate(`/goals/${goal._id}`);
              }}
            >
              <CardHeader>
                <CardTitle className="text-lg">{goal.title}</CardTitle>
                <div>
                  <Badge className="text-xs">{goal.category}</Badge>
                </div>
              </CardHeader>
              <CardContent>
                <div className="flex justify-center items-center gap-2 sm:gap-6 font-semibold">
                  {userData.user.currency}
                  {formatter.format(goal.currentAmount)}
                  <Progress
                    value={(goal.currentAmount * 100) / goal.finalAmount}
                  />
                  {userData.user.currency}
                  {formatter.format(goal.finalAmount)}
                </div>
              </CardContent>
            </Card>
          ))}
        </ScrollArea>
      )}
      <div className="flex flex-col justify-between flex-1">
        {goalId === selectedGoal._id && goalId !== undefined ? (
          <SingularGoalView setIsSelected={setIsSelected} />
        ) : (
          <div className="flex flex-col justify-center items-center gap-6 flex-1">
            <h2 className="text-2xl text-primary-foreground font-bold">
              Select a goal to view
            </h2>
            <h2 className="text-xl font-bold text-primary-foreground">or</h2>
            <AddNewGoal />
          </div>
        )}

        {isSelected ? (
          <div className="flex justify-end">
            <AddNewGoal />
          </div>
        ) : (
          <span></span>
        )}
      </div>
    </div>
  );
}

export default GoalsDisplay;



================================================
FILE: frontend/src/components/GoalsSkeleton.tsx
================================================
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "./ui/skeleton";
import { useContext } from "react";
import { AppContext } from "@/App";

function GoalsSkeleton() {
  const { userData } = useContext(AppContext);
  return (
    <div className="h-[75vh] sm:w-[400px]">
      {userData.user.goals.map((goalId: string) => (
        <Card
          className="mt-4 sm:mr-4 hover:bg-accent hover:cursor-pointer"
          key={goalId}
        >
          <CardHeader>
            <CardTitle className="text-lg">
              <Skeleton className="h-6 max-w-44" />
            </CardTitle>
          </CardHeader>
          <CardContent>
            <Skeleton className="h-14" />
          </CardContent>
        </Card>
      ))}
    </div>
  );
}

export default GoalsSkeleton;



================================================
FILE: frontend/src/components/HamburgerMenu.tsx
================================================
import { useState } from "react";
import { Link } from "react-router-dom";
import { LuLayoutDashboard as OverviewIcon } from "react-icons/lu";
import { GrTransaction as TransactionsIcon } from "react-icons/gr";
import { FaMoneyBillTransfer as HomeIcon } from "react-icons/fa6";
import { IoSettingsOutline as SettingsIcon } from "react-icons/io5";
import { VscGraph as StatsIcon } from "react-icons/vsc";
import { TbTargetArrow as GoalsIcon } from "react-icons/tb";
import { PiCrown as ProIcon } from "react-icons/pi";
import { IoPerson as AccountIcon } from "react-icons/io5";
import { IoIosMenu as MenuIcon } from "react-icons/io";
import { IoClose as CloseIcon } from "react-icons/io5";
import { FaCodeBranch as CodeIcon } from "react-icons/fa6";
import LogoutButton from "./LogoutButton";
import { useContext } from "react";
import { AppContext } from "@/App";

function HamburgerMenu() {
  const [menuOpen, setMenuOpen] = useState(false);
  const { showGoals, showTransactions, userData } = useContext(AppContext);

  if (menuOpen) {
    return (
      <div className="text-xl bg-main_yellow gap-8 flex flex-col md:hidden">
        <Link to={"/"} className="flex items-center gap-2 mt-1 ml-6">
          <HomeIcon className="w-12 h-12 text-primary" />
          <h2 className="text-xl font-bold">
            SpendSync
            {userData.user.isPaidUser && (
              <div className="flex gap-2 items-center text-yellow-300">
                <ProIcon className="w-6 h-6" />
                <span className="text-sm font-semibold">Premium</span>
              </div>
            )}
          </h2>
        </Link>
        <button
          className="absolute top-8 right-4"
          onClick={() => {
            setMenuOpen(false);
          }}
        >
          <CloseIcon className="w-12 h-12 text-primary" />
        </button>
        <nav className="text-accent-foreground flex flex-col pl-6 w-52 justify-between">
          <div className="flex flex-col gap-8">
            <Link
              to={"/"}
              className="flex items-center gap-6"
              onClick={() => {
                setMenuOpen(false);
              }}
            >
              <OverviewIcon className="w-6 h-6" />
              <h2 className="text-md">Overview</h2>
            </Link>

            {showTransactions ? (
              <Link
                to={"/transactions"}
                className="flex items-center gap-6"
                onClick={() => {
                  setMenuOpen(false);
                }}
              >
                <TransactionsIcon className="w-6 h-6" />
                <h2 className="text-md">Transactions</h2>
              </Link>
            ) : (
              ""
            )}

            {showGoals ? (
              <Link
                to={"/goals"}
                className="flex items-center gap-6"
                onClick={() => {
                  setMenuOpen(false);
                }}
              >
                <GoalsIcon className="w-6 h-6" />
                <h2 className="text-md">Goals</h2>
              </Link>
            ) : (
              ""
            )}

            <Link
              to={"/statistics"}
              className="flex items-center gap-6"
              onClick={() => {
                setMenuOpen(false);
              }}
            >
              <StatsIcon className="w-6 h-6" />
              <h2 className="text-md">Statistics</h2>
            </Link>

            <Link
              to={"/account"}
              className="flex items-center gap-6"
              onClick={() => {
                setMenuOpen(false);
              }}
            >
              <AccountIcon className="w-6 h-6" />
              <h2 className="text-md">Account</h2>
            </Link>

            <Link
              to={"/settings"}
              className="flex items-center gap-6"
              onClick={() => {
                setMenuOpen(false);
              }}
            >
              <SettingsIcon className="w-6 h-6" />
              <h2 className="text-md">Settings</h2>
            </Link>

            <a
              href="https://github.com/Devansh-Baghel/SpendSync"
              target="_blank"
              className="flex items-center gap-6 hover:text-primary mb-10"
            >
              <CodeIcon className="w-6 h-6" />
              <h2 className="text-md">Source Code</h2>
            </a>
          </div>
          <LogoutButton />
        </nav>
      </div>
    );
  } else {
    return (
      <div className="md:hidden">
        <Link to={"/"} className="flex items-center gap-2 mt-1 ml-6">
          <HomeIcon className="w-12 h-12 text-primary" />
          <h2 className="text-xl font-bold">
            SpendSync
            {userData.user.isPaidUser && (
              <div className="flex gap-2 items-center text-yellow-300">
                <ProIcon className="w-6 h-6" />
                <span className="text-sm font-semibold">Premium</span>
              </div>
            )}
          </h2>
        </Link>
        <button
          className="absolute top-8 right-4"
          onClick={() => {
            setMenuOpen(true);
            window.scrollTo(0, 0);
          }}
        >
          <MenuIcon className="w-12 h-12 text-primary" />
        </button>
      </div>
    );
  }
}

export default HamburgerMenu;



================================================
FILE: frontend/src/components/icons.tsx
================================================
type IconProps = React.HTMLAttributes<SVGElement>

export const Icons = {
  logo: (props: IconProps) => (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256" {...props}>
      <rect width="256" height="256" fill="none" />
      <line
        x1="208"
        y1="128"
        x2="128"
        y2="208"
        fill="none"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="16"
      />
      <line
        x1="192"
        y1="40"
        x2="40"
        y2="192"
        fill="none"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="16"
      />
    </svg>
  ),
  twitter: (props: IconProps) => (
    <svg
      {...props}
      height="23"
      viewBox="0 0 1200 1227"
      width="23"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M714.163 519.284L1160.89 0H1055.03L667.137 450.887L357.328 0H0L468.492 681.821L0 1226.37H105.866L515.491 750.218L842.672 1226.37H1200L714.137 519.284H714.163ZM569.165 687.828L521.697 619.934L144.011 79.6944H306.615L611.412 515.685L658.88 583.579L1055.08 1150.3H892.476L569.165 687.854V687.828Z" />
    </svg>
  ),
  gitHub: (props: IconProps) => (
    <svg viewBox="0 0 438.549 438.549" {...props}>
      <path
        fill="currentColor"
        d="M409.132 114.573c-19.608-33.596-46.205-60.194-79.798-79.8-33.598-19.607-70.277-29.408-110.063-29.408-39.781 0-76.472 9.804-110.063 29.408-33.596 19.605-60.192 46.204-79.8 79.8C9.803 148.168 0 184.854 0 224.63c0 47.78 13.94 90.745 41.827 128.906 27.884 38.164 63.906 64.572 108.063 79.227 5.14.954 8.945.283 11.419-1.996 2.475-2.282 3.711-5.14 3.711-8.562 0-.571-.049-5.708-.144-15.417a2549.81 2549.81 0 01-.144-25.406l-6.567 1.136c-4.187.767-9.469 1.092-15.846 1-6.374-.089-12.991-.757-19.842-1.999-6.854-1.231-13.229-4.086-19.13-8.559-5.898-4.473-10.085-10.328-12.56-17.556l-2.855-6.57c-1.903-4.374-4.899-9.233-8.992-14.559-4.093-5.331-8.232-8.945-12.419-10.848l-1.999-1.431c-1.332-.951-2.568-2.098-3.711-3.429-1.142-1.331-1.997-2.663-2.568-3.997-.572-1.335-.098-2.43 1.427-3.289 1.525-.859 4.281-1.276 8.28-1.276l5.708.853c3.807.763 8.516 3.042 14.133 6.851 5.614 3.806 10.229 8.754 13.846 14.842 4.38 7.806 9.657 13.754 15.846 17.847 6.184 4.093 12.419 6.136 18.699 6.136 6.28 0 11.704-.476 16.274-1.423 4.565-.952 8.848-2.383 12.847-4.285 1.713-12.758 6.377-22.559 13.988-29.41-10.848-1.14-20.601-2.857-29.264-5.14-8.658-2.286-17.605-5.996-26.835-11.14-9.235-5.137-16.896-11.516-22.985-19.126-6.09-7.614-11.088-17.61-14.987-29.979-3.901-12.374-5.852-26.648-5.852-42.826 0-23.035 7.52-42.637 22.557-58.817-7.044-17.318-6.379-36.732 1.997-58.24 5.52-1.715 13.706-.428 24.554 3.853 10.85 4.283 18.794 7.952 23.84 10.994 5.046 3.041 9.089 5.618 12.135 7.708 17.705-4.947 35.976-7.421 54.818-7.421s37.117 2.474 54.823 7.421l10.849-6.849c7.419-4.57 16.18-8.758 26.262-12.565 10.088-3.805 17.802-4.853 23.134-3.138 8.562 21.509 9.325 40.922 2.279 58.24 15.036 16.18 22.559 35.787 22.559 58.817 0 16.178-1.958 30.497-5.853 42.966-3.9 12.471-8.941 22.457-15.125 29.979-6.191 7.521-13.901 13.85-23.131 18.986-9.232 5.14-18.182 8.85-26.84 11.136-8.662 2.286-18.415 4.004-29.263 5.146 9.894 8.562 14.842 22.077 14.842 40.539v60.237c0 3.422 1.19 6.279 3.572 8.562 2.379 2.279 6.136 2.95 11.276 1.995 44.163-14.653 80.185-41.062 108.068-79.226 27.88-38.161 41.825-81.126 41.825-128.906-.01-39.771-9.818-76.454-29.414-110.049z"
      ></path>
    </svg>
  ),
  radix: (props: IconProps) => (
    <svg viewBox="0 0 25 25" fill="none" {...props}>
      <path
        d="M12 25C7.58173 25 4 21.4183 4 17C4 12.5817 7.58173 9 12 9V25Z"
        fill="currentcolor"
      ></path>
      <path d="M12 0H4V8H12V0Z" fill="currentcolor"></path>
      <path
        d="M17 8C19.2091 8 21 6.20914 21 4C21 1.79086 19.2091 0 17 0C14.7909 0 13 1.79086 13 4C13 6.20914 14.7909 8 17 8Z"
        fill="currentcolor"
      ></path>
    </svg>
  ),
  aria: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" fill="currentColor" {...props}>
      <path d="M13.966 22.624l-1.69-4.281H8.122l3.892-9.144 5.662 13.425zM8.884 1.376H0v21.248zm15.116 0h-8.884L24 22.624Z" />
    </svg>
  ),
  npm: (props: IconProps) => (
    <svg viewBox="0 0 24 24" {...props}>
      <path
        d="M1.763 0C.786 0 0 .786 0 1.763v20.474C0 23.214.786 24 1.763 24h20.474c.977 0 1.763-.786 1.763-1.763V1.763C24 .786 23.214 0 22.237 0zM5.13 5.323l13.837.019-.009 13.836h-3.464l.01-10.382h-3.456L12.04 19.17H5.113z"
        fill="currentColor"
      />
    </svg>
  ),
  yarn: (props: IconProps) => (
    <svg viewBox="0 0 24 24" {...props}>
      <path
        d="M12 0C5.375 0 0 5.375 0 12s5.375 12 12 12 12-5.375 12-12S18.625 0 12 0zm.768 4.105c.183 0 .363.053.525.157.125.083.287.185.755 1.154.31-.088.468-.042.551-.019.204.056.366.19.463.375.477.917.542 2.553.334 3.605-.241 1.232-.755 2.029-1.131 2.576.324.329.778.899 1.117 1.825.278.774.31 1.478.273 2.015a5.51 5.51 0 0 0 .602-.329c.593-.366 1.487-.917 2.553-.931.714-.009 1.269.445 1.353 1.103a1.23 1.23 0 0 1-.945 1.362c-.649.158-.95.278-1.821.843-1.232.797-2.539 1.242-3.012 1.39a1.686 1.686 0 0 1-.704.343c-.737.181-3.266.315-3.466.315h-.046c-.783 0-1.214-.241-1.45-.491-.658.329-1.51.19-2.122-.134a1.078 1.078 0 0 1-.58-1.153 1.243 1.243 0 0 1-.153-.195c-.162-.25-.528-.936-.454-1.946.056-.723.556-1.367.88-1.71a5.522 5.522 0 0 1 .408-2.256c.306-.727.885-1.348 1.32-1.737-.32-.537-.644-1.367-.329-2.21.227-.602.412-.936.82-1.08h-.005c.199-.074.389-.153.486-.259a3.418 3.418 0 0 1 2.298-1.103c.037-.093.079-.185.125-.283.31-.658.639-1.029 1.024-1.168a.94.94 0 0 1 .328-.06zm.006.7c-.507.016-1.001 1.519-1.001 1.519s-1.27-.204-2.266.871c-.199.218-.468.334-.746.44-.079.028-.176.023-.417.672-.371.991.625 2.094.625 2.094s-1.186.839-1.626 1.881c-.486 1.144-.338 2.261-.338 2.261s-.843.732-.899 1.487c-.051.663.139 1.2.343 1.515.227.343.51.176.51.176s-.561.653-.037.931c.477.25 1.283.394 1.71-.037.31-.31.371-1.001.486-1.283.028-.065.12.111.209.199.097.093.264.195.264.195s-.755.324-.445 1.066c.102.246.468.403 1.066.398.222-.005 2.664-.139 3.313-.296.375-.088.505-.283.505-.283s1.566-.431 2.998-1.357c.917-.598 1.293-.76 2.034-.936.612-.148.57-1.098-.241-1.084-.839.009-1.575.44-2.196.825-1.163.718-1.742.672-1.742.672l-.018-.032c-.079-.13.371-1.293-.134-2.678-.547-1.515-1.413-1.881-1.344-1.997.297-.5 1.038-1.297 1.334-2.78.176-.899.13-2.377-.269-3.151-.074-.144-.732.241-.732.241s-.616-1.371-.788-1.483a.271.271 0 0 0-.157-.046z"
        fill="currentColor"
      />
    </svg>
  ),
  pnpm: (props: IconProps) => (
    <svg viewBox="0 0 24 24" {...props}>
      <path
        d="M0 0v7.5h7.5V0zm8.25 0v7.5h7.498V0zm8.25 0v7.5H24V0zM8.25 8.25v7.5h7.498v-7.5zm8.25 0v7.5H24v-7.5zM0 16.5V24h7.5v-7.5zm8.25 0V24h7.498v-7.5zm8.25 0V24H24v-7.5z"
        fill="currentColor"
      />
    </svg>
  ),
  react: (props: IconProps) => (
    <svg viewBox="0 0 24 24" {...props}>
      <path
        d="M14.23 12.004a2.236 2.236 0 0 1-2.235 2.236 2.236 2.236 0 0 1-2.236-2.236 2.236 2.236 0 0 1 2.235-2.236 2.236 2.236 0 0 1 2.236 2.236zm2.648-10.69c-1.346 0-3.107.96-4.888 2.622-1.78-1.653-3.542-2.602-4.887-2.602-.41 0-.783.093-1.106.278-1.375.793-1.683 3.264-.973 6.365C1.98 8.917 0 10.42 0 12.004c0 1.59 1.99 3.097 5.043 4.03-.704 3.113-.39 5.588.988 6.38.32.187.69.275 1.102.275 1.345 0 3.107-.96 4.888-2.624 1.78 1.654 3.542 2.603 4.887 2.603.41 0 .783-.09 1.106-.275 1.374-.792 1.683-3.263.973-6.365C22.02 15.096 24 13.59 24 12.004c0-1.59-1.99-3.097-5.043-4.032.704-3.11.39-5.587-.988-6.38-.318-.184-.688-.277-1.092-.278zm-.005 1.09v.006c.225 0 .406.044.558.127.666.382.955 1.835.73 3.704-.054.46-.142.945-.25 1.44-.96-.236-2.006-.417-3.107-.534-.66-.905-1.345-1.727-2.035-2.447 1.592-1.48 3.087-2.292 4.105-2.295zm-9.77.02c1.012 0 2.514.808 4.11 2.28-.686.72-1.37 1.537-2.02 2.442-1.107.117-2.154.298-3.113.538-.112-.49-.195-.964-.254-1.42-.23-1.868.054-3.32.714-3.707.19-.09.4-.127.563-.132zm4.882 3.05c.455.468.91.992 1.36 1.564-.44-.02-.89-.034-1.345-.034-.46 0-.915.01-1.36.034.44-.572.895-1.096 1.345-1.565zM12 8.1c.74 0 1.477.034 2.202.093.406.582.802 1.203 1.183 1.86.372.64.71 1.29 1.018 1.946-.308.655-.646 1.31-1.013 1.95-.38.66-.773 1.288-1.18 1.87-.728.063-1.466.098-2.21.098-.74 0-1.477-.035-2.202-.093-.406-.582-.802-1.204-1.183-1.86-.372-.64-.71-1.29-1.018-1.946.303-.657.646-1.313 1.013-1.954.38-.66.773-1.286 1.18-1.868.728-.064 1.466-.098 2.21-.098zm-3.635.254c-.24.377-.48.763-.704 1.16-.225.39-.435.782-.635 1.174-.265-.656-.49-1.31-.676-1.947.64-.15 1.315-.283 2.015-.386zm7.26 0c.695.103 1.365.23 2.006.387-.18.632-.405 1.282-.66 1.933-.2-.39-.41-.783-.64-1.174-.225-.392-.465-.774-.705-1.146zm3.063.675c.484.15.944.317 1.375.498 1.732.74 2.852 1.708 2.852 2.476-.005.768-1.125 1.74-2.857 2.475-.42.18-.88.342-1.355.493-.28-.958-.646-1.956-1.1-2.98.45-1.017.81-2.01 1.085-2.964zm-13.395.004c.278.96.645 1.957 1.1 2.98-.45 1.017-.812 2.01-1.086 2.964-.484-.15-.944-.318-1.37-.5-1.732-.737-2.852-1.706-2.852-2.474 0-.768 1.12-1.742 2.852-2.476.42-.18.88-.342 1.356-.494zm11.678 4.28c.265.657.49 1.312.676 1.948-.64.157-1.316.29-2.016.39.24-.375.48-.762.705-1.158.225-.39.435-.788.636-1.18zm-9.945.02c.2.392.41.783.64 1.175.23.39.465.772.705 1.143-.695-.102-1.365-.23-2.006-.386.18-.63.406-1.282.66-1.933zM17.92 16.32c.112.493.2.968.254 1.423.23 1.868-.054 3.32-.714 3.708-.147.09-.338.128-.563.128-1.012 0-2.514-.807-4.11-2.28.686-.72 1.37-1.536 2.02-2.44 1.107-.118 2.154-.3 3.113-.54zm-11.83.01c.96.234 2.006.415 3.107.532.66.905 1.345 1.727 2.035 2.446-1.595 1.483-3.092 2.295-4.11 2.295-.22-.005-.406-.05-.553-.132-.666-.38-.955-1.834-.73-3.703.054-.46.142-.944.25-1.438zm4.56.64c.44.02.89.034 1.345.034.46 0 .915-.01 1.36-.034-.44.572-.895 1.095-1.345 1.565-.455-.47-.91-.993-1.36-1.565z"
        fill="currentColor"
      />
    </svg>
  ),
  tailwind: (props: IconProps) => (
    <svg viewBox="0 0 24 24" {...props}>
      <path
        d="M12.001,4.8c-3.2,0-5.2,1.6-6,4.8c1.2-1.6,2.6-2.2,4.2-1.8c0.913,0.228,1.565,0.89,2.288,1.624 C13.666,10.618,15.027,12,18.001,12c3.2,0,5.2-1.6,6-4.8c-1.2,1.6-2.6,2.2-4.2,1.8c-0.913-0.228-1.565-0.89-2.288-1.624 C16.337,6.182,14.976,4.8,12.001,4.8z M6.001,12c-3.2,0-5.2,1.6-6,4.8c1.2-1.6,2.6-2.2,4.2-1.8c0.913,0.228,1.565,0.89,2.288,1.624 c1.177,1.194,2.538,2.576,5.512,2.576c3.2,0,5.2-1.6,6-4.8c-1.2,1.6-2.6,2.2-4.2,1.8c-0.913-0.228-1.565-0.89-2.288-1.624 C10.337,13.382,8.976,12,6.001,12z"
        fill="currentColor"
      />
    </svg>
  ),
  google: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" {...props}>
      <path
        fill="currentColor"
        d="M12.48 10.92v3.28h7.84c-.24 1.84-.853 3.187-1.787 4.133-1.147 1.147-2.933 2.4-6.053 2.4-4.827 0-8.6-3.893-8.6-8.72s3.773-8.72 8.6-8.72c2.6 0 4.507 1.027 5.907 2.347l2.307-2.307C18.747 1.44 16.133 0 12.48 0 5.867 0 .307 5.387.307 12s5.56 12 12.173 12c3.573 0 6.267-1.173 8.373-3.36 2.16-2.16 2.84-5.213 2.84-7.667 0-.76-.053-1.467-.173-2.053H12.48z"
      />
    </svg>
  ),
  apple: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" {...props}>
      <path
        d="M12.152 6.896c-.948 0-2.415-1.078-3.96-1.04-2.04.027-3.91 1.183-4.961 3.014-2.117 3.675-.546 9.103 1.519 12.09 1.013 1.454 2.208 3.09 3.792 3.039 1.52-.065 2.09-.987 3.935-.987 1.831 0 2.35.987 3.96.948 1.637-.026 2.676-1.48 3.676-2.948 1.156-1.688 1.636-3.325 1.662-3.415-.039-.013-3.182-1.221-3.22-4.857-.026-3.04 2.48-4.494 2.597-4.559-1.429-2.09-3.623-2.324-4.39-2.376-2-.156-3.675 1.09-4.61 1.09zM15.53 3.83c.843-1.012 1.4-2.427 1.245-3.83-1.207.052-2.662.805-3.532 1.818-.78.896-1.454 2.338-1.273 3.714 1.338.104 2.715-.688 3.559-1.701"
        fill="currentColor"
      />
    </svg>
  ),
  paypal: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" {...props}>
      <path
        d="M7.076 21.337H2.47a.641.641 0 0 1-.633-.74L4.944.901C5.026.382 5.474 0 5.998 0h7.46c2.57 0 4.578.543 5.69 1.81 1.01 1.15 1.304 2.42 1.012 4.287-.023.143-.047.288-.077.437-.983 5.05-4.349 6.797-8.647 6.797h-2.19c-.524 0-.968.382-1.05.9l-1.12 7.106zm14.146-14.42a3.35 3.35 0 0 0-.607-.541c-.013.076-.026.175-.041.254-.93 4.778-4.005 7.201-9.138 7.201h-2.19a.563.563 0 0 0-.556.479l-1.187 7.527h-.506l-.24 1.516a.56.56 0 0 0 .554.647h3.882c.46 0 .85-.334.922-.788.06-.26.76-4.852.816-5.09a.932.932 0 0 1 .923-.788h.58c3.76 0 6.705-1.528 7.565-5.946.36-1.847.174-3.388-.777-4.471z"
        fill="currentColor"
      />
    </svg>
  ),
  spinner: (props: IconProps) => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      {...props}
    >
      <path d="M21 12a9 9 0 1 1-6.219-8.56" />
    </svg>
  ),
}



================================================
FILE: frontend/src/components/IncomeAndExpense.tsx
================================================
import { AppContext } from "@/App";
import { useContext } from "react";
import { Link } from "react-router-dom";

const formatter = new Intl.NumberFormat("en-US");

function IncomeAndExpense() {
  const { userData } = useContext(AppContext);

  return (
    <div className="bg-card max-w-80 h-52 rounded-[20px] p-5 flex flex-col items-center gap-4 justify-center text-center shadow-md">
      <h3>
        Your expenses are{" "}
        <span className="font-bold text-primary">
          {((userData.user.expense * 100) / userData.user.income).toFixed(1)}%
        </span>{" "}
        of your income
      </h3>
      <div className="flex gap-4">
        <div className="bg-primary sm:min-w-32 h-20 rounded-xl text-center text-background p-2">
          <p className="">Income</p>
          <p className="font-bold text-2xl">
            {userData.user.currency}
            {formatter.format(userData.user.income)}
          </p>
        </div>
        <div className="bg-primary  sm:min-w-32 h-20 rounded-xl text-center text-background p-2">
          <p className="">Expense</p>
          <p className="font-bold text-2xl">
            {userData.user.currency}
            {formatter.format(userData.user.expense)}
          </p>
        </div>
      </div>
      <p className=" text-sm">
        You can update this{" "}
        <Link className="text-primary font-bold" to={"/account"}>
          here.
        </Link>{" "}
      </p>
      {/* <Button className="">Make a transaction</Button> */}
    </div>
  );
}

export default IncomeAndExpense;



================================================
FILE: frontend/src/components/IncomeTransactionCard.tsx
================================================
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { format } from "date-fns";
import { cn } from "@/lib/utils";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Calendar } from "@/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { CalendarIcon } from "@radix-ui/react-icons";
import { FormEvent, useContext, useState } from "react";
import toast from "react-hot-toast";
import axios from "axios";
import { AppContext } from "@/App";

function IncomeTransactionCard() {
  const [title, setTitle] = useState<string>();
  const [amount, setAmount] = useState<number>();
  const [category, setCategory] = useState<string>("Salary");
  const [date, setDate] = useState<Date | undefined>();
  const [receipt, setReceipt] = useState<File | undefined>();
  const { setUserData } = useContext(AppContext);

  function createExpense(e: FormEvent<HTMLFormElement>) {
    e.preventDefault();

    if (!title) {
      toast.error("Title is required");
      return;
    }
    if (!amount) {
      toast.error("Amount is required");
      return;
    }

    if (receipt) {
      if (!["image/jpeg", "image/png"].includes(receipt?.type)) {
        toast.error("Only jpeg and png files are allowed");
        return;
      }

      const formData = new FormData();
      formData.append("receipt", receipt);
      formData.append("title", title);
      formData.append("amount", amount.toString());
      if (category !== undefined) formData.append("category", category);
      formData.append("date", date?.toISOString() || "");

      const toastPromise = axios
        .post("/transaction/create-income", formData, {
          headers: {
            "Content-Type": "multipart/form-data",
          },
        })
        .then((res) => {
          localStorage.setItem("userData", JSON.stringify(res.data.data));
          setUserData(res.data.data);
        });

      toast.promise(
        toastPromise,
        {
          loading: "Saving income...",
          success: "Income saved successfully!",
          error: "Failed to save income. Please try again.",
        },
        {
          id: "saving-income",
        }
      );
    } else {
      const data = {
        title,
        amount,
        category,
        date,
      };

      const toastPromise = axios
        .post("/transaction/create-income", data)
        .then((res) => {
          localStorage.setItem("userData", JSON.stringify(res.data.data));
          setUserData(res.data.data);
        });

      toast.promise(
        toastPromise,
        {
          loading: "Saving income...",
          success: "Income saved successfully!",
          error: "Failed to save income. Please try again.",
        },
        {
          id: "saving-income",
        }
      );
    }
  }

  return (
    <Card>
      <form onSubmit={createExpense}>
        <CardHeader>
          <CardTitle>Add Income</CardTitle>
        </CardHeader>
        <CardContent className="space-y-2 flex flex-col gap-1.5">
          <div className="space-y-1">
            <Label htmlFor="title">Title</Label>
            <Input
              id="title"
              placeholder="Salary!"
              maxLength={40}
              required
              onChange={(e) => setTitle(e.target.value)}
            />
          </div>

          <div className="flex sm:items-center gap-4 sm:gap-6 flex-col sm:flex-row">
            <div className="flex-1 space-y-1 mb-[5px]">
              <Label htmlFor="amount">Amount</Label>
              <Input
                id="amount"
                type="number"
                min={1}
                required
                placeholder="+ 8,400"
                onChange={(e) => setAmount(+e.target.value)}
              />
            </div>
            <div className="flex flex-col gap-1.5">
              <Label>Date</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant={"outline"}
                    type="button"
                    className={cn(
                      "sm:w-[160px] justify-start text-left font-normal",
                      !date && "text-muted-foreground"
                    )}
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {date ? format(date, "PPP") : <span>Pick a date</span>}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0" align="start">
                  <Calendar
                    mode="single"
                    selected={date}
                    onSelect={setDate}
                    initialFocus
                    id="date"
                  />
                </PopoverContent>
              </Popover>
            </div>
          </div>
          <div className="space-y-1">
            <Label>Category</Label>
            <Select
              onValueChange={(value) => setCategory(value)}
              value={category}
            >
              <SelectTrigger className="h-9 data-[placeholder]:text-muted-foreground">
                <SelectValue placeholder="Optional Category" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="Salary">Salary</SelectItem>
                <SelectItem value="Business">Business</SelectItem>
                <SelectItem value="Extra Income">Extra Income</SelectItem>
                <SelectItem value="Loan">Loan</SelectItem>
                <SelectItem value="Gifts">Gifts</SelectItem>
                <SelectItem value="Other">Other</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-1">
            <Label htmlFor="receipt" className="tex-md">
              Upload Receipt
            </Label>
            <Input
              id="receipt"
              type="file"
              name="receipt"
              className="file:text-primary h-10 file:mt-1 cursor-pointer"
              accept="image/png, image/jpeg"
              onChange={(e) => {
                if (!e.target.files) return;
                setReceipt(e.target.files[0]);
              }}
            />
          </div>
        </CardContent>
        <CardFooter>
          <Button type="submit">Save changes</Button>
        </CardFooter>
      </form>
    </Card>
  );
}

export default IncomeTransactionCard;



================================================
FILE: frontend/src/components/InitialDeposit.tsx
================================================
import { Button } from "@/components/ui/button";
import { FormEvent, useContext, useState } from "react";
import { AppContext } from "@/App";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import axios from "axios";
import { toast } from "react-hot-toast";

const formatter = new Intl.NumberFormat("en-US");

function InitialDeposit() {
  const { setUserData } = useContext(AppContext);
  const [modalOpen, setModalOpen] = useState(false);
  const [deposit, setDeposit] = useState<number>();

  async function addInitialDeposit(e: FormEvent<HTMLFormElement>) {
    e.preventDefault();
    if (deposit === undefined) {
      toast.error("Initial deposit is required");
      return;
    }
    if (deposit < 1) toast.error("Initial deposit can't be less than $1");

    await axios
      .post("/users/initial-deposit", {
        depositAmount: deposit,
      })
      .then((res) => {
        localStorage.setItem("userData", JSON.stringify(res.data.data));
        setUserData(res.data.data);
        setModalOpen(false);
        toast.success(
          `Initial deposit of $${formatter.format(deposit)} added!`
        );
      });
  }

  return (
    <div className="bg-card sm:w-80 h-60 rounded-[20px] p-5 flex flex-col items-center gap-10">
      <h3 className="text-center text-md">Your account is empty</h3>
      <h2 className="text-4xl"> $0 </h2>

      <Dialog open={modalOpen} onOpenChange={setModalOpen}>
        <DialogTrigger asChild>
          <Button>Add Initial Deposit</Button>
        </DialogTrigger>
        <DialogContent className="sm:max-w-[425px]">
          <form onSubmit={addInitialDeposit}>
            <DialogHeader>
              <DialogTitle>Add Initial Deposit</DialogTitle>
              <DialogDescription>
                Add the money that you currently have. Click save when you're
                done.
              </DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="flex flex-col grid-cols-4 gap-1.5">
                <Label htmlFor="deposit" className="">
                  Initial Deposit
                </Label>
                <Input
                  id="deposit"
                  className="col-span-3"
                  type="number"
                  min="1"
                  required
                  onChange={(e) => {
                    setDeposit(+e.target.value);
                  }}
                />
              </div>
            </div>
            <DialogFooter>
              <Button type="submit">Save changes</Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>
    </div>
  );
}

export default InitialDeposit;



================================================
FILE: frontend/src/components/LogoutButton.tsx
================================================
import { AppContext } from "@/App";
import { useContext } from "react";
import axios from "axios";
import { HiOutlineLogout as LogoutIcon } from "react-icons/hi";
import { toast } from "react-hot-toast";

function LogoutButton() {
  const { setIsLoggedIn } = useContext(AppContext);

  async function handleLogout() {
    const toastPromise = axios.post("/users/logout").then(() => {
      localStorage.removeItem("userStatus");
      setIsLoggedIn(false);
    });

    toast.promise(toastPromise, {
      success: "Logged out",
      loading: "Logging out",
      error: "Unable to log out",
    });
  }

  return (
    <button
      className="flex items-center gap-6 hover:text-red-500"
      onClick={() => {
        handleLogout();
      }}
    >
      <LogoutIcon className="w-6 h-6 " />
      Log out
    </button>
  );
}

export default LogoutButton;



================================================
FILE: frontend/src/components/mode-toggle.tsx
================================================
import { Moon, Sun } from "lucide-react"

import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { useTheme } from "@/components/theme-provider"

export function ModeToggle() {
  const { setTheme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}



================================================
FILE: frontend/src/components/MoreAccountOptions.tsx
================================================
import { Card, CardContent, CardTitle } from "./ui/card";
import { Button } from "@/components/ui/button";
import Feedback from "@/components/Feedback";
import UpdateAccountBalance from "./UpdateAccountBalance";
import UpdateIncomeAndExpense from "./UpdateIncomeAndExpense";
import toast from "react-hot-toast";
import { json2csv } from "json-2-csv";
import axios from "axios";

function MoreAccountOptions() {
  function downloadTransactions() {
    const transactions = axios
      .get("/transaction/get-transactions")
      .then((res: { data: { data: { transactions: [] } } }) => {
        const csv = json2csv(res.data.data.transactions.reverse());
        const blob = new Blob([csv], { type: "text/csv" });
        const url = window.URL.createObjectURL(blob);
        const link = document.createElement("a");
        link.href = url;
        link.setAttribute("download", "transactions.csv");
        document.body.appendChild(link);
        link.click();
        // Cleanup
        document.body.removeChild(link);
        window.URL.revokeObjectURL(url);
      });

    toast.promise(transactions, {
      success: "Downloaded transactions data",
      loading: "Downloading transactions data",
      error: "Failed to download transactions data",
    });
  }

  function downloadGoals() {
    const goals = axios
      .get("/goals/get-goals")
      .then((res: { data: { data: { goals: [] } } }) => {
        const csv = json2csv(res.data.data.goals.reverse());
        const blob = new Blob([csv], { type: "text/csv" });
        const url = window.URL.createObjectURL(blob);
        const link = document.createElement("a");
        link.href = url;
        link.setAttribute("download", "goals.csv");
        document.body.appendChild(link);
        link.click();
        // Cleanup
        document.body.removeChild(link);
        window.URL.revokeObjectURL(url);
      });

    toast.promise(goals, {
      success: "Downloaded goals data",
      loading: "Downloading goals data",
      error: "Failed to download goals data",
    });
  }

  return (
    <Card className="sm:px-10 pt-6 flex-1 pl-5">
      <CardTitle className="text-xl font-medium">More Options</CardTitle>
      <CardContent className="flex flex-col ml-0 pl-0 mt-6 gap-6">
        <div className="flex gap-6 flex-col sm:flex-row">
          <UpdateAccountBalance />
          <Button
            variant={"outline"}
            className="flex-1"
            onClick={downloadTransactions}
          >
            Export Transactions Data
          </Button>
        </div>
        <div className="flex gap-6 flex-col sm:flex-row">
          <UpdateIncomeAndExpense />
          <Button
            variant={"outline"}
            className="flex-1"
            onClick={downloadGoals}
          >
            Export Goals Data
          </Button>
        </div>

        <Feedback />
      </CardContent>
    </Card>
  );
}

export default MoreAccountOptions;



================================================
FILE: frontend/src/components/Navbar.tsx
================================================
function Navbar() {
  return (
    <div>::Navbar Goes Here::</div>
  )
}

export default Navbar



================================================
FILE: frontend/src/components/NotFound.tsx
================================================
import { Link } from "react-router-dom";

export default function NotFound() {
  return (
    <div className="flex items-center justify-center min-h-[100vh] flex-col gap-4 px-4 md:px-6">
      <div className="space-y-2 text-center">
        <h1 className="text-4xl font-bold tracking-tighter/none">
          404: Page not found
        </h1>
        <p className="text-gray-500 dark:text-gray-400">
          Sorry, we couldn't find the page you're looking for.
        </p>
      </div>
      <Link
        className="inline-flex h-10 items-center justify-center rounded-md bg-gray-900 px-8 text-sm font-medium text-gray-50 shadow transition-colors hover:bg-gray-900/90 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-gray-950 disabled:pointer-events-none disabled:opacity-50 dark:bg-gray-50 dark:text-gray-900 dark:hover:bg-gray-50/90 dark:focus-visible:ring-gray-300"
        to="/"
      >
        Return to the homepage
      </Link>
    </div>
  );
}



================================================
FILE: frontend/src/components/RecentTransactions.tsx
================================================
import { useQuery } from "@tanstack/react-query";
import axios from "axios";
import { TransactionType } from "./TransactionDisplay";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Card,
  CardHeader,
  CardContent,
  CardFooter,
  CardTitle,
} from "./ui/card";
import { useNavigate, Link } from "react-router-dom";
import { formatter } from "@/utils/formatter";
import { useContext } from "react";
import { AppContext } from "@/App";
import { Button } from "./ui/button";
import { Skeleton } from "./ui/skeleton";

function RecentTransactions() {
  const { userData } = useContext(AppContext);
  const navigate = useNavigate();
  const { data, isLoading, error } = useQuery({
    queryKey: ["recent-transactions"],
    queryFn: async () => {
      if (
        !userData.user?.transactionHistory ||
        userData.user.transactionHistory?.length === 0
      )
        return null;
      return axios
        .get("/transaction/recent-transactions")
        .then((res) => res.data.data.transactions);
    },
  });

  // Make the table-row-element to behave like a real button, can't use a real Link element or button to wrap the table-row as that messes up default shadcn table styling
  const onKeyDown = (
    event: React.KeyboardEvent<HTMLTableRowElement>,
    id: string
  ) => {
    if (event.key === "Enter" || event.key === " ") {
      navigate(`/transactions/${id}`);
    }
    return;
  };

  if (
    !userData.user?.transactionHistory ||
    userData.user.transactionHistory?.length === 0
  ) {
    return (
      <Card className="">
        <CardHeader>
          <CardTitle>Recent Transactions</CardTitle>
        </CardHeader>
        <CardContent className="lg:w-[500px] flex flex-col justify-center items-center gap-6 pt-8 pb-12">
          <h3 className="text-primary font-bold text-lg">
            You don't have any transactions
          </h3>
          <Link to={"/create-transaction"}>
            <Button className="">Make a transaction</Button>
          </Link>
        </CardContent>
      </Card>
    );
  }

  if (error) return "error";
  return (
    <Card className="rounded-xl bg-background shadow-md">
      <CardHeader className="text-lg">
        <CardTitle>Recent Transactions</CardTitle>
      </CardHeader>
      <CardContent>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="md:w-[150px]">Type</TableHead>
              <TableHead className="lg:w-[250px]">Title</TableHead>
              <TableHead className="lg:w-[150px]">Amount</TableHead>
            </TableRow>
          </TableHeader>

          {isLoading ? (
            <TableBody className="text-xs sm:text-sm">
              {[1, 2, 3, 4, 5].map((index) => (
                <TableRow key={index} className="cursor-pointer">
                  <TableCell className="font-medium">
                    <Skeleton className="h-6 rounded-xl" />
                  </TableCell>
                  <TableCell>
                    <Skeleton className="h-6 rounded-xl" />
                  </TableCell>
                  <TableCell className="">
                    <Skeleton className="h-6 rounded-xl" />
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          ) : (
            <TableBody className="text-xs sm:text-sm">
              {data.map((transaction: TransactionType) => (
                <TableRow
                  key={transaction._id}
                  onClick={() => navigate(`/transactions/${transaction._id}`)}
                  className="cursor-pointer"
                  role="button"
                  onKeyDown={(e) => onKeyDown(e, transaction._id)}
                  tabIndex={0}
                >
                  <TableCell className="font-medium">
                    {transaction.type}
                  </TableCell>
                  <TableCell>{transaction.title}</TableCell>
                  <TableCell className="">
                    {transaction.type === "Expense" ? (
                      <span>&minus; </span>
                    ) : (
                      <span>+ </span>
                    )}
                    {userData.user.currency}
                    {formatter.format(transaction.amount)}
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          )}
        </Table>
      </CardContent>

      <CardFooter>
        <Link to="/transactions" className="font-bold text-sm text-primary">
          View all transactions
        </Link>
      </CardFooter>
    </Card>
  );
}

export default RecentTransactions;



================================================
FILE: frontend/src/components/SidebarPreferences.tsx
================================================
import { Checkbox } from "@/components/ui/checkbox";
import { useContext } from "react";
import { AppContext } from "@/App";

function SidebarPreferences() {
  const { showGoals, setShowGoals, showTransactions, setShowTransactions } =
    useContext(AppContext);

  function changeGoalState() {
    if (showGoals) {
      setShowGoals(false);
      localStorage.setItem("showGoals", "false");
    } else {
      setShowGoals(true);
      localStorage.setItem("showGoals", "true");
    }
  }

  function changeTransactionsState() {
    if (showTransactions) {
      setShowTransactions(false);
      localStorage.setItem("showTransactions", "false");
    } else {
      setShowTransactions(true);
      localStorage.setItem("showTransactions", "true");
    }
  }

  return (
    <div className="flex flex-col mt-6">
      <h3 className="font-semibold mb-3 text-sm">Sidebar Preferences</h3>
      <div className="flex gap-10">
        <div className="flex items-center gap-2">
          <Checkbox id="goals" onClick={changeGoalState} checked={showGoals} />
          <label
            htmlFor="goals"
            className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
          >
            Goals
          </label>
        </div>
        <div className="flex items-center gap-2">
          <Checkbox
            id="transactions"
            onClick={changeTransactionsState}
            checked={showTransactions}
          />
          <label
            htmlFor="transactions"
            className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
          >
            Transactions
          </label>
        </div>
      </div>
    </div>
  );
}

export default SidebarPreferences;



================================================
FILE: frontend/src/components/SingleTransaction.tsx
================================================
import { useContext } from "react";
import { useParams, Link, useNavigate } from "react-router-dom";
import axios from "axios";
import { Button } from "./ui/button";
import { FaPlus as PlusIcon } from "react-icons/fa";
import { FaArrowLeft as LeftArrow } from "react-icons/fa6";
import { IoReceipt as ReceiptIcon } from "react-icons/io5";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { formatter } from "@/utils/formatter";
import { AppContext } from "@/App";
import { useQuery } from "@tanstack/react-query";
import SingleTransactionSkeleton from "./SingleTransactionSkeleton";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import toast from "react-hot-toast";

function SingleTransaction() {
  const { transactionId } = useParams();
  const { userData, setUserData } = useContext(AppContext);
  const navigate = useNavigate();
  const { data, isPending, error } = useQuery({
    queryKey: [transactionId],
    queryFn: async () => {
      return axios
        .post("/transaction/get-transaction", { transactionId })
        .then((res) => res.data.data.transaction);
    },
  });

  function deleteTransaction() {
    const toastPromise = axios
      .post("/transaction/delete-transaction", { transactionId })
      .then((res) => {
        setUserData(res.data.data);
        localStorage.setItem("userData", JSON.stringify(res.data.data));
        navigate("/transactions");
      });

    toast.promise(toastPromise, {
      loading: "Deleting transaction...",
      success: "Transaction deleted",
      error: "Unable to delete transaction",
    });
  }

  if (isPending) return <SingleTransactionSkeleton />;
  if (error) return "Error";

  return (
    <div className="bg-primary rounded-[25px] md:w-screen py-6 px-5 sm:px-8 mt-[-100px] md:mt-0 relative flex flex-col">
      <h2 className="text-3xl font-bold text-background mb-5">
        <Link to={"/transactions"}>
          <LeftArrow className="inline mb-1" /> Back{" "}
        </Link>
      </h2>

      <div className="flex flex-col gap-6 md:flex-row flex-1">
        <Card className="mt-4 relative border-0 flex-1">
          <CardHeader>
            <CardTitle className="text-xl mt-1">{data?.title}</CardTitle>
            <CardDescription>
              {new Date(data?.createdAt).toLocaleDateString("en-US", {
                year: "numeric",
                month: "long",
                day: "numeric",
              })}
            </CardDescription>
          </CardHeader>
          <CardContent>
            {data?.type === "Expense" ? (
              <div
                className="bg-red-500 text-stone-900 font-bold px-4 text-center absolute top-[-16px] left-0 w-full"
                style={{ borderRadius: "20px 20px 0 0" }}
              >
                <p>{data?.type}</p>
              </div>
            ) : (
              <div
                className="bg-green-600 text-stone-800 font-bold px-4 text-center absolute top-[-16px] left-0 w-full"
                style={{ borderRadius: "20px 20px 0 0" }}
              >
                <p>{data?.type}</p>
              </div>
            )}

            <Badge>Wallet: {data?.wallet}</Badge>
            <br />
            {data?.category ? (
              <Badge>Category: {data?.category}</Badge>
            ) : (
              <span></span>
            )}
            <Badge className="block w-40 h-10 text-xl text-center pt-1 mt-4">
              {data?.type === "Expense" ? (
                <span className="">&minus; </span>
              ) : (
                <span className="">+ </span>
              )}
              {userData.user.currency}
              {formatter.format(data?.amount)}
            </Badge>
          </CardContent>
          <CardFooter>
            <AlertDialog>
              <AlertDialogTrigger>
                <Button
                  variant={"outline"}
                  className="md:absolute bottom-6 right-6"
                >
                  Delete Transaction
                </Button>
              </AlertDialogTrigger>
              <AlertDialogContent>
                <AlertDialogHeader>
                  <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                  <AlertDialogDescription>
                    This action cannot be undone. This will permanently delete
                    your transaction.
                  </AlertDialogDescription>
                </AlertDialogHeader>
                <AlertDialogFooter>
                  <AlertDialogCancel>Cancel</AlertDialogCancel>
                  <AlertDialogAction
                    onClick={deleteTransaction}
                    className="bg-red-500 text-white hover:bg-red-600"
                  >
                    Continue
                  </AlertDialogAction>
                </AlertDialogFooter>
              </AlertDialogContent>
            </AlertDialog>
          </CardFooter>
        </Card>

        {data?.receipt ? (
          <Card className="h-52 md:w-[300px] xl:w-[350px] md:h-full p-2">
            <a href={data.receipt} target="_blank">
              <div
                style={{ backgroundImage: `url(${data.receipt})` }}
                className={`h-full rounded-[20px] bg-cover bg-center bg-no-repeat`}
              />
            </a>
          </Card>
        ) : (
          <Card className="h-52 xl:w-[350px] md:h-full flex justify-center items-center flex-col gap-2">
            <ReceiptIcon className="w-14 h-14 text-primary" />
            <p className="text-primary font-bold">No receipt</p>
          </Card>
        )}
      </div>

      <Button
        className="font-bold h-14 text-md md:w-72 flex gap-2 w-full mt-6"
        variant={"outline"}
        onClick={() => navigate("/create-transaction")}
      >
        <PlusIcon className="w-5 h-5" />
        New Transaction
      </Button>
    </div>
  );
}

export default SingleTransaction;



================================================
FILE: frontend/src/components/SingleTransactionSkeleton.tsx
================================================
import { Button } from "./ui/button";
import { FaPlus as PlusIcon } from "react-icons/fa";
import { FaArrowLeft as LeftArrow } from "react-icons/fa6";
import { IoReceipt as ReceiptIcon } from "react-icons/io5";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Link, useNavigate } from "react-router-dom";
import { Skeleton } from "./ui/skeleton";

function SingleTransactionSkeleton() {
  const navigate = useNavigate();

  return (
    <div className="bg-primary rounded-[25px] md:w-screen py-6 px-5 sm:px-8 mt-[-100px] md:mt-0 relative flex flex-col">
      <Link
        to={"/transactions"}
        className="text-3xl font-bold text-background mb-5"
      >
        <LeftArrow className="inline mb-1" /> Back{" "}
      </Link>

      <div className="flex flex-col gap-6 md:flex-row flex-1">
        <Card className="relative border-0 flex-1">
          <CardHeader>
            <Skeleton className="w-40 h-6" />
          </CardHeader>
          <CardContent>
            <Skeleton className="w-full md:h-80 h-40" />
          </CardContent>
        </Card>

        <Card className="h-52 md:w-[25vw] xl:w-[350px] md:h-full flex justify-center items-center flex-col gap-2">
          <ReceiptIcon className="w-14 h-14 text-primary" />
          <p className="text-primary font-bold">No receipt</p>
        </Card>
      </div>

      <Button
        className="font-bold h-14 text-md md:w-72 flex gap-2 w-full mt-6"
        variant={"outline"}
        onClick={() => navigate("/create-transaction")}
      >
        <PlusIcon className="w-5 h-5" />
        New Transaction
      </Button>
    </div>
  );
}

export default SingleTransactionSkeleton;



================================================
FILE: frontend/src/components/SingularGoalView.tsx
================================================
import axios from "axios";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardFooter,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import UpdateGoal from "./UpdateGoal";
import { useContext } from "react";
import { AppContext } from "@/App";
import AddMoneyToGoal from "./AddMoneyToGoal";
import { MdDeleteForever as DeleteIcon } from "react-icons/md";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";

const formatter = new Intl.NumberFormat("en-US");

type PropTypes = {
  setIsSelected?: React.Dispatch<React.SetStateAction<boolean>>;
};

function SingularGoalView({ setIsSelected }: PropTypes) {
  const { userData, selectedGoal, setUserData, setSelectedGoal } =
    useContext(AppContext);

  async function deleteGoal() {
    if (!selectedGoal) return;

    await axios
      .post("/goals/delete-goal", {
        goalId: selectedGoal._id,
        goalCurrentAmount: selectedGoal.currentAmount,
      })
      .then((res) => {
        setUserData(res.data.data);
        localStorage.setItem("userData", JSON.stringify(res.data.data));
        setSelectedGoal({});
        if (!setIsSelected) return;
        setIsSelected(false);
      });
  }

  return (
    <Card className="flex-1 mb-6 sm:mt-3 flex flex-col relative">
      <CardHeader>
        <CardTitle className="text-lg flex justify-between">
          {selectedGoal.title}
          <AlertDialog>
            <AlertDialogTrigger>
              <DeleteIcon className="w-8 h-8 text-destructive cursor-pointer" />
            </AlertDialogTrigger>
            <AlertDialogContent>
              <AlertDialogHeader>
                <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                <AlertDialogDescription>
                  This action cannot be undone. This will permanently delete
                  your goal, and all it's money will be added to your account
                  balance.
                </AlertDialogDescription>
              </AlertDialogHeader>
              <AlertDialogFooter>
                <AlertDialogCancel>Cancel</AlertDialogCancel>
                <AlertDialogAction onClick={deleteGoal}>
                  Continue
                </AlertDialogAction>
              </AlertDialogFooter>
            </AlertDialogContent>
          </AlertDialog>
        </CardTitle>
        <div>
          <Badge>{selectedGoal.category}</Badge>
        </div>
      </CardHeader>
      <CardContent>
        <h3 className="text-center mb-2">
          You have saved{" "}
          <span className="font-bold text-primary">
            {(
              (selectedGoal.currentAmount * 100) /
              selectedGoal.finalAmount
            ).toFixed(1)}
            %
          </span>{" "}
          of your goal, keep going!
        </h3>
        <div className="flex justify-center items-center gap-2 sm:gap-6 font-semibold mb-4">
          {userData.user.currency}
          {formatter.format(selectedGoal.currentAmount)}
          <Progress
            value={
              (selectedGoal.currentAmount * 100) / selectedGoal.finalAmount
            }
          />
          {userData.user.currency}
          {formatter.format(selectedGoal.finalAmount)}
        </div>
        <div className="flex flex-col gap-2">
          <p>
            <span className="font-bold text-primary">Final Target: </span>
            {userData.user.currency}
            {formatter.format(selectedGoal.finalAmount)}
          </p>
          <p>
            <span className="font-bold text-primary">
              Current Saved Amount:{" "}
            </span>
            {userData.user.currency}
            {formatter.format(selectedGoal.currentAmount)}
          </p>
          <p>
            <span className="font-bold text-primary">Date of Completion: </span>
            {!selectedGoal.date ? <span>Not Set</span> : selectedGoal.date}
          </p>
          <p>
            <span className="font-bold text-primary">Description: </span>
            {!selectedGoal.description ? (
              <span>Not Set</span>
            ) : (
              selectedGoal.description
            )}
          </p>
        </div>
      </CardContent>
      <CardFooter className="flex gap-4 md:justify-self-end md:self-end bottom-0 flex-col md:flex-row items-start md:items-end h-full">
        <UpdateGoal />
        <AddMoneyToGoal />
      </CardFooter>
    </Card>
  );
}

export default SingularGoalView;



================================================
FILE: frontend/src/components/theme-provider.tsx
================================================
import { createContext, useContext, useEffect, useState } from "react"

type Theme = "dark" | "light" | "system"

type ThemeProviderProps = {
  children: React.ReactNode
  defaultTheme?: Theme
  storageKey?: string
}

type ThemeProviderState = {
  theme: Theme
  setTheme: (theme: Theme) => void
}

const initialState: ThemeProviderState = {
  theme: "system",
  setTheme: () => null,
}

const ThemeProviderContext = createContext<ThemeProviderState>(initialState)

export function ThemeProvider({
  children,
  defaultTheme = "system",
  storageKey = "vite-ui-theme",
  ...props
}: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(
    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme
  )

  useEffect(() => {
    const root = window.document.documentElement

    root.classList.remove("light", "dark")

    if (theme === "system") {
      const systemTheme = window.matchMedia("(prefers-color-scheme: dark)")
        .matches
        ? "dark"
        : "light"

      root.classList.add(systemTheme)
      return
    }

    root.classList.add(theme)
  }, [theme])

  const value = {
    theme,
    setTheme: (theme: Theme) => {
      localStorage.setItem(storageKey, theme)
      setTheme(theme)
    },
  }

  return (
    <ThemeProviderContext.Provider {...props} value={value}>
      {children}
    </ThemeProviderContext.Provider>
  )
}

export const useTheme = () => {
  const context = useContext(ThemeProviderContext)

  if (context === undefined)
    throw new Error("useTheme must be used within a ThemeProvider")

  return context
}



================================================
FILE: frontend/src/components/TransactionDisplay.tsx
================================================
import { useContext } from "react";
import axios from "axios";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { AppContext } from "@/App";
import { ScrollArea } from "./ui/scroll-area";
import { Button } from "./ui/button";
import { FaPlus as PlusIcon } from "react-icons/fa";
import { useNavigate } from "react-router-dom";
import TransactionSkeleton from "./TransactionSkeleton";
import { useQuery } from "@tanstack/react-query";

const formatter = new Intl.NumberFormat("en-US");

export type TransactionType = {
  _id: string;
  title: string;
  wallet: string;
  category: string;
  amount: number;
  type: string;
};

function TransactionDisplay() {
  const { userData } = useContext(AppContext);
  const navigate = useNavigate();
  const { data, isPending, error } = useQuery({
    queryKey: ["get-transactions"],
    queryFn: async () => {
      return axios
        .get("/transaction/get-transactions")
        .then((res) => res.data.data.transactions.reverse());
    },
  });

  // Make the table-row-element to behave like a real button, can't use a real Link element or button to wrap the table-row as that messes up default shadcn table styling
  const onKeyDown = (
    event: React.KeyboardEvent<HTMLTableRowElement>,
    id: string
  ) => {
    if (event.key === "Enter" || event.key === " ") {
      navigate(`/transactions/${id}`);
    }
    return;
  };

  if (error) return "Error";

  return (
    <div className="flex flex-col h-[75vh]">
      <ScrollArea className="rounded-xl bg-background p-5 flex-1">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="md:w-[150px]">Type</TableHead>
              <TableHead className="md:w-[150px]">Method</TableHead>
              <TableHead className="lg:w-[400px]">Title</TableHead>
              <TableHead className="">Amount</TableHead>
            </TableRow>
          </TableHeader>

          {isPending ? (
            <TransactionSkeleton />
          ) : (
            <TableBody>
              {data.map((transaction: TransactionType) => (
                <TableRow
                  key={transaction._id}
                  onClick={() => navigate(`/transactions/${transaction._id}`)}
                  className="cursor-pointer"
                  role="button"
                  onKeyDown={(e) => onKeyDown(e, transaction._id)}
                  tabIndex={0}
                >
                  <TableCell className="font-medium">
                    {transaction.type}
                  </TableCell>
                  <TableCell>{transaction.wallet}</TableCell>
                  <TableCell>{transaction.title}</TableCell>
                  <TableCell className="">
                    {transaction.type === "Expense" ? (
                      <span>&minus; </span>
                    ) : (
                      <span>+ </span>
                    )}
                    {userData.user.currency}
                    {formatter.format(transaction.amount)}
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          )}
        </Table>
      </ScrollArea>

      <div className="">
        <Button
          className="font-bold h-14 text-md md:w-72 flex gap-2 w-full mt-6"
          variant={"outline"}
          onClick={() => navigate("/create-transaction")}
        >
          <PlusIcon className="w-5 h-5" />
          New Transaction
        </Button>
      </div>
    </div>
  );
}

export default TransactionDisplay;



================================================
FILE: frontend/src/components/TransactionSkeleton.tsx
================================================
import { Skeleton } from "@/components/ui/skeleton";
import { TableBody, TableCell, TableRow } from "@/components/ui/table";

function TransactionSkeleton() {
  return (
    <TableBody>
      {[1, 2, 3, 4, 5].map((key) => (
        <TableRow key={key}>
          <TableCell>
            <Skeleton className="h-6 rounded-xl"></Skeleton>
          </TableCell>
          <TableCell>
            <Skeleton className="h-6 rounded-xl"></Skeleton>
          </TableCell>
          <TableCell>
            <Skeleton className="h-6 rounded-xl"></Skeleton>
          </TableCell>
          <TableCell>
            <Skeleton className="h-6 rounded-xl"></Skeleton>
          </TableCell>
        </TableRow>
      ))}
    </TableBody>
  );
}

export default TransactionSkeleton;



================================================
FILE: frontend/src/components/UpdateAccountBalance.tsx
================================================
import { Button } from "@/components/ui/button";
import { FormEvent, useContext, useState } from "react";
import { AppContext } from "@/App";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import axios from "axios";
import { toast } from "react-hot-toast";

const formatter = new Intl.NumberFormat("en-US");

function UpdateAccountBalance() {
  const { userData, setUserData } = useContext(AppContext);
  const [modalOpen, setModalOpen] = useState(false);
  const [amount, setAmount] = useState<number>();

  async function updateAccountBalance(e: FormEvent<HTMLFormElement>) {
    e.preventDefault();
    if (amount === undefined) {
      toast.error("New account balance is required");
      return;
    }
    if (amount < 1) {
      toast.error(
        `Account balance can't be less than ${userData.user.currency}1`
      );
      return;
    }

    await axios
      .post("/users/update-account-balance", {
        newAmount: amount,
      })
      .then((res) => {
        localStorage.setItem("userData", JSON.stringify(res.data.data));
        setUserData(res.data.data);
        setModalOpen(false);
        toast.success(
          `Account balance updated to ${
            userData.user.currency
          }${formatter.format(amount)}`
        );
      });
  }

  return (
    <Dialog open={modalOpen} onOpenChange={setModalOpen}>
      <DialogTrigger asChild>
        <Button variant={"outline"}>Update Account Balance</Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <form onSubmit={updateAccountBalance}>
          <DialogHeader>
            <DialogTitle>Update Account Balance</DialogTitle>
            <DialogDescription>
              Add your new account balance. Click save when you're done.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-1.5 py-4">
            <Label htmlFor="amount">New Account Balance</Label>
            <Input
              id="amount"
              className="col-span-3"
              type="number"
              min="1"
              required
              onChange={(e) => {
                setAmount(+e.target.value);
              }}
            />
          </div>
          <DialogFooter>
            <Button type="submit">Save changes</Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}

export default UpdateAccountBalance;



================================================
FILE: frontend/src/components/UpdateCurrency.tsx
================================================
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Card, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import axios from "axios";
import { toast } from "react-hot-toast";
import { FormEvent, useContext, useState } from "react";
import { AppContext } from "@/App";

function UpdateCurrency() {
  const [currency, setCurrency] = useState<string>();
  const { userData, setUserData } = useContext(AppContext);

  function handleSubmit(e: FormEvent<HTMLFormElement>) {
    e.preventDefault();

    if (!currency) {
      toast.error("Currency is required");
      return;
    }

    if (currency === userData.user?.currency) {
      toast.error("Nothing changed", {
        id: "nothing-changed",
        icon: "📌",
      });
      return;
    }

    const toastPromise = axios
      .post("/users/update-currency", { newCurrency: currency })
      .then((res) => {
        localStorage.setItem("userData", JSON.stringify(res.data.data));
        setUserData(res.data.data);
      });

    toast.promise(toastPromise, {
      loading: "Saving",
      success: "Saved",
      error: "Error when fetching",
    });
  }
  return (
    <Card className="max-w-[350px]">
      <form onSubmit={handleSubmit}>
        <CardHeader className="space-y-1">
          <CardTitle className="text-xl">Change Currency</CardTitle>
        </CardHeader>
        <CardFooter className="flex gap-4 flex-col sm:flex-row">
          <Select onValueChange={(item) => setCurrency(item)}>
            <SelectTrigger className="h-9 data-[placeholder]:text-muted-foreground">
              <SelectValue placeholder="Select Currency" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="$">$ USD</SelectItem>
              <SelectItem value="€">€ EUR</SelectItem>
              <SelectItem value="¥">¥ JPY</SelectItem>
              <SelectItem value="₹">₹ INR</SelectItem>
              <SelectItem value="A$">A$ AUD</SelectItem>
              <SelectItem value="C$">C$ CAD</SelectItem>
            </SelectContent>
          </Select>

          <Button className="w-full sm:w-32" type="submit">
            Save Changes
          </Button>
        </CardFooter>
      </form>
    </Card>
  );
}

export default UpdateCurrency;



================================================
FILE: frontend/src/components/UpdateGoal.tsx
================================================
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetFooter,
  SheetTitle,
} from "@/components/ui/sheet";
import { Button } from "./ui/button";
import { Label } from "@radix-ui/react-dropdown-menu";
import { Input } from "./ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import axios from "axios";
import { useContext, useState, useEffect, FormEvent } from "react";
import { AppContext } from "@/App";
import { useToast } from "@/components/ui/use-toast";

function UpdateGoal() {
  const { setUserData, selectedGoal, setSelectedGoal } = useContext(AppContext);
  const [sheetOpen, setSheetOpen] = useState(false);
  const [title, setTitle] = useState(selectedGoal.title);
  const [amount, setAmount] = useState(selectedGoal.finalAmount);
  const [category, setCategory] = useState(selectedGoal.category);
  const [description, setDescription] = useState(selectedGoal.description);
  const { toast } = useToast();

  useEffect(() => {
    setTitle(selectedGoal.title);
    setAmount(selectedGoal.finalAmount);
    setCategory(selectedGoal.category);
    setDescription(selectedGoal.description);
  }, [selectedGoal]);

  async function handleSubmit(e: FormEvent<HTMLFormElement>) {
    e.preventDefault();
    if (title === undefined || amount === undefined) return;

    if (
      title === selectedGoal.title &&
      amount === selectedGoal.finalAmount &&
      category === selectedGoal.category &&
      description === selectedGoal.description
    ) {
      toast({
        // title: "Scheduled: Catch up",
        description: "No Changes Made",
      });
      setSheetOpen(false);
      return;
    }
    await axios
      .post("/goals/update-goal", {
        goalId: selectedGoal._id,
        title,
        finalAmount: amount,
        category,
        description,
      })
      .then((res) => {
        localStorage.setItem("userData", JSON.stringify(res.data.data));
        setUserData(res.data.data);
        setSelectedGoal(res.data.data.goal);
        setSheetOpen(false);
      });
  }

  return (
    <Sheet open={sheetOpen} onOpenChange={setSheetOpen}>
      <Button
        variant={"outline"}
        onClick={() => {
          setSheetOpen(true);
        }}
      >
        Update this Goal
      </Button>
      <SheetContent>
        <form
          onSubmit={(e) => {
            handleSubmit(e);
          }}
        >
          <SheetHeader>
            <SheetTitle>Update this Goal</SheetTitle>
            <SheetDescription>
              Change whatever you want to update and click save.
            </SheetDescription>
          </SheetHeader>
          <div className="grid gap-4 py-4">
            <div className="">
              <Label>Title</Label>
              <Input
                id="title"
                className="col-span-3"
                type="text"
                maxLength={30}
                required
                placeholder="To buy a house"
                value={title}
                onChange={(e) => {
                  setTitle(e.target.value);
                }}
              />
            </div>
            <div className="">
              <Label>Amount</Label>
              <Input
                id="amount"
                className="col-span-3"
                type="number"
                min={1}
                required
                placeholder="How much do you want to save?"
                value={amount}
                onChange={(e) => {
                  setAmount(e.target.value);
                }}
              />
            </div>
            <div>
              <Label>Category</Label>
              <Select
                onValueChange={(value) => setCategory(value)}
                value={category}
              >
                <SelectTrigger className="h-9 data-[placeholder]:text-muted-foreground">
                  <SelectValue placeholder="Optional Category" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Savings">Savings</SelectItem>
                  <SelectItem value="Investment">Investment</SelectItem>
                  <SelectItem value="Emergency">Emergency</SelectItem>
                  <SelectItem value="Travel">Travel</SelectItem>
                  <SelectItem value="Retirement">Retirement</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="">
              <Label>Description</Label>
              <Textarea
                id="description"
                placeholder="Optional description here"
                value={description}
                onChange={(e) => {
                  setDescription(e.target.value);
                }}
              />
            </div>
          </div>
          <SheetFooter>
            <Button type="submit">Save changes</Button>
          </SheetFooter>
        </form>
      </SheetContent>
    </Sheet>
  );
}

export default UpdateGoal;



================================================
FILE: frontend/src/components/UpdateIncomeAndExpense.tsx
================================================
import { FormEvent, useContext, useState } from "react";
import { AppContext } from "@/App";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { toast } from "react-hot-toast";
import axios from "axios";

const formatter = new Intl.NumberFormat("en-US");

function UpdateIncomeAndExpense() {
  const { userData, setUserData } = useContext(AppContext);
  const [modalOpen, setModalOpen] = useState(false);
  const [income, setIncome] = useState<number>();
  const [expense, setExpense] = useState<number>();

  async function handleSubmit(e: FormEvent<HTMLFormElement>) {
    e.preventDefault();
    if (expense === undefined || income === undefined) {
      toast.error("Income and expense is required");
      return;
    }
    if (expense > income) {
      toast.error("Expenses can't be greater than income.");
      return;
    }
    await axios
      .post("/users/add-income-and-expense", {
        income,
        expense,
      })
      .then((res) => {
        localStorage.setItem("userData", JSON.stringify(res.data.data));
        setUserData(res.data.data);
        setModalOpen(false);
        toast.success(
          `Income and expenses updated to ${
            userData.user.currency
          }${formatter.format(income)} and ${
            userData.user.currency
          }${formatter.format(expense)}`
        );
      });
  }

  return (
    <Dialog open={modalOpen} onOpenChange={setModalOpen}>
      <DialogTrigger asChild>
        <Button variant="outline">Update Income and Expense</Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <form onSubmit={handleSubmit}>
          <DialogHeader>
            <DialogTitle>Update Income and Expense</DialogTitle>
            <DialogDescription>
              Add your income and expenses here. Click save when you're done.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="income" className="text-right">
                Income
              </Label>
              <Input
                id="income"
                className="col-span-3"
                type="number"
                min="0"
                required
                onChange={(e) => {
                  setIncome(+e.target.value);
                }}
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="expense" className="text-right">
                Expense
              </Label>
              <Input
                id="expense"
                className="col-span-3"
                type="number"
                min="0"
                required
                onChange={(e) => {
                  setExpense(+e.target.value);
                }}
              />
            </div>
          </div>
          <DialogFooter>
            <Button type="submit">Save changes</Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}

export default UpdateIncomeAndExpense;



================================================
FILE: frontend/src/components/UpdatePassword.tsx
================================================
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@radix-ui/react-dropdown-menu";
import { toast } from "react-hot-toast";
import { FormEvent, useState } from "react";
import axios from "axios";

function UpdatePassword() {
  const [oldPassword, setOldPasword] = useState<string>();
  const [password, setPassword] = useState<string>();

  async function handleSubmit(e: FormEvent<HTMLFormElement>) {
    e.preventDefault();

    if (!password || !oldPassword) {
      toast.error("Password can't be empty");
      return;
    }

    if (password === oldPassword) {
      toast.error("New password can't be the same as your old password");
      return;
    }

    const toastPromise = axios.post("/users/update-password", {
      oldPassword,
      newPassword: password,
    });

    toast.promise(toastPromise, {
      loading: "Updating password",
      success: "Updated password",
      error: "Invalid old password",
    });
  }

  return (
    <Card className="max-w-[350px]">
      <form onSubmit={handleSubmit}>
        <CardHeader className="space-y-1">
          <CardTitle className="text-xl">Update Password</CardTitle>
          <CardDescription>
            Enter your old password and create a new password to update.
          </CardDescription>
        </CardHeader>
        <CardContent className="grid gap-4">
          <div className="grid gap-2">
            <Label>Old Password</Label>
            <Input
              id="old-password"
              type="password"
              required
              onChange={(e) => setOldPasword(e.target.value)}
            />
          </div>
          <div className="grid gap-2">
            <Label>New Password</Label>
            <Input
              id="password"
              type="password"
              required
              onChange={(e) => setPassword(e.target.value)}
            />
          </div>
        </CardContent>
        <CardFooter className="flex flex-col gap-4">
          <Button className="w-full" type="submit">
            Update Password
          </Button>
        </CardFooter>
      </form>
    </Card>
  );
}

export default UpdatePassword;



================================================
FILE: frontend/src/components/payment/PaymentSuccess.tsx
================================================
import { FcOk as CheckIcon } from "react-icons/fc";
import { Button } from "../ui/button";
import { PiCrown as ProIcon } from "react-icons/pi";
import { Link } from "react-router-dom";

function PaymentSuccess() {
  return (
    <div className="bg-primary rounded-[25px] md:w-screen py-5 px-5 sm:px-8 mt-[-100px] md:mt-0">
      <h1 className="text-3xl font-bold text-background mb-5">Payment</h1>
      <div className="bg-card w-96 p-10 rounded-[20px] flex flex-col justify-center items-center gap-3 m-auto mt-6 border-t-[10px] border-t-green-500 shadow-2xl">
        <CheckIcon className="w-24 h-24" />
        <h3 className="text-3xl text-center font-medium">
          Your payment was successful
        </h3>
        <p className="text-center text-lg">
          You are a{" "}
          <span className="text-yellow-400">
            <ProIcon className="w-6 h-6 inline mr-1" />
            premium
          </span>{" "}
          member now!
        </p>
        <Link to={"/"}>
          <Button className="mt-4">Continue to Dashboard</Button>
        </Link>
        <Link to={"/statistics"}>
          <Button variant="outline">Continue to Statistics</Button>
        </Link>
      </div>
    </div>
  );
}

export default PaymentSuccess;



================================================
FILE: frontend/src/components/stats/FixedIncomeExpenseGraph.tsx
================================================
import { AppContext } from "@/App";
import "chart.js/auto";
import { useContext } from "react";
import { Doughnut } from "react-chartjs-2";
import AddIncomeAndExpense from "../AddIncomeAndExpense";
import {
  HoverCard,
  HoverCardContent,
  HoverCardTrigger,
} from "@/components/ui/hover-card";
import { FaInfoCircle as InfoIcon } from "react-icons/fa";
import { Link } from "react-router-dom";

function FixedIncomeExpenseGraph() {
  const { userData } = useContext(AppContext);

  const data = {
    labels: ["Income", "Expense"],
    datasets: [
      {
        label: "Fixed income and expense",
        data: [userData.user.income, userData.user.expense],
        backgroundColor: ["#22c55e", "#ef4444"],
        hoverOffset: 4,
      },
    ],
  };

  return (
    <>
      {userData.user.hasSetIncomeAndExpense ? (
        <div className="bg-card max-w-[300px] rounded-[20px] p-5 flex flex-col items-center gap-4">
          <p className="font-medium text-center flex items-center">
            Fixed Income and Expense
            <HoverCard>
              <HoverCardTrigger>
                <InfoIcon className="inline ml-2 mb-[2px] cursor-pointer" />
              </HoverCardTrigger>
              <HoverCardContent className="text-sm font-normal">
                This is the fixed income and expense that you can update in{" "}
                <Link to="/account" className="underline text-primary">
                  your account page.
                </Link>
              </HoverCardContent>
            </HoverCard>
          </p>
          <Doughnut data={data} />
        </div>
      ) : (
        <AddIncomeAndExpense />
      )}
    </>
  );
}

export default FixedIncomeExpenseGraph;



================================================
FILE: frontend/src/components/stats/HiddenStats.tsx
================================================
import "chart.js/auto";
import { Doughnut } from "react-chartjs-2";
import { Line } from "react-chartjs-2";
import { Bar } from "react-chartjs-2";
import { Pie } from "react-chartjs-2";
import { PolarArea } from "react-chartjs-2";

const data = {
  labels: ["Blue", "Red", "Yellow"],
  datasets: [
    {
      label: "My First Dataset",
      data: [300, 50, 100],
      backgroundColor: [
        "rgb(54, 162, 235)",
        "rgb(255, 99, 132)",
        "rgb(255, 205, 86)",
      ],
      hoverOffset: 4,
    },
  ],
};

function HiddenStats() {
  return (
    <div className="flex flex-wrap blur-[5px] gap-6">
      <div className="bg-card max-w-80 h-60 rounded-[20px] p-5 flex flex-col items-center gap-10">
        <Doughnut data={data} />
      </div>
      <div className="bg-card max-w-80 h-60 rounded-[20px] p-5 flex flex-col items-center gap-10">
        <Line data={data} />
      </div>
      <div className="bg-card h-60 rounded-[20px] p-5">
        <PolarArea data={data} />
      </div>
      <div className="bg-card max-w-80 h-60 rounded-[20px] p-5 md:flex flex-col items-center gap-10 hidden ">
        <Bar data={data} />
      </div>
      <div className="bg-card max-w-80 h-60 rounded-[20px] p-5 md:flex flex-col items-center gap-10 hidden ">
        <Pie data={data} />
      </div>
      <div className="bg-card max-w-80 h-60 rounded-[20px] p-5 md:flex flex-col items-center gap-10 hidden ">
        <Doughnut data={data} />
      </div>
    </div>
  );
}

export default HiddenStats;



================================================
FILE: frontend/src/components/stats/TimeRangeIncomeAndExpense.tsx
================================================
import { Bar } from "react-chartjs-2";
import { Link } from "react-router-dom";
import { Button } from "../ui/button";

interface TimeRangeProps {
  timeRange: "week" | "month" | "year";
  data: {
    income: number;
    expense: number;
  };
}

function TimeRangeIncomeAndExpense({ timeRange, data }: TimeRangeProps) {
  const chartData = {
    labels: ["Income", "Expense"],
    datasets: [
      {
        label: `Income and expense for this ${timeRange}`,
        data: [data.income, data.expense],
        backgroundColor: ["#22c55e", "#ef4444"],
        hoverOffset: 4,
      },
    ],
  };

  if (!data.income && !data.expense) {
    return (
      <div className="bg-card max-w-[230px] rounded-[20px] p-5 flex flex-col justify-center items-center gap-4">
        <p className="text-sm text-center flex items-center">
          You didn't make any transactions this {timeRange}.
        </p>
        <Link to={"/create-transaction"}>
          <Button className="">Make a transaction</Button>
        </Link>
      </div>
    );
  }

  return (
    <div className="bg-card max-w-[300px] rounded-[20px] p-5 flex flex-col justify-between">
      <p className="text-sm text-center flex items-center justify-center">
        {timeRange.toUpperCase()}
      </p>
      <Bar data={chartData} />
    </div>
  );
}

export default TimeRangeIncomeAndExpense;



================================================
FILE: frontend/src/components/ui/alert-dialog.tsx
================================================
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}



================================================
FILE: frontend/src/components/ui/avatar.tsx
================================================
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }



================================================
FILE: frontend/src/components/ui/badge.tsx
================================================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }



================================================
FILE: frontend/src/components/ui/button.tsx
================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }



================================================
FILE: frontend/src/components/ui/calendar.tsx
================================================
import * as React from "react";
import { ChevronLeftIcon, ChevronRightIcon } from "@radix-ui/react-icons";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: cn(
          "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md",
          props.mode === "range"
            ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
            : "[&:has([aria-selected])]:rounded-md"
        ),
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-8 w-8 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_start: "day-range-start",
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50  aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: () => <ChevronLeftIcon className="h-4 w-4" />,
        IconRight: () => <ChevronRightIcon className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };



================================================
FILE: frontend/src/components/ui/card.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }



================================================
FILE: frontend/src/components/ui/checkbox.tsx
================================================
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { CheckIcon } from "@radix-ui/react-icons"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <CheckIcon className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }



================================================
FILE: frontend/src/components/ui/command.tsx
================================================
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { MagnifyingGlassIcon } from "@radix-ui/react-icons"
import { Command as CommandPrimitive } from "cmdk"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <MagnifyingGlassIcon className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}



================================================
FILE: frontend/src/components/ui/dialog.tsx
================================================
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { Cross2Icon } from "@radix-ui/react-icons"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <Cross2Icon className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}



================================================
FILE: frontend/src/components/ui/drawer.tsx
================================================
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}



================================================
FILE: frontend/src/components/ui/dropdown-menu.tsx
================================================
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import {
  CheckIcon,
  ChevronRightIcon,
  DotFilledIcon,
} from "@radix-ui/react-icons"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRightIcon className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <DotFilledIcon className="h-4 w-4 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}



================================================
FILE: frontend/src/components/ui/hover-card.tsx
================================================
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }



================================================
FILE: frontend/src/components/ui/input.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }



================================================
FILE: frontend/src/components/ui/label.tsx
================================================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }



================================================
FILE: frontend/src/components/ui/popover.tsx
================================================
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverAnchor = PopoverPrimitive.Anchor

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }



================================================
FILE: frontend/src/components/ui/progress.tsx
================================================
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-primary/20",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }



================================================
FILE: frontend/src/components/ui/scroll-area.tsx
================================================
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }



================================================
FILE: frontend/src/components/ui/select.tsx
================================================
import * as React from "react"
import {
  CaretSortIcon,
  CheckIcon,
  ChevronDownIcon,
  ChevronUpIcon,
} from "@radix-ui/react-icons"
import * as SelectPrimitive from "@radix-ui/react-select"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <CaretSortIcon className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUpIcon />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDownIcon />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}



================================================
FILE: frontend/src/components/ui/sheet.tsx
================================================
import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { Cross2Icon } from "@radix-ui/react-icons"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <Cross2Icon className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}



================================================
FILE: frontend/src/components/ui/skeleton.tsx
================================================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-primary/10", className)}
      {...props}
    />
  )
}

export { Skeleton }



================================================
FILE: frontend/src/components/ui/table.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn(
      "p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}



================================================
FILE: frontend/src/components/ui/tabs.tsx
================================================
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }



================================================
FILE: frontend/src/components/ui/textarea.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }



================================================
FILE: frontend/src/components/ui/toast.tsx
================================================
import * as React from "react"
import { Cross2Icon } from "@radix-ui/react-icons"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <Cross2Icon className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold [&+div]:text-xs", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}



================================================
FILE: frontend/src/components/ui/toaster.tsx
================================================
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"
import { useToast } from "@/components/ui/use-toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}



================================================
FILE: frontend/src/components/ui/use-toast.ts
================================================
// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }



================================================
FILE: frontend/src/hooks/useTitle.tsx
================================================
import { useEffect } from "react";

function useTitle(title: string) {
  useEffect(() => {
    document.title = `${title} - SpendSync`;
  }, [title]);
}
export default useTitle;



================================================
FILE: frontend/src/lib/utils.ts
================================================
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}



================================================
FILE: frontend/src/pages/Account.tsx
================================================
import { FormEvent, useContext, useState } from "react";
import { AppContext } from "@/App";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { toast } from "react-hot-toast";
import DatePicker from "@/components/DatePicker";
import SidebarPreferences from "@/components/SidebarPreferences";
import MoreAccountOptions from "@/components/MoreAccountOptions";
import axios from "axios";
import useTitle from "@/hooks/useTitle";

const getAvatarFallback = (name: string) =>
  name
    .split(" ")
    .map((word) => word.charAt(0).toUpperCase())
    .join("");

function Account() {
  useTitle("Account");
  const { userData, setUserData } = useContext(AppContext);
  const [name, setName] = useState<string>(userData.user.fullName);
  const [bio, setBio] = useState<string>(userData.user.bio || undefined);
  const [avatar, setAvatar] = useState(userData.user.avatar);

  function updateUserDetails() {
    if (name === userData.user.fullName && bio === userData.user.bio) {
      if (avatar !== userData.user.avatar) return;
      toast.error("Nothing changed", {
        id: "nothing-changed",
        icon: "📌",
      });
      return;
    }

    const toastPromise = axios
      .post("/users/update-details", { name, bio })
      .then((res) => {
        localStorage.setItem("userData", JSON.stringify(res.data.data));
        setUserData(res.data.data);
      });

    toast.promise(toastPromise, {
      loading: "Saving user details",
      success: "Saved user details",
      error: "Error when fetching",
    });
  }

  async function handleSubmit(e: FormEvent<HTMLFormElement>) {
    e.preventDefault();
    if (!name) {
      toast.error("Full name is required");
      return;
    }

    if (avatar !== userData.user.avatar) {
      if (!["image/jpeg", "image/png"].includes(avatar?.type)) {
        toast.error("Only jpeg and png files are allowed");
        return;
      }

      const formData = new FormData();
      formData.append("avatar", avatar);

      const toastPromise = axios
        .post("/users/upload-avatar", formData, {
          headers: {
            "Content-Type": "multipart/form-data",
          },
        })
        .then((res) => {
          localStorage.setItem("userData", JSON.stringify(res.data.data));
          setUserData(res.data.data);
          setAvatar(userData.user.avatar);
        });

      toast.promise(
        toastPromise,
        {
          loading: "Saving Avatar",
          success: "Saved Avatar",
          error: "Eror when fetching",
        },
        {
          id: "saving-avatar",
        }
      );

      updateUserDetails();
      return;
    }
    updateUserDetails();
  }

  return (
    <div className="bg-primary rounded-[25px] md:w-screen py-5 px-5 sm:px-8 mt-[-100px] md:mt-0">
      <h1 className="text-3xl font-bold text-background mb-5">Account</h1>
      <div className="flex flex-1 gap-6 md:flex-row flex-col">
        <Card className="md:max-w-[350px] px-5 md:px-0 flex flex-col items-center">
          <form
            className="max-w-[350px] md:w-[350px] py-8 flex flex-col items-center gap-5"
            onSubmit={handleSubmit}
          >
            <Avatar className="w-32 h-32">
              <a href={userData.user.avatar} target="_blank">
                <AvatarImage src={userData.user.avatar} />
              </a>
              <AvatarFallback className="text-3xl">
                {getAvatarFallback(userData.user.fullName)}
              </AvatarFallback>
            </Avatar>
            {!userData.user.avatar ? (
              <div className="flex flex-col gap-1.5 w-full md:w-[290px]">
                <Label htmlFor="avatar" className="tex-md">
                  Upload Avatar
                </Label>
                <Input
                  id="avatar"
                  type="file"
                  name="avatar"
                  className="file:text-primary h-10 file:mt-1 cursor-pointer"
                  accept="image/png, image/jpeg"
                  onChange={(e) => {
                    if (!e.target.files) return;
                    setAvatar(e.target.files[0]);
                  }}
                />
              </div>
            ) : (
              <div className="flex flex-col gap-1.5 w-full md:w-[290px]">
                <Label htmlFor="avatar" className="text-md">
                  Change Avatar
                </Label>
                <Input
                  id="avatar"
                  type="file"
                  name="avatar"
                  className="file:text-primary h-12 file:mt-2"
                  accept="image/png, image/jpeg"
                  onChange={(e) => {
                    if (!e.target.files) return;
                    setAvatar(e.target.files[0]);
                  }}
                />
              </div>
            )}

            <div className="w-full md:w-[290px] flex flex-col gap-1.5">
              <Label htmlFor="fullName" className="txt-md">
                Full Name
              </Label>
              <Input
                type="text"
                id="fullName"
                placeholder="Jhon Doe"
                required
                value={name}
                onChange={(e) => setName(e.target.value)}
                maxLength={30}
              />
            </div>

            <div className="w-full md:w-[290px] flex flex-col gap-1.5">
              <Label htmlFor="bio" className="txt-md">
                Bio
              </Label>
              <Textarea
                id="bio"
                placeholder="Tell us about yourself..."
                className=""
                value={bio}
                onChange={(e) => setBio(e.target.value)}
                maxLength={80}
              />
            </div>

            <Button
              className="mt-2 self-center w-full md:w-[290px]"
              type="submit"
            >
              Save Changes
            </Button>
          </form>
        </Card>
        <div className="flex-1 flex flex-col gap-6">
          <Card className="sm:p-10 py-6 px-5">
            <DatePicker />
            <SidebarPreferences />
          </Card>
          <MoreAccountOptions />
        </div>
      </div>
    </div>
  );
}

export default Account;



================================================
FILE: frontend/src/pages/Dashboard.tsx
================================================
import LogoutButton from "@/components/LogoutButton";
import { Outlet } from "react-router-dom";
import { LuLayoutDashboard as OverviewIcon } from "react-icons/lu";
import { GrTransaction as TransactionsIcon } from "react-icons/gr";
import { FaMoneyBillTransfer as HomeIcon } from "react-icons/fa6";
import { IoSettingsOutline as SettingsIcon } from "react-icons/io5";
import { VscGraph as StatsIcon } from "react-icons/vsc";
import { PiCrown as ProIcon } from "react-icons/pi";
import { TbTargetArrow as GoalsIcon } from "react-icons/tb";
import { IoPerson as AccountIcon } from "react-icons/io5";
import { FaCodeBranch as CodeIcon } from "react-icons/fa6";
import { Link } from "react-router-dom";
import { useContext } from "react";
import { AppContext } from "@/App";
import HamburgerMenu from "@/components/HamburgerMenu";
import Command from "@/components/Command";

function Dashboard() {
  const { showGoals, showTransactions, userData } = useContext(AppContext);

  return (
    <Command>
      <div className="m-5 mt-7 flex flex-col md:flex-row gap-32">
        <HamburgerMenu />
        <aside className="text-accent-foreground md:flex flex-col pl-10 w-52 justify-between h-[90vh] hidden">
          <div className="flex flex-col gap-7">
            <Link to={"/"} className="flex items-center gap-2 mt-5 mb-5">
              <HomeIcon className="w-14 h-14 text-primary" />
              <h2 className="text-xl font-bold">
                SpendSync
                {userData.user.isPaidUser && (
                  <div className="flex gap-2 items-center text-yellow-300">
                    <ProIcon className="w-6 h-6" />
                    <span className="text-sm font-semibold">Premium</span>
                  </div>
                )}
              </h2>
            </Link>

            <Link
              to={"/"}
              className="flex items-center gap-6 hover:text-primary"
            >
              <OverviewIcon className="w-6 h-6" />
              <h2 className="text-md">Overview</h2>
            </Link>

            {showTransactions ? (
              <Link
                to={"/transactions"}
                className="flex items-center gap-6 hover:text-primary"
              >
                <TransactionsIcon className="w-6 h-6" />
                <h2 className="text-md">Transactions</h2>
              </Link>
            ) : (
              ""
            )}

            {showGoals ? (
              <Link
                to={"/goals"}
                className="flex items-center gap-6 hover:text-primary"
              >
                <GoalsIcon className="w-6 h-6" />
                <h2 className="text-md">Goals</h2>
              </Link>
            ) : (
              ""
            )}

            <Link
              to={"/statistics"}
              className="flex items-center gap-6 hover:text-primary"
            >
              <StatsIcon className="w-6 h-6" />
              <h2 className="text-md">Statistics</h2>
            </Link>

            <Link
              to={"/account"}
              className="flex items-center gap-6 hover:text-primary"
            >
              <AccountIcon className="w-6 h-6" />
              <h2 className="text-md">Account</h2>
            </Link>

            <Link
              to={"/settings"}
              className="flex items-center gap-6 hover:text-primary"
            >
              <SettingsIcon className="w-6 h-6" />
              <h2 className="text-md">Settings</h2>
            </Link>
            <a
              href="https://github.com/Devansh-Baghel/SpendSync"
              target="_blank"
              className="flex items-center gap-6 hover:text-primary"
            >
              <CodeIcon className="w-6 h-6" />
              <h2 className="text-md">Source Code</h2>
            </a>
          </div>
          <LogoutButton />
        </aside>
        <Outlet />
      </div>
    </Command>
  );
}

export default Dashboard;



================================================
FILE: frontend/src/pages/Goals.tsx
================================================
import FirstGoal from "@/components/FirstGoal";
import { useContext } from "react";
import { AppContext } from "@/App";
import GoalsDisplay from "@/components/GoalsDisplay";
import useTitle from "@/hooks/useTitle";

function Goals() {
  useTitle("Goals");
  const { userData } = useContext(AppContext);

  return (
    <div className="bg-primary rounded-[25px] md:w-screen py-6 px-5 sm:px-8 mt-[-100px] md:mt-0">
      <h1 className="text-3xl font-bold text-background mb-5">Goals</h1>
      {userData.user.goals.length === 0 ? <FirstGoal /> : <GoalsDisplay />}
    </div>
  );
}

export default Goals;



================================================
FILE: frontend/src/pages/Landing.tsx
================================================
import { useEffect } from "react";
import Navbar from "../components/Navbar";
import { Button } from "@/components/ui/button";
import { useNavigate } from "react-router-dom";

function Landing() {
  const navigate = useNavigate();

  useEffect(() => {
    navigate("/register");
  }, []);

  return (
    <>
      <Navbar />
      <Button>Click Me</Button>
    </>
  );
}

export default Landing;



================================================
FILE: frontend/src/pages/Login.tsx
================================================
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@radix-ui/react-dropdown-menu";
import { FormEvent, useContext, useEffect, useState } from "react";
import axios from "axios";
import { Link, useNavigate } from "react-router-dom";
import { AppContext } from "@/App";
import { ToastAction } from "@radix-ui/react-toast";
import { useToast } from "@/components/ui/use-toast";
import DemoLoginButton from "@/components/DemoLoginButton";

function Login() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const { isLoggedIn, setIsLoggedIn, setUserData } = useContext(AppContext);
  const { toast } = useToast();
  const navigate = useNavigate();

  useEffect(() => {
    if (isLoggedIn) navigate("/");
  });

  async function handleSubmit(e: FormEvent<HTMLFormElement>) {
    e.preventDefault();
    if (email.trim() === "") return;
    if (password.trim() === "") return;

    axios
      .post("/users/login", {
        email,
        password,
      })
      .then((response) => {
        localStorage.setItem("userStatus", "loggedIn");
        setIsLoggedIn(true);
        localStorage.setItem("userData", JSON.stringify(response.data.data));
        setUserData(response.data.data);
        navigate("/");
      })
      .catch((error) => {
        if (error.response?.status === 404) {
          toast({
            title: "User does not exist",
            description: "Did you mean to sign up?",
            action: (
              <ToastAction
                altText="register"
                onClick={() => {
                  navigate("/register");
                }}
              >
                Sign up
              </ToastAction>
            ),
          });
        }

        if (error.response?.status === 401) {
          toast({ description: "Incorrect password" });
        }
      });
  }

  return (
    <form
      className="flex justify-center items-center h-screen mx-4"
      onSubmit={(e) => {
        handleSubmit(e);
      }}
    >
      <Card className="max-w-[350px]">
        <CardHeader className="space-y-1">
          <CardTitle className="text-2xl">Login to your account</CardTitle>
          <CardDescription>
            Enter your email and password to login to your account
          </CardDescription>
        </CardHeader>
        <CardContent className="grid gap-4">
          <DemoLoginButton />
          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <span className="w-full border-t" />
            </div>
            <div className="relative flex justify-center text-xs uppercase">
              <span className="bg-background px-2 text-muted-foreground">
                Or continue with
              </span>
            </div>
          </div>
          <div className="grid gap-2">
            <Label>Email</Label>
            <Input
              id="email"
              type="email"
              placeholder="m@example.com"
              required
              onChange={(e) => setEmail(e.target.value)}
            />
          </div>
          <div className="grid gap-2">
            <Label>Password</Label>
            <Input
              id="password"
              type="password"
              required
              onChange={(e) => setPassword(e.target.value)}
            />
          </div>
        </CardContent>
        <CardFooter className="flex flex-col gap-4">
          <Button className="w-full" type="submit">
            Login
          </Button>
          <CardDescription>
            Don't have an account?{" "}
            <Link to={"/register"} className="text-accent-foreground underline">
              Sign up
            </Link>
          </CardDescription>
        </CardFooter>
      </Card>
    </form>
  );
}

export default Login;



================================================
FILE: frontend/src/pages/NewTransaction.tsx
================================================
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import ExpenseTransactionCard from "@/components/ExpenseTransactionCard";
import IncomeTransactionCard from "@/components/IncomeTransactionCard";

function NewTransaction() {
  return (
    <div className="bg-primary rounded-[25px] md:w-screen py-6 px-5 sm:px-8 mt-[-100px] md:mt-0">
      <h1 className="text-3xl font-bold text-background mb-5">
        Create a New Transaction
      </h1>

      <Tabs defaultValue="expense" className="sm:w-[400px]">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="expense">Expense</TabsTrigger>
          <TabsTrigger value="income">Income</TabsTrigger>
        </TabsList>
        <TabsContent value="expense">
          <ExpenseTransactionCard />
        </TabsContent>
        <TabsContent value="income">
          <IncomeTransactionCard />
        </TabsContent>
      </Tabs>
    </div>
  );
}

export default NewTransaction;



================================================
FILE: frontend/src/pages/Overview.tsx
================================================
import { useContext } from "react";
import { AppContext } from "@/App";
import AccountBalance from "@/components/AccountBalance";
import InitialDeposit from "@/components/InitialDeposit";
import IncomeAndExpense from "@/components/IncomeAndExpense";
import AddIncomeAndExpense from "@/components/AddIncomeAndExpense";
import CheckoutButton from "@/components/CheckoutButton";
import RecentTransactions from "@/components/RecentTransactions";
import useTitle from "@/hooks/useTitle";

function Overview() {
  useTitle("Dashboard");
  const { userData } = useContext(AppContext);

  console.log(userData.user.isPaidUser);

  return (
    <div className="bg-primary rounded-[25px] md:w-screen py-6 px-5 sm:px-8 mt-[-100px] md:mt-0">
      <h1 className="text-3xl font-bold text-background mb-5">Overview</h1>
      <div className="flex flex-col md:flex-row gap-6">
        <div>
          {userData.user.currentBalance === 0 ? (
            <InitialDeposit />
          ) : (
            <AccountBalance />
          )}
          <h1 className="text-2xl font-bold text-background my-5">
            Income and expense
          </h1>
          {userData.user.hasSetIncomeAndExpense ? (
            <IncomeAndExpense />
          ) : (
            <AddIncomeAndExpense />
          )}
        </div>
        <div className="flex gap-6 flex-col">
          {!userData.user.isPaidUser && <CheckoutButton />}
          <RecentTransactions />
          <p className="text-xl text-background font-bold self-center justify-self-end">
            Try using{" "}
            <span className="bg-background text-primary rounded-lg py-1 px-3 text-sm">
              ctrl + k
            </span>{" "}
            for faster navigation
          </p>
        </div>
      </div>
    </div>
  );
}

export default Overview;



================================================
FILE: frontend/src/pages/Register.tsx
================================================
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@radix-ui/react-dropdown-menu";
import { useToast } from "@/components/ui/use-toast";
import { ToastAction } from "@radix-ui/react-toast";
import { FormEvent, useContext, useEffect, useState } from "react";
import axios from "axios";
import { Link, useNavigate } from "react-router-dom";
import { AppContext } from "@/App";
import DemoLoginButton from "@/components/DemoLoginButton";

function Register() {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const { isLoggedIn, setIsLoggedIn, setUserData } = useContext(AppContext);
  const { toast } = useToast();
  const navigate = useNavigate();

  useEffect(() => {
    if (isLoggedIn) navigate("/");
  }, []);

  async function handleSubmit(e: FormEvent<HTMLFormElement>) {
    e.preventDefault();
    if (name.trim() === "") return;
    if (email.trim() === "") return;
    if (password.trim() === "") return;

    axios
      .post("/users/register", {
        email,
        password,
        fullName: name,
      })
      .then(() => {
        axios
          .post("/users/login", {
            email,
            password,
          })
          .then((response) => {
            localStorage.setItem("userStatus", "loggedIn");
            setIsLoggedIn(true);
            localStorage.setItem(
              "userData",
              JSON.stringify(response.data.data)
            );
            setUserData(response.data.data);
            navigate("/");
          })
          .catch((error) => {
            if (error.response?.status === 404) {
              toast({
                title: "User does not exist",
                description: "Did you mean to sign up?",
                action: (
                  <ToastAction
                    altText="register"
                    onClick={() => {
                      navigate("/register");
                    }}
                  >
                    Sign up
                  </ToastAction>
                ),
              });
            }

            if (error.response?.status === 401) {
              toast({ description: "Incorrect password" });
            }
          });
      })
      .catch((error) => {
        if (error.response?.status === 409) {
          toast({
            title: "Email is already in use",
            description: "Did you mean to sign in?",
            action: (
              <ToastAction
                altText="login"
                onClick={() => {
                  navigate("/login");
                }}
              >
                Sign in
              </ToastAction>
            ),
          });
        }
      });
  }

  return (
    <form
      className="flex justify-center items-center h-screen mx-4"
      onSubmit={(e) => {
        handleSubmit(e);
      }}
    >
      <Card>
        <CardHeader className="space-y-1">
          <CardTitle className="text-2xl">Create an account</CardTitle>
          <CardDescription>
            Enter your email below to create your account
          </CardDescription>
        </CardHeader>
        <CardContent className="grid gap-4">
          <DemoLoginButton />
          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <span className="w-full border-t" />
            </div>
            <div className="relative flex justify-center text-xs uppercase">
              <span className="bg-background px-2 text-muted-foreground">
                Or continue with
              </span>
            </div>
          </div>
          <div className="grid gap-2">
            <Label>Full Name</Label>
            <Input
              id="fullName"
              type="text"
              placeholder="Your Name"
              required
              onChange={(e) => setName(e.target.value)}
            />
          </div>
          <div className="grid gap-2">
            <Label>Email</Label>
            <Input
              id="email"
              type="email"
              placeholder="m@example.com"
              required
              onChange={(e) => setEmail(e.target.value)}
            />
          </div>
          <div className="grid gap-2">
            <Label>Password</Label>
            <Input
              id="password"
              type="password"
              required
              onChange={(e) => setPassword(e.target.value)}
            />
          </div>
        </CardContent>
        <CardFooter className="flex flex-col gap-4">
          <Button className="w-full" type="submit">
            Create account
          </Button>
          <CardDescription>
            Already have an account?{" "}
            <Link to={"/login"} className="text-accent-foreground underline">
              Sign in
            </Link>
          </CardDescription>
        </CardFooter>
      </Card>
    </form>
  );
}

export default Register;



================================================
FILE: frontend/src/pages/ResetDemo.tsx
================================================
import { Button } from "@/components/ui/button";
import toast from "react-hot-toast";
import axios from "axios";
import { useContext } from "react";
import { AppContext } from "@/App";

function ResetDemo() {
  const { isLoggedIn } = useContext(AppContext);

  function resetDemo() {
    const toastPromise = axios.post("/demo/reset-demo-user");

    toast.promise(toastPromise, {
      loading: "Reseting demo user...",
      success: "Demo user has been reset",
      error: "Unable to reset demo user",
    });
  }

  return (
    <div className="flex h-screen w-screen justify-center items-center">
      <Button onClick={resetDemo} disabled={!isLoggedIn}>
        Reset demo user
      </Button>
    </div>
  );
}

export default ResetDemo;



================================================
FILE: frontend/src/pages/Settings.tsx
================================================
import UpdatePassword from "@/components/UpdatePassword";
import UpdateCurrency from "@/components/UpdateCurrency";
import useTitle from "@/hooks/useTitle";

function Settings() {
  useTitle("Settings");
  return (
    <div className="bg-primary rounded-[25px] md:w-screen py-6 px-5 sm:px-8 mt-[-100px] md:mt-0">
      <h1 className="text-3xl font-bold text-background mb-5">Settings</h1>

      <div className="flex flex-col gap-6">
        <UpdatePassword />
        <UpdateCurrency />
      </div>
    </div>
  );
}

export default Settings;



================================================
FILE: frontend/src/pages/Statistics.tsx
================================================
import { useContext } from "react";
import { AppContext } from "@/App";
import HiddenStats from "../components/stats/HiddenStats";
import CheckoutButton from "../components/CheckoutButton";
import useTitle from "../hooks/useTitle";
import FixedIncomeExpenseGraph from "../components/stats/FixedIncomeExpenseGraph";
import TimeRangeIncomeAndExpense from "../components/stats/TimeRangeIncomeAndExpense";
import axios from "axios";
import { useQuery } from "@tanstack/react-query";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
  HoverCard,
  HoverCardContent,
  HoverCardTrigger,
} from "@/components/ui/hover-card";
import { FaInfoCircle as InfoIcon } from "react-icons/fa";

function Statistics() {
  useTitle("Statistics");
  const { userData } = useContext(AppContext);
  const { data, isLoading } = useQuery({
    queryKey: ["time-range-income-expense"],
    queryFn: () => {
      return axios
        .get("/stats/get-income-expense-by-time-range")
        .then((res) => res.data.data);
    },
  });

  return (
    <div className="bg-primary rounded-[25px] md:w-screen py-5 px-5 sm:px-5 mt-[-100px] md:mt-0">
      <h1 className="text-3xl font-bold text-background mb-5">Statistics</h1>

      <ScrollArea className="">
        {userData.user.isPaidUser ? (
          <div className="flex flex-col gap-4 max-h-[75vh]">
            <FixedIncomeExpenseGraph />

            <h2 className="text-2xl font-semibold text-background">
              Income and expense by week / month / year
              <HoverCard>
                <HoverCardTrigger>
                  <InfoIcon className="inline ml-2 mb-[2px] cursor-pointer w-5 h-5" />
                </HoverCardTrigger>
                <HoverCardContent className="text-sm font-normal">
                  This is calculated based on the transactions that you have
                  made.
                </HoverCardContent>
              </HoverCard>
            </h2>
            {isLoading ? (
              // TODO: Add loading skeletons here
              <p>Data loading...</p>
            ) : (
              <div className="flex flex-wrap gap-3">
                <TimeRangeIncomeAndExpense timeRange="week" data={data.week} />
                <TimeRangeIncomeAndExpense
                  timeRange="month"
                  data={data.month}
                />
                <TimeRangeIncomeAndExpense timeRange="year" data={data.year} />
              </div>
            )}
          </div>
        ) : (
          <div className="relative" id="hidden-stats">
            <HiddenStats />
            <div className="absolute w-full top-40 left-0 flex justify-center items-center flex-col">
              <div className="bg-primary rounded-[20px] p-6 flex justify-center items-center flex-col gap-6 border-4 border-background shadow-inner">
                <h3 className="text-2xl text-background font-bold">
                  This is a premium feature
                </h3>
                <div className="md:w-80">
                  <CheckoutButton />
                </div>
              </div>
            </div>
          </div>
        )}
      </ScrollArea>
    </div>
  );
}

export default Statistics;



================================================
FILE: frontend/src/pages/Transactions.tsx
================================================
import { AppContext } from "@/App";
import TransactionDisplay from "@/components/TransactionDisplay";
import { useContext } from "react";
import { useParams, Outlet } from "react-router-dom";
import NewTransaction from "./NewTransaction";
import useTitle from "@/hooks/useTitle";

function Transactions() {
  useTitle("Transactions");
  const { userData } = useContext(AppContext);
  const { transactionId } = useParams();

  if (transactionId) return <Outlet />;

  if (
    !userData.user?.transactionHistory ||
    userData.user.transactionHistory?.length === 0
  ) {
    return <NewTransaction />;
  }
  return (
    <div className="bg-primary rounded-[25px] md:w-screen py-6 px-5 sm:px-8 mt-[-100px] md:mt-0 relative">
      <h1 className="text-3xl font-bold text-background mb-5">Transactions</h1>
      <TransactionDisplay />
    </div>
  );
}

export default Transactions;



================================================
FILE: frontend/src/utils/formatter.ts
================================================
export const formatter = new Intl.NumberFormat("en-US");


